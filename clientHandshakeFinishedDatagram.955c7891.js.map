{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAK,CAAC,81L","sources":["<anon>","src/DTLS/clientHandshakeFinishedDatagram.json"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"kMdvc\", function(module, exports) {\nmodule.exports = JSON.parse('[\"\\u4E3A\\u4E86\\u9A8C\\u8BC1\\u63E1\\u624B\\u6210\\u529F\\u4E14\\u6CA1\\u6709\\u88AB\\u7BE1\\u6539\\u8FC7\\uFF0C\\u5BA2\\u6237\\u7AEF\\u548C\\u670D\\u52A1\\u5668\\u7AEF\\u4E00\\u6837\\uFF0C\\u9700\\u8981\\u521B\\u5EFA\\u4E00\\u4E9B\\u9A8C\\u8BC1\\u6570\\u636E\\u7ED9\\u670D\\u52A1\\u5668\\u7AEF\\u786E\\u8BA4\\u3002\\u9A8C\\u8BC1\\u6570\\u636E\\u662F\\u57FA\\u4E8E\\u6240\\u6709\\u63E1\\u624B\\u4FE1\\u606F\\u7684\\u54C8\\u5E0C\\u503C\\u8BA1\\u7B97\\u5F97\\u5230\\u3002\",{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"\\u5934\\u90E8\\u4FE1\\u606F\\u5B57\\u8282\",{\"props\":{\"className\":\"bytes\"},\"content\":\"2e\"},[\"\\u52A0\\u5BC6\\u7684 DTLS \\u6570\\u636E\\u5305\\u90FD\\u4EE5\\u4E00\\u4E2A \\\\\"\\u7EDF\\u4E00\\u7684\\u5934\\u90E8(unified header)\\\\\"\\u5F00\\u59CB\\u3002\\u5934\\u90E8\\u7684\\u7B2C\\u4E00\\u4E2A\\u5B57\\u8282\\u7ED9\\u51FA\\u4E86\\u5934\\u90E8\\u548C\\u6570\\u636E\\u5305\\u7684\\u7ED3\\u6784\\u4FE1\\u606F\\uFF0C\\u4EE5\\u53CA\\u89E3\\u5BC6\\u65F6\\u9700\\u8981\\u7684\\u4FE1\\u606F\\u3002\",\"\\u503C 0x2e \\u5177\\u6709\\u4EE5\\u4E0B\\u542B\\u4E49\\uFF1A\",{\"Tag\":\"Table\",\"props\":{\"headers\":[\"\",\"\\u503C\",\"\\u542B\\u4E49\"],\"data\":[[\"\\u9AD8\\u4F4D\",\"001\",\"\\u56FA\\u5B9A\\u4F4D\"],[\"\",\"0\",\"\\u5934\\u90E8\\u4E2D\\u4E0D\\u5B58\\u5728\\u8FDE\\u63A5 ID \\u5B57\\u6BB5(1\\u5219\\u5B58\\u5728)\"],[\"\",\"1\",\"\\u5E8F\\u5217\\u53F7\\u5728\\u5934\\u90E8\\u4E2D\\u5360 2 \\u5B57\\u8282\\u957F\"],[\"\",\"1\",\"\\u5934\\u90E8\\u4E2D\\u5B58\\u5728\\\\\"\\u8BB0\\u5F55\\u957F\\u5EA6\\\\\"\\u5B57\\u6BB5(0\\u5219\\u4E0D\\u5B58\\u5728)\"],[\"\\u4F4E\\u4F4D\",\"10\",\"\\u52A0\\u5BC6\\u5E8F\\u5217\\u6307\\u793A(Encryption epoch 2)\\uFF0C\\u73B0\\u5728\\u5BC6\\u94A5\\u662F\\u63E1\\u624B\\u65F6\\u5BC6\\u94A5\"]]}}]],[\"\\u8BB0\\u5F55\\u5E8F\\u53F7\",{\"props\":{\"className\":\"bytes protected\",\"title\":\"\\u88AB\\u52A0\\u5BC6\"},\"content\":\"c2 48\"},{\"props\":{\"className\":\"bytes unprotected\"},\"content\":\"00 00\"},[\"\\u8BB0\\u5F55\\u5E8F\\u53F7\\u662F\\u88AB\\u52A0\\u5BC6\\u4E86\\u7684\\uFF0C\\u7528\\u4EE5\\u9632\\u6B62\\u4E2D\\u95F4\\u4EF6\\u8BEF\\u89E3(interpreting)\\u6216\\u5E72\\u6270\\u6570\\u636E\\u5305\\u7684\\u6392\\u5E8F\\u3002\",\"\\u52A0\\u5BC6\\u662F\\u901A\\u8FC7\\u7528 \\\\\"\\u5BA2\\u6237\\u7AEF\\u5E8F\\u53F7\\u4FDD\\u62A4\\u5BC6\\u94A5\\\\\" \\u5BF9\\u6BCF\\u4E2A\\u6570\\u636E\\u5305\\u7684\\u6709\\u6548\\u8F7D\\u8377\\u6837\\u672C\\u8FDB\\u884C\\u52A0\\u5BC6\\uFF0C\\u7136\\u540E\\u5C06\\u6BCF\\u4E2A\\u6570\\u636E\\u5305\\u4E2D\\u7684\\u67D0\\u4E9B\\u6BD4\\u7279\\u548C\\u5B57\\u8282\\u4E0E\\u6240\\u5F97\\u6570\\u636E\\u8FDB\\u884C XOR \\u5F97\\u5230\\u3002\",\"\\u5982\\u679C\\u8BF4\\u7684\\u4E0D\\u591F\\u8BE6\\u7EC6\\uFF0C\\u8FD9\\u91CC\\u6709\\u4E00\\u4E2A\\u5982\\u4F55\\u52A0\\u5BC6\\u7684\\u4F8B\\u5B50\\uFF1A\",{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### \\\\\"client record number key\\\\\" from handshake keys calc step above\\\\n$ key=beed6218676635c2cb46a45694144fec\\\\n### sample is taken from 16 bytes of payload starting 5 bytes into the record\\\\n$ sample=8a2cd52d5000f8786afb47cdf0b8f2b8\\\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p\\\\n\\\\nc248\\\\n\\\\n### the above bytes are xor\\'d one-for-one into the bytes of the record number\"}}]],[\"\\u8BB0\\u5F55\\u957F\\u5EA6\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 3d\"},[\"\\u6BCF\\u4E2A\\u8BB0\\u5F55\\u9664\\u975E\\u7ED9\\u51FA\\u8FD9\\u4E2A\\u957F\\u5EA6\\u5B57\\u6BB5\\uFF0C\\u5426\\u5219\\u5BF9\\u7B49\\u7AEF\\u5C06\\u8BA4\\u4E3A\\u6570\\u636E\\u62A5\\u5269\\u4F59\\u7684\\u6240\\u6709\\u5B57\\u8282\\u90FD\\u662F\\u540C\\u4E00\\u4E2A\\u8BB0\\u5F55\\u7684\\u771F\\u5B9E\\u8F7D\\u8377\\u3002\\u6709\\u4E86\\u8FD9\\u4E00\\u5B57\\u6BB5\\uFF0C\\u5219\\u5728\\u4E00\\u4E2A\\u6570\\u636E\\u62A5\\u4E2D\\u53EF\\u4EE5\\u53D1\\u9001\\u597D\\u51E0\\u4E2A TLS \\u8BB0\\u5F55(\\u5C3D\\u7BA1\\u4F8B\\u5B50\\u4E2D\\u7684\\u8FDE\\u63A5\\u6CA1\\u6709\\u5229\\u7528\\u8FD9\\u4E2A\\u4F18\\u52BF)\\u3002\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 3d - \\u8868\\u793A TLS \\u8BB0\\u5F55\\u957F\\u5EA6\\u4E3A 0x3d(61) \\u5B57\\u8282\"}]}]],[\"\\u52A0\\u5BC6\\u7684\\u6570\\u636E\\u8F7D\\u8377\",{\"props\":{\"className\":\"bytes encrypted\",\"title\":\"\\u88AB\\\\\"\\u63E1\\u624B\\u5BC6\\u94A5\\\\\"\\u52A0\\u5BC6\"},\"content\":\"8a 2c d5 2d 50 00 f8 78 6a fb 47 cd f0 b8 f2 b8 13 42 b0 0c 43 dc e6 4b 1d 01 94 d2 e2 01 f6 81 75 09 78 52 8b be 26 af 79 61 24 01 c0\"},[\"\\u8FD9\\u4E9B\\u6570\\u636E\\u4F7F\\u7528\\u670D\\u52A1\\u5668\\u7AEF\\u7684\\\\\"\\u63E1\\u624B\\u5BC6\\u94A5\\\\\"\\u8FDB\\u884C\\u52A0\\u5BC6\\u3002\"]],[\"AEAD \\u9274\\u522B\\u6807\\u7B7E\",{\"props\":{\"className\":\"bytes\"},\"content\":\"07 a2 c5 f7 5f 7c ff b7 46 5b c0 1d 23 d8 51 1f\"},[{\"children\":[\"\\u8FD9\\u662F \",{\"Tag\":\"a\",\"props\":{\"href\":\"https://zhuanlan.zhihu.com/p/28566058\"},\"content\":\"AEAD \\u7B97\\u6CD5\"},\"\\u7684\\u9274\\u522B\\u6807\\u7B7E\\uFF0C\\u786E\\u8BA4\\u52A0\\u5BC6\\u6570\\u636E\\u548C\\u8BB0\\u5F55\\u5934\\u7684\\u5B8C\\u6574\\u6027\\u3002\\u5B83\\u7531\\u52A0\\u5BC6\\u7B97\\u6CD5\\u4EA7\\u751F\\uFF0C\\u5E76\\u7531\\u89E3\\u5BC6\\u7B97\\u6CD5\\u6D88\\u8017\\u3002\"]}]]]}},{\"Tag\":\"Annotations\",\"props\":{\"data\":[[\"\",{\"props\":{\"className\":\"decryption-header\"},\"content\":\"\\u89E3\\u5BC6\\u540E\\u7684\\u6570\\u636E\\u8F7D\\u8377\"},[{\"Tag\":\"h4\",\"content\":\"\\u89E3\\u5BC6\"},\"\\u6570\\u636E\\u88AB \\\\\"\\u5BA2\\u6237\\u7AEF\\u63E1\\u624B\\u5BC6\\u94A5\\u8BA1\\u7B97\\\\\" \\u6B65\\u9AA4\\u4E2D\\u4EA7\\u751F\\u7684\\u521D\\u59CB\\u5BC6\\u94A5\\u548C\\u521D\\u59CB\\u5411\\u91CF(IVs)\\u52A0\\u5BC6\\u3002IVs \\u901A\\u8FC7\\u5BC6\\u94A5\\u548C\\u5DF2\\u7ECF\\u7528\\u5BC6\\u94A5\\u52A0\\u5BC6\\u7684\\u8BB0\\u5F55\\u957F\\u5EA6\\u8FDB\\u884C\\u5F02\\u6216\\u64CD\\u4F5C\\u751F\\u6210\\u3002\\u5728\\u4F8B\\u5B50\\u4E2D IV \\u4E3A 0\\u3002\",\"\\u6570\\u636E\\u5305\\u5F00\\u5934\\u7684 5 \\u5B57\\u8282(\\u8BB0\\u5F55\\u5934)\\u8FD8\\u4F1A\\u4F5C\\u4E3A\\u89E3\\u5BC6\\u8FC7\\u7A0B\\u89E3\\u5BC6\\u6210\\u529F\\u65F6\\u5FC5\\u987B\\u6EE1\\u8DB3\\u7684\\u8BA4\\u8BC1\\u6761\\u4EF6\\u3002\",{\"children\":[\"openssl \\u547D\\u4EE4\\u884C\\u5DE5\\u5177\\u8FD8\\u4E0D\\u652F\\u6301 AEAD \\u7B97\\u6CD5\\u52A0\\u89E3\\u5BC6(AEAD ciphers)\\uFF0C\\u4F60\\u53EF\\u4EE5\\u4F7F\\u7528\\u4F5C\\u8005\\u7684\\u547D\\u4EE4\\u884C\\u5DE5\\u5177\\u6765\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://dtls.xargs.org/files/aes_128_gcm_decrypt.c\"},\"content\":\"\\u89E3\\u5BC6\"},\"\\u548C\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://dtls.xargs.org/files/aes_128_gcm_encrypt.c\"},\"content\":\"\\u52A0\\u5BC6\"},\"\\u8FD9\\u4E9B\\u6570\\u636E\\u3002\"]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### from the \\\\\"Client Handshake Keys Calc\\\\\" step\\\\n$ key=6caa2633d5e48f10051e69dc45549c97\\\\n$ iv=106dc6e393b7a9ea8ef29dd7\\\\n### from this record\\\\n$ recdata=2e0000003d\\\\n$ authtag=07a2c5f75f7cffb7465bc01d23d8511f\\\\n$ recordnum=0\\\\n### may need to add -I and -L flags for include and lib dirs\\\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\\\n\\\\n00000000  14 00 00 20 00 01 00 00  00 00 00 20 6f 28 01 39\\\\n00000010  6b 0e 90 eb b4 a3 ba 38  4a bc fc 6b 24 20 1a bd\\\\n00000020  81 b3 16 b2 39 1d a3 78  37 7f ac f5 16\"}}]]]}},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"\\u63E1\\u624B\\u6D88\\u606F\\u5934\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"14 00 00 20\"},[\"\\u6BCF\\u4E2A\\u63E1\\u624B\\u6D88\\u606F\\u90FD\\u4EE5\\u4E00\\u4E2A type \\u548C\\u4E00\\u4E2A len \\u5F00\\u59CB\\u3002\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"14 - \\u63E1\\u624B\\u6D88\\u606F\\u7C7B\\u578B 0x14 (finished)\"},{\"Tag\":\"li\",\"content\":\"00 00 20 - \\u7D27\\u63A5\\u7740\\u7684\\u63E1\\u624B\\u6D88\\u606F\\u6570\\u636E\\u7684\\u957F\\u5EA6 0x20 (32) \\u5B57\\u8282\"}]}]],[\"\\u7528\\u4E8E\\u91CD\\u5EFA\\u63E1\\u624B\\u987A\\u5E8F\\u7684\\u4FE1\\u606F(Handshake Reconstruction Data)\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"00 01 00 00 00 00 00 20\"},[\"\\u56E0\\u4E3A UDP (\\u6216\\u5176\\u4ED6\\u6570\\u636E\\u62A5\\u534F\\u8BAE)\\u4E0D\\u4FDD\\u8BC1\\u4EA4\\u4ED8\\u6216\\u6392\\u5E8F\\uFF0C\\u800C\\u4E14\\u6570\\u636E\\u62A5\\u7684\\u957F\\u5EA6\\u53EF\\u80FD\\u6BD4\\u9700\\u8981\\u53D1\\u9001\\u7684\\u63E1\\u624B\\u8BB0\\u5F55\\u957F\\u5EA6\\u8981\\u5C0F\\u3002\\u56E0\\u6B64 DTLS \\u5FC5\\u987B\\u63D0\\u4F9B\\u4E00\\u5B9A\\u7684\\u4FE1\\u606F\\uFF0C\\u4EE5\\u652F\\u6301\\u5728\\u6570\\u636E\\u4E22\\u5931\\u3001\\u5305\\u91CD\\u6392\\u5E8F\\u6216\\u6709\\u8BB0\\u5F55\\u788E\\u7247\\u7684\\u60C5\\u51B5\\u4E0B\\uFF0C\\u4F7F\\u5F97\\u5BF9\\u7B49\\u7AEF(peer)\\u80FD\\u591F\\u91CD\\u65B0\\u6784\\u5EFA\\u4E00\\u6761\\u6B63\\u786E\\u7684 DTLS \\u8BB0\\u5F55\\u3002\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 01 - DTLS \\u5E8F\\u5217\\u53F7 0x1(1)\"},{\"Tag\":\"li\",\"content\":\"00 00 00 - \\u8868\\u660E\\u8BB0\\u5F55\\u788E\\u7247\\u7684\\u504F\\u79FB\\u91CF\\u4E3A 0x00(0) \\u5B57\\u8282\"},{\"Tag\":\"li\",\"content\":\"00 00 20 - \\u8868\\u660E\\u4E4B\\u540E\\u7684\\u8BB0\\u5F55\\u788E\\u7247\\u7684\\u957F\\u5EA6\\u4E3A 0x20(32) \\u5B57\\u8282\"}]},\"\\u5728\\u672C\\u6587\\u4F8B\\u5B50\\u4E2D\\uFF0C\\u6574\\u4E2A\\u63E1\\u624B\\u8BB0\\u5F55\\u7684\\u957F\\u5EA6\\u8981\\u77ED\\u4E8E\\u4E00\\u4E2A UDP \\u6570\\u636E\\u62A5\\u7684\\u53EF\\u627F\\u8F7D\\u957F\\u5EA6\\uFF0C\\u56E0\\u6B64\\u504F\\u79FB\\u91CF\\u4E3A\\u96F6\\uFF0C\\u4E14\\u957F\\u5EA6\\u4E3A\\u6574\\u4E2A\\u63E1\\u624B\\u8BB0\\u5F55\\u957F\\u3002\"]],[\"\\u9A8C\\u8BC1\\u6570\\u636E\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"6f 28 01 39 6b 0e 90 eb b4 a3 ba 38 4a bc fc 6b 24 20 1a bd 81 b3 16 b2 39 1d a3 78 37 7f ac f5\"},[\"\\u4F7F\\u7528 \\\\\"\\u5BA2\\u6237\\u7AEF\\u751F\\u6210\\u63E1\\u624B\\u5BC6\\u94A5\\\\\" \\u6B65\\u9AA4\\u4E2D\\u7684\\u5BA2\\u6237\\u7AEF\\u5BC6\\u6587\\u548C\\u5728\\u8FD9\\u4E4B\\u524D\\u7684\\u6BCF\\u4E2A\\u63E1\\u624B\\u8BB0\\u5F55(ClientHello \\u5230 \\u670D\\u52A1\\u5668\\u7AEF\\u63E1\\u624B\\u7ED3\\u675F)\\u7684 SHA256 \\u54C8\\u5E0C\\u503C\\u751F\\u6210\\u3002\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"finished_key = HKDF-Expand-Label(key: client_secret, label: \\\\\"finished\\\\\", ctx: \\\\\"\\\\\", len: 32)\\\\nfinished_hash = SHA256(Client Hello ... Server Handshake Finished)\\\\nverify_data = HMAC-SHA256(key: finished_key, msg: finished_hash)\"}]},{\"children\":[\"\\u5728\\u547D\\u4EE4\\u884C\\u4E2D\\u4F7F\\u7528\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://dtls.xargs.org/files/hkdf-dtls.sh\"},\"content\":\"\\u539F\\u4F5C\\u8005\\u5236\\u4F5C\\u7684 HKDF \\u547D\\u4EE4\\u884C\\u811A\\u672C\"},\"\\uFF0C\\u4F60\\u4E5F\\u53EF\\u4EE5\\u81EA\\u5DF1\\u8BD5\\u8BD5\\uFF1A\"]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### find the hash of the conversation to this point, excluding\\\\n### cleartext record headers, DTLS-only record headers,\\\\n### or 1-byte decrypted record trailers\\\\n$ fin_hash=$((\\\\n    cat record-chello  | perl -0777 -pe \\'s/.{13}(.{4}).{8}/$1/s\\';\\\\n    cat record-shello  | perl -0777 -pe \\'s/.{13}(.{4}).{8}/$1/s\\';\\\\n    cat record-encext  | perl -0777 -pe \\'s/(.{4}).{8}(.*).$/$1$2/s\\';\\\\n    cat record-cert    | perl -0777 -pe \\'s/(.{4}).{8}(.*).$/$1$2/s\\';\\\\n    cat record-cverify | perl -0777 -pe \\'s/(.{4}).{8}(.*).$/$1$2/s\\';\\\\n    cat record-sfin    | perl -0777 -pe \\'s/(.{4}).{8}(.*).$/$1$2/s\\';\\\\n  ) | openssl sha256)\\\\n$ cht_secret=33e472fb8d821b0193314626bebee307ccbd1aeb3d3a17ba468888ffc5246da1\\\\n$ fin_key=$(./hkdf-dtls expandlabel $cht_secret \\\\\"finished\\\\\" \\\\\"\\\\\" 32)\\\\n$ echo $fin_hash | xxd -r -p     | openssl dgst -sha256 -mac HMAC -macopt hexkey:$fin_key\\\\n\\\\n6f2801396b0e90ebb4a3ba384abcfc6b24201abd81b316b2391da378377facf5\"}}]],[\"\\u8BB0\\u5F55\\u7C7B\\u578B\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"16\"},[\"\\u6BCF\\u4E00\\u4E2A\\u52A0\\u5BC6\\u7684 DTLS 1.3 \\u8BB0\\u5F55\\u7684\\u6700\\u540E\\u4E00\\u4E2A\\u5B57\\u8282\\u90FD\\u9700\\u8981\\u8868\\u660E\\u5176\\u771F\\u6B63\\u7684\\u8BB0\\u5F55\\u7C7B\\u578B\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"16 - \\u7C7B\\u578B\\u4E3A 0x16(22), \\u63E1\\u624B\\u8BB0\\u5F55\"}]}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=clientHandshakeFinishedDatagram.955c7891.js.map\n","[\n  \"为了验证握手成功且没有被篡改过，客户端和服务器端一样，需要创建一些验证数据给服务器端确认。验证数据是基于所有握手信息的哈希值计算得到。\",\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"头部信息字节\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"2e\"\n          },\n          [\n            \"加密的 DTLS 数据包都以一个 \\\"统一的头部(unified header)\\\"开始。头部的第一个字节给出了头部和数据包的结构信息，以及解密时需要的信息。\",\n            \"值 0x2e 具有以下含义：\",\n            {\n              \"Tag\": \"Table\",\n              \"props\": {\n                \"headers\": [\"\", \"值\", \"含义\"],\n                \"data\": [\n                  [\"高位\", \"001\", \"固定位\"],\n                  [\"\", \"0\", \"头部中不存在连接 ID 字段(1则存在)\"],\n                  [\"\", \"1\", \"序列号在头部中占 2 字节长\"],\n                  [\"\", \"1\", \"头部中存在\\\"记录长度\\\"字段(0则不存在)\"],\n                  [\n                    \"低位\",\n                    \"10\",\n                    \"加密序列指示(Encryption epoch 2)，现在密钥是握手时密钥\"\n                  ]\n                ]\n              }\n            }\n          ]\n        ],\n        [\n          \"记录序号\",\n          {\n            \"props\": {\n              \"className\": \"bytes protected\",\n              \"title\": \"被加密\"\n            },\n            \"content\": \"c2 48\"\n          },\n          {\n            \"props\": {\n              \"className\": \"bytes unprotected\"\n            },\n            \"content\": \"00 00\"\n          },\n          [\n            \"记录序号是被加密了的，用以防止中间件误解(interpreting)或干扰数据包的排序。\",\n            \"加密是通过用 \\\"客户端序号保护密钥\\\" 对每个数据包的有效载荷样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行 XOR 得到。\",\n            \"如果说的不够详细，这里有一个如何加密的例子：\",\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### \\\"client record number key\\\" from handshake keys calc step above\\n$ key=beed6218676635c2cb46a45694144fec\\n### sample is taken from 16 bytes of payload starting 5 bytes into the record\\n$ sample=8a2cd52d5000f8786afb47cdf0b8f2b8\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p\\n\\nc248\\n\\n### the above bytes are xor'd one-for-one into the bytes of the record number\"\n              }\n            }\n          ]\n        ],\n        [\n          \"记录长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 3d\"\n          },\n          [\n            \"每个记录除非给出这个长度字段，否则对等端将认为数据报剩余的所有字节都是同一个记录的真实载荷。有了这一字段，则在一个数据报中可以发送好几个 TLS 记录(尽管例子中的连接没有利用这个优势)。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 3d - 表示 TLS 记录长度为 0x3d(61) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"加密的数据载荷\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\",\n              \"title\": \"被\\\"握手密钥\\\"加密\"\n            },\n            \"content\": \"8a 2c d5 2d 50 00 f8 78 6a fb 47 cd f0 b8 f2 b8 13 42 b0 0c 43 dc e6 4b 1d 01 94 d2 e2 01 f6 81 75 09 78 52 8b be 26 af 79 61 24 01 c0\"\n          },\n          [\"这些数据使用服务器端的\\\"握手密钥\\\"进行加密。\"]\n        ],\n        [\n          \"AEAD 鉴别标签\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"07 a2 c5 f7 5f 7c ff b7 46 5b c0 1d 23 d8 51 1f\"\n          },\n          [\n            {\n              \"children\": [\n                \"这是 \",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://zhuanlan.zhihu.com/p/28566058\"\n                  },\n                  \"content\": \"AEAD 算法\"\n                },\n                \"的鉴别标签，确认加密数据和记录头的完整性。它由加密算法产生，并由解密算法消耗。\"\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"data\": [\n        [\n          \"\",\n          {\n            \"props\": {\n              \"className\": \"decryption-header\"\n            },\n            \"content\": \"解密后的数据载荷\"\n          },\n          [\n            { \"Tag\": \"h4\", \"content\": \"解密\" },\n            \"数据被 \\\"客户端握手密钥计算\\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。\",\n            \"数据包开头的 5 字节(记录头)还会作为解密过程解密成功时必须满足的认证条件。\",\n            {\n              \"children\": [\n                \"openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://dtls.xargs.org/files/aes_128_gcm_decrypt.c\"\n                  },\n                  \"content\": \"解密\"\n                },\n                \"和\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://dtls.xargs.org/files/aes_128_gcm_encrypt.c\"\n                  },\n                  \"content\": \"加密\"\n                },\n                \"这些数据。\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### from the \\\"Client Handshake Keys Calc\\\" step\\n$ key=6caa2633d5e48f10051e69dc45549c97\\n$ iv=106dc6e393b7a9ea8ef29dd7\\n### from this record\\n$ recdata=2e0000003d\\n$ authtag=07a2c5f75f7cffb7465bc01d23d8511f\\n$ recordnum=0\\n### may need to add -I and -L flags for include and lib dirs\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\n\\n00000000  14 00 00 20 00 01 00 00  00 00 00 20 6f 28 01 39\\n00000010  6b 0e 90 eb b4 a3 ba 38  4a bc fc 6b 24 20 1a bd\\n00000020  81 b3 16 b2 39 1d a3 78  37 7f ac f5 16\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"握手消息头\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"14 00 00 20\"\n          },\n          [\n            \"每个握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"14 - 握手消息类型 0x14 (finished)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 20 - 紧接着的握手消息数据的长度 0x20 (32) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"用于重建握手顺序的信息(Handshake Reconstruction Data)\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"00 01 00 00 00 00 00 20\"\n          },\n          [\n            \"因为 UDP (或其他数据报协议)不保证交付或排序，而且数据报的长度可能比需要发送的握手记录长度要小。因此 DTLS 必须提供一定的信息，以支持在数据丢失、包重排序或有记录碎片的情况下，使得对等端(peer)能够重新构建一条正确的 DTLS 记录。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 01 - DTLS 序列号 0x1(1)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 00 - 表明记录碎片的偏移量为 0x00(0) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 20 - 表明之后的记录碎片的长度为 0x20(32) 字节\"\n                }\n              ]\n            },\n            \"在本文例子中，整个握手记录的长度要短于一个 UDP 数据报的可承载长度，因此偏移量为零，且长度为整个握手记录长。\"\n          ]\n        ],\n        [\n          \"验证数据\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"6f 28 01 39 6b 0e 90 eb b4 a3 ba 38 4a bc fc 6b 24 20 1a bd 81 b3 16 b2 39 1d a3 78 37 7f ac f5\"\n          },\n          [\n            \"使用 \\\"客户端生成握手密钥\\\" 步骤中的客户端密文和在这之前的每个握手记录(ClientHello 到 服务器端握手结束)的 SHA256 哈希值生成。\",\n            {\n              \"Tag\": \"pre\",\n              \"children\": [\n                {\n                  \"Tag\": \"code\",\n                  \"props\": { \"className\": \"longboi\" },\n                  \"content\": \"finished_key = HKDF-Expand-Label(key: client_secret, label: \\\"finished\\\", ctx: \\\"\\\", len: 32)\\nfinished_hash = SHA256(Client Hello ... Server Handshake Finished)\\nverify_data = HMAC-SHA256(key: finished_key, msg: finished_hash)\"\n                }\n              ]\n            },\n            {\n              \"children\": [\n                \"在命令行中使用\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://dtls.xargs.org/files/hkdf-dtls.sh\"\n                  },\n                  \"content\": \"原作者制作的 HKDF 命令行脚本\"\n                },\n                \"，你也可以自己试试：\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### find the hash of the conversation to this point, excluding\\n### cleartext record headers, DTLS-only record headers,\\n### or 1-byte decrypted record trailers\\n$ fin_hash=$((\\n    cat record-chello  | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';\\n    cat record-shello  | perl -0777 -pe 's/.{13}(.{4}).{8}/$1/s';\\n    cat record-encext  | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';\\n    cat record-cert    | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';\\n    cat record-cverify | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';\\n    cat record-sfin    | perl -0777 -pe 's/(.{4}).{8}(.*).$/$1$2/s';\\n  ) | openssl sha256)\\n$ cht_secret=33e472fb8d821b0193314626bebee307ccbd1aeb3d3a17ba468888ffc5246da1\\n$ fin_key=$(./hkdf-dtls expandlabel $cht_secret \\\"finished\\\" \\\"\\\" 32)\\n$ echo $fin_hash | xxd -r -p     | openssl dgst -sha256 -mac HMAC -macopt hexkey:$fin_key\\n\\n6f2801396b0e90ebb4a3ba384abcfc6b24201abd81b316b2391da378377facf5\"\n              }\n            }\n          ]\n        ],\n        [\n          \"记录类型\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"16\"\n          },\n          [\n            \"每一个加密的 DTLS 1.3 记录的最后一个字节都需要表明其真正的记录类型\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 类型为 0x16(22), 握手记录\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","JSON","parse"],"version":3,"file":"clientHandshakeFinishedDatagram.955c7891.js.map"}