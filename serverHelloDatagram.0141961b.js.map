{"mappings":"mMAAAA,EAAAC,QAAiBC,KAAKC,MAAM,8wH","sources":["src/DTLS/serverHelloDatagram.json"],"sourcesContent":["[\n  \"服务器回复 \\\"ServerHello\\\"。服务器提供的信息包括以下内容：\",\n  {\n    \"Tag\": \"ul\",\n    \"children\": [\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端随机数(在随后的握手时使用)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端选则的加解密算法\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"用于密钥交换的公钥\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器协商的具体协议的版本\"\n      }\n    ]\n  },\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"DTLS 记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 fe fd 00 00 00 00 00 00 00 00 00 62\"\n          },\n          [\n            \"每个 DTLS 记录都以一个 type、一些序列信息(seq info)和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"fe fd - 协议版本 (DTLS 1.2, 细节见下文)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 - 密钥序列指示(key epoch，每次密钥更新时都会递增)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 00 00 00 00 - DTLS 序列号 0x0(0)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 62 - 紧接着的数组载荷长度 0x62(98) 字节\"\n                }\n              ]\n            },\n            \"DTLS 版本的编码方式是将协议版本分成几个部分，然后取每个部分的补码。(因此 \\\"1.3\\\" 变成 {1, 3}，变成字节 0xFE 0xFC)。这种补码技术使 DTLS 版本与 TLS 版本有所差别。\",\n            \"由于已经创建和部署的网络中间件(middleboxes)不允许它们所不承认的协议版本通过，因此所有 DTLS 1.3 会话在未加密的记录中都会显示为 DTLS 1.2(0xFE 0xFD)。\"\n          ]\n        ],\n        [\n          \"TLS 握手记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"02 00 00 56\"\n          },\n          [\n            \"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"02 - 握手消息类型 0x02 (ServerHello)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 56 - 紧接着的握手消息数据的长度 0x56 (86) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"用于重建握手顺序的信息(Handshake Reconstruction Data)\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 00 00 00 00 00 00 56\"\n          },\n          [\n            \"因为 UDP (或其他数据报协议)不保证交付或排序，而且数据报的长度可能比需要发送的握手记录长度要小。因此 DTLS 必须提供一定的信息，以支持在数据丢失、包重排序或有记录碎片的情况下，使得对等端(peer)能够重新构建一条正确的数据记录。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 - DTLS 序列号 0x0(0)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 00 - 表明记录碎片的偏移量为 0x00(0) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 56 - 表明之后的记录碎片的长度为 0x56(86) 字节\"\n                }\n              ]\n            },\n            \"在本文例子中，整个握手记录记录的长度要短于一个 UDP 数据报的可承载长度，因此偏移量为零，且长度为整个握手记录长。\"\n          ]\n        ],\n        [\n          \"服务器端版本(废弃)\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"fe fd\"\n          },\n          [\n            \"DTLS 版本的编码方式是将协议版本分成几个部分，然后取每个部分的补码。(因此 \\\"1.3\\\" 变成 {1, 3}，变成字节 0xFE 0xFC)。这种补码技术使 DTLS 版本与 TLS 版本有所差别。\",\n            \"由于已经创建和部署的网络中间件(middleboxes)不允许它们所不承认的协议版本通过，因此所有 DTLS 1.3 会话在未加密的记录中都会显示为 DTLS 1.2(0xFE 0xFD)。所有的 DTLS 1.3 及以上版本的会话需要通过后面提到的\\\"支持的版本\\\"拓展协商真实版本号。\"\n          ]\n        ],\n        [\n          \"服务器端随机数\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\"\n          },\n          [\n            \"服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。\"\n          ]\n        ],\n        [\n          \"会话 ID (废弃)\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\n            \"这是一个废弃(legacy)字段，不在 DTLS 1.3 中使用。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - 0 字节的会话 ID\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"所选择的加解密算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"13 01\"\n          },\n          [\n            \"服务器从客户端给出的选项列表中选择的加解密算法 0x1301(TLS_AES_128_GCM_SHA256)。\"\n          ]\n        ],\n        [\n          \"压缩算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\"服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。\"]\n        ],\n        [\n          \"扩展的长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 2e\"\n          },\n          [\n            \"服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复 ClientHello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 2e - 扩展列表的长度为 0x2E(46) 字节\"\n                }\n              ]\n            },\n            \"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。\"\n          ]\n        ],\n        [\n          \"扩展 - 算法公钥列表\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 33 00 24 00 1d 00 20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15\"\n          },\n          [\n            \"服务器使用和客户端发送公钥时相同的算法发送一个自己的公钥。一旦这个被发送，加密密钥就可以被计算出来。其余的握手则将被加密。而不用像以前的协议版本，以透明的方式发送握手记录。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 33 - 表示这是 \\\"算法公钥列表\\\" 扩展\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 24 - 算法公钥列表长度为 0x24(36) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 20 - 公钥长度为 0x20(32) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"9f d7 ... b6 15 - \\\"服务器端准备密钥交换\\\" 步骤中生成的公钥\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"扩展 - 支持的版本\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 2b 00 02 fe fc\"\n          },\n          [\n            \"客户端表明其支持 DTLS 1.3。由于兼容性的原因，这被放在一个扩展中，而不是上面的客户端版本字段。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 2b - 表示这是 \\\"支持的版本\\\" 扩展\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 02 - 扩展信息长度为 0x02(2) 字节 \"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"fe fc - 代表 DTLS 1.3\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["module","exports","JSON","parse"],"version":3,"file":"serverHelloDatagram.0141961b.js.map"}