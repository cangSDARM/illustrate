[
  "为了验证握手成功且没有被篡改过，服务器会创建一些验证数据给客户端确认。验证数据是所有握手信息的哈希值。",
  {
    "Tag": "AnnotationToggler"
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "TLS 握手消息头",
          {
            "props": {
              "className": "bytes"
            },
            "content": "14 00 00 20"
          },
          [
            "每个 TLS 握手消息都以一个 type 和一个 len 开始。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "14 - 握手消息类型 0x14 (finished)"
                },
                {
                  "Tag": "li",
                  "content": "00 00 20 - 紧接着的握手消息数据的长度 0x20 (32) 字节"
                }
              ]
            }
          ]
        ],
        [
          "验证数据",
          {
            "props": {
              "className": "bytes"
            },
            "content": "06 8f cb 60 6a a1 c8 aa 35 4d 7b 60 64 a3 32 8c f3 76 bc d9 f3 20 0e 68 ac e3 de 2e e9 fc ac cb"
          },
          [
            "使用 \"服务器端生成握手密钥\" 步骤中的服务器握手时密钥和在这之前的每个握手记录(ClientHello 到 证书验证数据)的 SHA256 哈希值生成。",
            {
              "Tag": "pre",
              "children": [
                {
                  "Tag": "code",
                  "props": { "className": "longboi" },
                  "content": "finished_key = HKDF-Expand-Label(key: server_secret, label: \"finished\", ctx: \"\", len: 32)\nfinished_hash = SHA256(ClientHello ... CertificateVerify)\nverify_data = HMAC-SHA256(key: finished_key, msg: finished_hash)"
                }
              ]
            },
            {
              "children": [
                "在命令行中使用",
                {
                  "Tag": "a",
                  "props": { "href": "https://quic.xargs.org/files/hkdf.sh" },
                  "content": "原作者制作的 HKDF 命令行脚本"
                },
                "，你也可以自己试试："
              ]
            },
            {
              "Tag": "CodeSample",
              "props": {
                "code": "### find the hash of the conversation to this point, excluding\n### QUIC frame headers\n$ fin_hash=$(cat crypto_clienthello crypto_serverhello   crypto_extensions crypto_cert crypto_certverify | openssl sha256)\n$ sht_secret=88ad8d3b0986a71965a28d108b0f40ffffe629284a6028c80ddc5dc083b3f5d1\n$ fin_key=$(./hkdf expandlabel $sht_secret \"finished\" \"\" 32)\n$ echo $fin_hash | xxd -r -p     | openssl dgst -sha256 -mac HMAC -macopt hexkey:$fin_key\n\n068fcb606aa1c8aa354d7b6064a3328cf376bcd9f3200e68ace3de2ee9fcaccb"
              }
            }
          ]
        ]
      ]
    }
  }
]
