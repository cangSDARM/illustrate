[
  "会话开始时，客户端发送一个初始数据包。这个数据包包含 \"ClientHello\" TLS 记录，用于开始 TLS 1.3 加密会话。",
  {
    "Tag": "AnnotationToggler"
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "数据包头字节",
          {
            "props": {
              "className": "bytes protected",
              "title": "被数据包头保护密钥加密"
            },
            "content": "cd"
          },
          {
            "props": {
              "className": "bytes unprotected"
            },
            "content": "c0"
          },
          [
            "数据包以一个头字节开始，该字节应用了头保护。头部保护用于隐藏数据包序号和其他信息，使其不被外界观察到。",
            "包头保护是通过用\"数据包头保护密钥\"对每个数据包的有效载荷的样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行异或(XOR)操作得到的。对于像这样的\"长\"格式数据包，受保护的部分是这个字节的低 4 位，以及数据包序号的字节（见下文）。",
            "这里有一个关于如何计算出加密头字节的例子：",
            {
              "Tag": "CodeSample",
              "props": {
                "code": "### \"client header protection key\" from calc step above\n$ key=6df4e9d737cdf714711d7c617ee82981\n### sample is taken from 16 bytes of payload starting\n### 4 bytes past the first byte of the packet number\n$ sample=ed78716be9711ba498b7ed868443bb2e\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p\n\ned9895bb15\n\n### first byte of result is xor'd into lower 4 bits of this byte,\n### remaining bytes are xor'd one-for-one into the bytes of\n### the packet number (which in this packet is only one byte)"
              }
            },
            "解密出的字节 0xC0 中的位有以下含义：",
            {
              "Tag": "Table",
              "props": {
                "headers": ["", "值", "含义"],
                "data": [
                  ["高位", "1", "Long Header 格式"],
                  ["", "1", "固定位(总是被置1)"],
                  ["", "00", "数据包类型：初始化"],
                  ["", "00", "保留(总是被置0)"],
                  [
                    "低位",
                    "00",
                    "数据包序号长度(表示下面的 \"数据包序号\" 将有一个字节的长度，默认值)"
                  ]
                ]
              }
            }
          ]
        ],
        [
          "QUIC 版本号",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 00 00 01"
          },
          ["QUIC的版本是：0x1"]
        ],
        [
          "目的地连接标识 ID",
          {
            "props": {
              "className": "bytes"
            },
            "content": "08 00 01 02 03 04 05 06 07"
          },
          [
            "客户端还没有收到服务器选择的连接 ID。因此这个字段仅来提供用于推导初始加密密钥的 8 个字节的随机数据，如上文 \"客户端生成初始密钥\" 所解释。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "08 - 紧跟着的目的地连接标识 ID 的长度(8bytes)"
                },
                {
                  "Tag": "li",
                  "content": "00 01 ... 06 07 - 随机数据"
                }
              ]
            }
          ]
        ],
        [
          "源连接标识 ID",
          {
            "props": {
              "className": "bytes"
            },
            "content": "05 63 5f 63 69 64"
          },
          [
            "客户端使用这个字段来表明它选择的传输给服务器的源连接标识 ID。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "05 - 紧跟着的源连接标识 ID 的长度(5bytes)"
                },
                {
                  "Tag": "li",
                  "content": "63 5f 63 69 64 - 实际的源连接标识 ID (\"c_cid\")"
                }
              ]
            }
          ]
        ],
        [
          "令牌",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00"
          },
          [
            "客户端在某些情况下可以使用这个字段来提供服务器所要求的令牌，例如证明其连接尝试不是欺骗。此时，没有令牌需要提供，该字段为空。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 - 紧跟着的令牌长度(0bytes)"
                }
              ]
            }
          ]
        ],
        [
          "数据包长度",
          {
            "props": {
              "className": "bytes"
            },
            "content": "41 03"
          },
          [
            "客户端表示数据包中有多少字节的加密有效载荷。这个字段是一个长度可变的整数——第一个字节的前两位表示该整数中总共有多少个字节。",
            "此时，第一个字节以 \"0 1\"(0x4)这两个位开始，表示该整数共两个字节。其余的位给出数字 0x103，表示 259 个字节的有效载荷。"
          ]
        ],
        [
          "数据包序号",
          {
            "props": {
              "className": "bytes protected",
              "title": "被数据包头保护密钥加密"
            },
            "content": "98"
          },
          {
            "props": {
              "className": "bytes unprotected"
            },
            "content": "00"
          },
          [
            "该字节应用了头保护。详见 \"数据包头字节\"。",
            "这个字节的未受保护的值为 0x00，表明它是第 0 号包，或者说是客户端发送的第一个\"初始\"包。",
            "这个数据也有可能被截断。发送端点通过几个步骤截断：①计算已发送的最高的序号和未确认的最低的序号之间的差值；②出于安全考虑将差值加倍并四舍五入；③计算它在明确表示两端之间的序号的前提下可以从序号的高位删除的字节数；④截断编码后的数据包序号直至长度满足该字节数。而接收端点根据会它最近看到的数据包号码填入完整的序号。",
            {
              "children": [
                "由于我们的例子对话发送的数据包很小(少于 64 个字节)，所以这种截断不会在本文中出现。详情见 ",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1"
                  },
                  "content": "RFC 9000"
                },
                "。"
              ]
            }
          ]
        ],
        [
          "加密的数据载荷",
          {
            "props": {
              "className": "bytes encrypted",
              "title": "被\"初始密钥\"加密"
            },
            "content": "1c 36 a7 ed 78 71 6b e9 71 1b a4 98 b7 ed 86 84 43 bb 2e 0c 51 4d 4d 84 8e ad cc 7a 00 d2 5c e9 f9 af a4 83 97 80 88 de 83 6b e6 8c 0b 32 a2 45 95 d7 81 3e a5 41 4a 91 99 32 9a 6d 9f 7f 76 0d d8 bb 24 9b f3 f5 3d 9a 77 fb b7 b3 95 b8 d6 6d 78 79 a5 1f e5 9e f9 60 1f 79 99 8e b3 56 8e 1f dc 78 9f 64 0a ca b3 85 8a 82 ef 29 30 fa 5c e1 4b 5b 9e a0 bd b2 9f 45 72 da 85 aa 3d ef 39 b7 ef af ff a0 74 b9 26 70 70 d5 0b 5d 07 84 2e 49 bb a3 bc 78 7f f2 95 d6 ae 3b 51 43 05 f1 02 af e5 a0 47 b3 fb 4c 99 eb 92 a2 74 d2 44 d6 04 92 c0 e2 e6 e2 12 ce f0 f9 e3 f6 2e fd 09 55 e7 1c 76 8a a6 bb 3c d8 0b bb 37 55 c8 b7 eb ee 32 71 2f 40 f2 24 51 19 48 70 21 b4 b8 4e 15 65 e3 ca 31 96 7a c8 60 4d 40 32 17 0d ec 28 0a ee fa 09 5d 08"
          },
          ["这些数据使用客户端的\"初始密钥\"进行加密。"]
        ],
        [
          "AEAD 鉴别标签",
          {
            "props": {
              "className": "bytes"
            },
            "content": "b3 b7 24 1e f6 64 6a 6c 86 e5 c6 2c e0 8b e0 99"
          },
          [
            {
              "children": [
                "这是 ",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://zhuanlan.zhihu.com/p/28566058"
                  },
                  "content": "AEAD 算法"
                },
                "的鉴别标签，确认加密数据和数据包头的完整性。它由加密算法产生，并由解密算法消耗。"
              ]
            }
          ]
        ]
      ]
    }
  },
  {
    "Tag": "Annotations",
    "props": {
      "data": [
        [
          "",
          {
            "props": {
              "className": "decryption-header"
            },
            "content": "解密后的数据载荷"
          },
          [
            { "Tag": "h4", "content": "解密" },
            "数据被 \"客户端初始密钥计算\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。",
            "数据包开头的 24 字节还会作为解密过程解密成功时必须满足的认证条件。",
            {
              "children": [
                "openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://quic.xargs.org/files/aes_128_gcm_decrypt.c"
                  },
                  "content": "解密"
                },
                "和",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://quic.xargs.org/files/aes_128_gcm_encrypt.c"
                  },
                  "content": "加密"
                },
                "这些数据。"
              ]
            },
            {
              "Tag": "CodeSample",
              "props": {
                "code": "### from the \"Initial Keys Calc\" step\n$ key=b14b918124fda5c8d79847602fa3520b\n$ iv=ddbc15dea80925a55686a7df\n### from this record\n$ recdata=c00000000108000102030405060705635f63696400410300\n$ authtag=b3b7241ef6646a6c86e5c62ce08be099\n$ recordnum=0\n### may need to add -I and -L flags for include and lib dirs\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\n\n00000000  06 00 40 ee 01 00 00 ea  03 03 00 01 02 03 04 05  |..@.............|\n00000010  06 07 08 09 0a 0b 0c 0d  0e 0f 10 11 12 13 14 15  |................|\n... snip ..."
              }
            }
          ]
        ]
      ]
    }
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "加密帧帧头",
          {
            "props": {
              "className": "bytes encrypted"
            },
            "content": "06 00 40 ee"
          },
          [
            {
              "children": [
                "每个 QUIC 数据包在其有效载荷中包含",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://zhuanlan.zhihu.com/p/438579683"
                  },
                  "content": "一个或多个帧的列表"
                },
                "。例子中的数据包只包含一个帧，即 加密帧。"
              ]
            },
            "加密帧帧头的目的是加密字节流，用于建立安全的 TLS 连接(TLS 1.3 握手)。"
          ]
        ],
        [
          "ClientHello TLS 记录",
          {
            "props": {
              "className": "bytes encrypted"
            },
            "content": "01 00 00 ea 03 03 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 00 00 06 13 01 13 02 13 03 01 00 00 bb 00 00 00 18 00 16 00 00 13 65 78 61 6d 70 6c 65 2e 75 6c 66 68 65 69 6d 2e 6e 65 74 00 0a 00 08 00 06 00 1d 00 17 00 18 00 10 00 0b 00 09 08 70 69 6e 67 2f 31 2e 30 00 0d 00 14 00 12 04 03 08 04 04 01 05 03 08 05 05 01 08 06 06 01 02 01 00 33 00 26 00 24 00 1d 00 20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62 54 00 2d 00 02 01 01 00 2b 00 03 02 03 04 00 39 00 31 03 04 80 00 ff f7 04 04 80 a0 00 00 05 04 80 10 00 00 06 04 80 10 00 00 07 04 80 10 00 00 08 01 0a 09 01 0a 0a 01 03 0b 01 19 0f 05 63 5f 63 69 64"
          },
          ["这一记录将在后面详细说明。"]
        ]
      ]
    }
  }
]
