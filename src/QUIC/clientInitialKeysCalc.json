[
  "接下来，客户端继续为连接做准备：生成初始数据包(packet)的加密密钥。由于客户端和服务器之间还没有进行任何数据传输，因此这些密钥的安全性有限——任何观察者都可以得出密钥，并像服务器一样读取流量。加密初始数据包可以防止某些类型的攻击，如请求伪造攻击。",
  "客户端生成 8bytes 的随机数据，在本文中，假设是如下内容：",
  {
    "Tag": "pre",
    "props": {
      "className": "ind2"
    },
    "children": [
      {
        "Tag": "code",
        "props": { "className": "longboi" },
        "content": "0001020304050607"
      }
    ]
  },
  "然后，客户端使用以下过程得出加密密钥：",
  {
    "Tag": "CodeSample",
    "props": {
      "code": "initial_salt = 38762cf7f55934b34d179ae6a4c80cadccbb7f0a\ninitial_random = (random bytes from client given above)\ninitial_secret = HKDF-Extract(salt: initial_salt, key: initial_random)\nclient_secret = HKDF-Expand-Label(key: initial_secret, label: \"client in\", ctx: \"\", len: 32)\nserver_secret = HKDF-Expand-Label(key: initial_secret, label: \"server in\", ctx: \"\", len: 32)\nclient_key = HKDF-Expand-Label(key: client_secret, label: \"quic key\", ctx: \"\", len: 16)\nserver_key = HKDF-Expand-Label(key: server_secret, label: \"quic key\", ctx: \"\", len: 16)\nclient_iv = HKDF-Expand-Label(key: client_secret, label: \"quic iv\", ctx: \"\", len: 12)\nserver_iv = HKDF-Expand-Label(key: server_secret, label: \"quic iv\", ctx: \"\", len: 12)\nclient_hp_key = HKDF-Expand-Label(key: client_secret, label: \"quic hp\", ctx: \"\", len: 16)\nserver_hp_key = HKDF-Expand-Label(key: server_secret, label: \"quic hp\", ctx: \"\", len: 16)"
    }
  },
  {
    "children": [
      "一个有趣的点，选则常数",
      {
        "Tag": "code",
        "content": "38762cf7f55934b34d179ae6a4c80cadccbb7f0a"
      },
      "作为盐，并不是它可以从数学或密码学原理推导得出，而是因为它是由谷歌研究人员发现的第一个 SHA-1 碰撞的哈希值(QUIC 本身最初是由谷歌创建、赞助和部署的)。"
    ]
  },
  "QUIC 还从 TLS 1.3 中引入了两个新的加密概念：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "children": [
          {
            "Tag": "a",
            "props": {
              "href": "https://hxndg.github.io/2020/08/27/HKDF-Extract%E4%B8%8EHKDF-Expand/"
            },
            "content": "HKDF-Extract"
          },
          " - 给定一个盐值和一些字节的密钥材料，派生出一个 32bytes(256bits) 固定长度的新密钥材料，输入的密钥材料的熵均匀地分布在输出中。"
        ]
      },
      {
        "Tag": "li",
        "children": [
          {
            "Tag": "a",
            "props": {
              "href": "https://hxndg.github.io/2020/08/27/HKDF-Extract%E4%B8%8EHKDF-Expand/"
            },
            "content": "HKDF-Expand-Label"
          },
          " - 给出伪随机密钥、标签和上下文数据的输入，拓展为一个要求长度的密钥。"
        ]
      }
    ]
  },
  {
    "children": [
      "在命令行中使用",
      {
        "Tag": "a",
        "props": { "href": "https://quic.xargs.org/files/hkdf.sh" },
        "content": "原作者制作的 HKDF 命令行脚本"
      },
      "，你也可以自己试试："
    ]
  },
  {
    "Tag": "CodeSample",
    "props": {
      "code": "$ init_salt=38762cf7f55934b34d179ae6a4c80cadccbb7f0a\n$ init_dcid=0001020304050607\n$ init_secret=$(./hkdf extract $init_salt $init_dcid)\n$ csecret=$(./hkdf expandlabel $init_secret \"client in\" \"\" 32)\n$ ssecret=$(./hkdf expandlabel $init_secret \"server in\" \"\" 32)\n$ client_init_key=$(./hkdf expandlabel $csecret \"quic key\" \"\" 16)\n$ server_init_key=$(./hkdf expandlabel $ssecret \"quic key\" \"\" 16)\n$ client_init_iv=$(./hkdf expandlabel $csecret \"quic iv\" \"\" 12)\n$ server_init_iv=$(./hkdf expandlabel $ssecret \"quic iv\" \"\" 12)\n$ client_init_hp=$(./hkdf expandlabel $csecret \"quic hp\" \"\" 16)\n$ server_init_hp=$(./hkdf expandlabel $ssecret \"quic hp\" \"\" 16)\n$ echo ckey: $client_init_key\n$ echo civ: $client_init_iv\n$ echo chp: $client_init_hp\n$ echo skey: $server_init_key\n$ echo siv: $server_init_iv\n$ echo shp: $server_init_hp\n\nckey: b14b918124fda5c8d79847602fa3520b\nciv: ddbc15dea80925a55686a7df\nchp: 6df4e9d737cdf714711d7c617ee82981\nskey: d77fc4056fcfa32bd1302469ee6ebf90\nsiv: fcb748e37ff79860faa07477\nshp: 440b2725e91dc79b370711ef792faa3d"
    }
  },
  "由此我们可以得到以下密钥以及初始向量：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "children": [
          "客户端初始密钥: ",
          {
            "Tag": "code",
            "content": "b14b918124fda5c8d79847602fa3520b"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "客户端初始向量: ",
          {
            "Tag": "code",
            "content": "ddbc15dea80925a55686a7df"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端初始密钥: ",
          {
            "Tag": "code",
            "content": "d77fc4056fcfa32bd1302469ee6ebf90"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端初始向量: ",
          {
            "Tag": "code",
            "content": "fcb748e37ff79860faa07477"
          }
        ]
      }
    ]
  },
  "我们还得到了以下的 \"数据包头保护密钥\"(header protection keys)，后面将解释其作用：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "children": [
          "客户端初始数据包头保护密钥: ",
          {
            "Tag": "code",
            "content": "6df4e9d737cdf714711d7c617ee82981"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端初始数据包头保护密钥: ",
          {
            "Tag": "code",
            "content": "440b2725e91dc79b370711ef792faa3d"
          }
        ]
      }
    ]
  },
  "此时，网络连接仍在准备中，没有任何数据被传输。"
]
