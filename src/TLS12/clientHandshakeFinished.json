[
  "为了验证握手成功且没有被篡改过，客户端需要创建一些验证数据给服务器端确认。验证数据是基于所有握手信息的哈希值计算得到。",
  "此时开始传输的数据都是加密的密文了。",
  {
    "Tag": "AnnotationToggler"
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "记录头",
          {
            "props": {
              "className": "bytes"
            },
            "content": "16 03 03 00 40"
          },
          [
            "TLS 会话被分解成 \"记录\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "14 - 表示 TLS 记录类型 0x16(22, handshake)"
                },
                {
                  "Tag": "li",
                  "content": "03 03 - 协议版本 (3.3, 即 TLS 1.2)"
                },
                {
                  "Tag": "li",
                  "content": "00 40 - 紧接着的数组载荷长度 0x40(64) 字节"
                }
              ]
            }
          ]
        ],
        [
          "加密向量",
          {
            "props": {
              "className": "bytes"
            },
            "content": "40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f"
          },
          [
            "客户端发送一个用于解密这个区块的初始化向量。因为我们的数据是可预测的(we have overridden the rand function)，因此它也是一个可预测的序列。"
          ]
        ],
        [
          "加密的数据载荷",
          {
            "props": {
              "className": "bytes encrypted"
            },
            "content": "22 7b c9 ba 81 ef 30 f2 a8 a7 8f f1 df 50 84 4d 58 04 b7 ee b2 e2 14 c3 2b 68 92 ac a3 db 7b 78 07 7f dd 90 06 7c 51 6b ac b3 ba 90 de df 72 0f"
          },
          [
            "这个数据是用客户端的写时密钥加密的。因为它包含一个消息验证码(MAC)和填充字节，所以它比解密后的数据要大一截。"
          ]
        ]
      ]
    }
  },
  {
    "Tag": "Annotations",
    "props": {
      "data": [
        [
          "",
          {
            "props": {
              "className": "decryption-header"
            },
            "content": "解密后的数据载荷"
          },
          [
            { "Tag": "h4", "content": "解密" },
            "数据被 \"客户端生成会话密钥\" 步骤中产生的写时密钥和该记录开头所携带的初始向量(IVs)加密。",
            {
              "Tag": "CodeSample",
              "props": {
                "code": "### client key\n$ hexkey=f656d037b173ef3e11169f27231a84b6\n### IV for this record\n$ hexiv=404142434445464748494a4b4c4d4e4f\n### encrypted data\n$ echo '22 7b c9 ba 81 ef 30 f2 a8 a7 8f f1 df 50 84 4d'  > /tmp/msg1\n$ echo '58 04 b7 ee b2 e2 14 c3 2b 68 92 ac a3 db 7b 78' >> /tmp/msg1\n$ echo '07 7f dd 90 06 7c 51 6b ac b3 ba 90 de df 72 0f' >> /tmp/msg1\n$ xxd -r -p /tmp/msg1 \\\n  | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\n\n0000000 14 00 00 0c cf 91 96 26 f1 36 0c 53 6a aa d7 3a\n0000010 a5 a0 3d 23 30 56 e4 ac 6e ba 7f d9 e5 31 7f ac\n0000020 2d b5 b7 0e 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b\n\nThe last 32 bytes contain a 20-byte MAC and padding to bring the data to a\nmultiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\n\n### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\n$ sequence='0000000000000000'\n$ rechdr='16 03 03'\n$ datalen='00 10'\n$ data='14 00 00 0c cf 91 96 26 f1 36 0c 53 6a aa d7 3a'\n### from \"Encryption Keys Calculation\"\n$ mackey=1b7d117c7d5f690bc263cae8ef60af0f1878acc2\n$ echo $sequence $rechdr $datalen $data | xxd -r -p \\\n  | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\n\na5a03d233056e4ac6eba7fd9e5317fac2db5b70e"
              }
            }
          ]
        ]
      ]
    }
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "握手消息头",
          {
            "props": {
              "className": "bytes encrypted"
            },
            "content": "14 00 00 0c"
          },
          [
            "每个握手消息都以一个 type 和一个 len 开始。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "14 - 握手消息类型 0x14 (finished)"
                },
                {
                  "Tag": "li",
                  "content": "00 00 0c - 紧接着的握手消息数据的长度 0x0C (12) 字节"
                }
              ]
            }
          ]
        ],
        [
          "验证数据",
          {
            "props": {
              "className": "bytes encrypted"
            },
            "content": "cf 91 96 26 f1 36 0c 53 6a aa d7 3a"
          },
          [
            "使用 \"客户端生成会话密钥\" 步骤中的主密钥和在这之前的每个握手记录(type=0x16)的 SHA256 哈希值生成。",
            "这个哈希值应该是：",
            {
              "Tag": "pre",
              "children": [
                {
                  "Tag": "code",
                  "props": { "className": "longboi" },
                  "content": "061dda04b3c2217ff73bd79b9cf88a2bb6ec505404aac8722db03ef417b54cb4"
                }
              ]
            },
            "计算过程及结果：",
            {
              "Tag": "pre",
              "children": [
                {
                  "Tag": "code",
                  "props": { "className": "longboi" },
                  "content": "seed = \"client finished\" + SHA256(all handshake messages)\na0 = seed\na1 = HMAC-SHA256(key=MasterSecret, data=a0)\np1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\nverify_data = p1[first 12 bytes]"
                }
              ]
            },
            {
              "Tag": "CodeSample",
              "props": {
                "code": "### set up our MasterSecret as a hex string\n$ mshex=$(hexdump -ve '/1 \"%02x\"' /tmp/mastersecret)\n### build the seed\n$ echo -en 'client finished' > /tmp/seed\n### add SHA256(all_messages) to seed\n$ echo -en '\\x06\\x1d\\xda\\x04\\xb3\\xc2\\x21\\x7f' >> /tmp/seed\n$ echo -en '\\xf7\\x3b\\xd7\\x9b\\x9c\\xf8\\x8a\\x2b' >> /tmp/seed\n$ echo -en '\\xb6\\xec\\x50\\x54\\x04\\xaa\\xc8\\x72' >> /tmp/seed\n$ echo -en '\\x2d\\xb0\\x3e\\xf4\\x17\\xb5\\x4c\\xb4' >> /tmp/seed\n### a0 is the same as the seed\n$ cat /tmp/seed > /tmp/a0\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\n$ cat /tmp/a0 | openssl dgst -sha256 \\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\n$ head -c 12 /tmp/p1 > /tmp/verify_data\n$ hexdump /tmp/verify_data\n\n0000000 cf 91 96 26 f1 36 0c 53 6a aa d7 3a"
              }
            }
          ]
        ]
      ]
    }
  }
]
