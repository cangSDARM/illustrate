[
  "服务器现在拥有了用于计算握手时的加密密钥的所有信息。在这个计算中，服务器使用了以下信息：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "content": "客户端公钥(提取自 ClientHello)"
      },
      {
        "Tag": "li",
        "content": "服务器端私钥(之前准备密钥交换时生成)"
      },
      {
        "Tag": "li",
        "content": "ClientHello 和 ServerHello 的 SHA256 哈希值"
      }
    ]
  },
  "首先，服务器需要找到共享的密文(shared secret)，即密钥交换步骤的最终值。服务器通过使用 curve25519 算法将客户端的公钥乘以服务器的私钥，即可发现 32 字节的最终值是：",
  {
    "Tag": "pre",
    "props": {
      "className": "ind2"
    },
    "children": [
      {
        "Tag": "code",
        "props": { "className": "longboi" },
        "content": "df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624"
      }
    ]
  },
  {
    "children": [
      "你可以使用",
      {
        "Tag": "a",
        "props": { "href": "https://quic.xargs.org/files/curve25519-mult.c" },
        "content": "原作者的脚本"
      },
      "快速验证结果："
    ]
  },
  {
    "Tag": "CodeSample",
    "props": {
      "code": "$ cc -o curve25519-mult curve25519-mult.c\n$ ./curve25519-mult server-ephemeral-private.key \\\n                    client-ephemeral-public.key | hexdump\n\n0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad\n0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24"
    }
  },
  "然后，服务器计算到此为止的所有握手信息(ClientHello 和 ServerHello)的 SHA256 哈希值(不包括 5 字节的 记录头)。这个 \"hello_hash\" 是",
  {
    "Tag": "pre",
    "props": {
      "className": "ind2"
    },
    "children": [
      {
        "Tag": "code",
        "props": { "className": "longboi" },
        "content": "e05f64fcd082bdb0dce473adf669c2769f257a1c75a51b7887468b5e0e7a7de4f4d34555112077f16e079019d5a845bd"
      }
    ]
  },
  {
    "Tag": "CodeSample",
    "props": {
      "code": "$ (tail -c +6 clienthello; tail -c +6 serverhello) | openssl sha384\ne05f64fcd082bdb0dce473adf669c2769f257a1c75a51b7887468b5e0e7a7de4f4d34555112077f16e079019d5a845bd"
    }
  },
  "然后，我们将哈希值和共享的签名信息进行一些密钥派生操作(key derivation operations)，以防止可能的攻击：",
  {
    "Tag": "pre",
    "children": [
      {
        "Tag": "code",
        "props": { "className": "longboi" },
        "content": "early_secret = HKDF-Extract(salt: 00, key: 00...)\nempty_hash = SHA384(\"\")\nderived_secret = HKDF-Expand-Label(key: early_secret, label: \"derived\", ctx: empty_hash, len: 48)\nhandshake_secret = HKDF-Extract(salt: derived_secret, key: shared_secret)\nclient_secret = HKDF-Expand-Label(key: handshake_secret, label: \"c hs traffic\", ctx: hello_hash, len: 48)\nserver_secret = HKDF-Expand-Label(key: handshake_secret, label: \"s hs traffic\", ctx: hello_hash, len: 48)\nclient_handshake_key = HKDF-Expand-Label(key: client_secret, label: \"key\", ctx: \"\", len: 32)\nserver_handshake_key = HKDF-Expand-Label(key: server_secret, label: \"key\", ctx: \"\", len: 32)\nclient_handshake_iv = HKDF-Expand-Label(key: client_secret, label: \"iv\", ctx: \"\", len: 12)\nserver_handshake_iv = HKDF-Expand-Label(key: server_secret, label: \"iv\", ctx: \"\", len: 12)"
      }
    ]
  },
  "这引出了两个密码学的新概念：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "children": [
          {
            "Tag": "a",
            "props": {
              "href": "https://hxndg.github.io/2020/08/27/HKDF-Extract%E4%B8%8EHKDF-Expand/"
            },
            "content": "HKDF-Extract"
          },
          " - 给定一个盐值和一些字节的密钥材料，派生出一个 32bytes(256bits) 固定长度的新密钥材料，输入的密钥材料的熵均匀地分布在输出中。"
        ]
      },
      {
        "Tag": "li",
        "children": [
          {
            "Tag": "a",
            "props": {
              "href": "https://hxndg.github.io/2020/08/27/HKDF-Extract%E4%B8%8EHKDF-Expand/"
            },
            "content": "HKDF-Expand-Label"
          },
          " - 给出伪随机密钥、标签和上下文数据的输入，拓展为一个要求长度的密钥。"
        ]
      }
    ]
  },
  {
    "children": [
      "在命令行中使用",
      {
        "Tag": "a",
        "props": { "href": "https://quic.xargs.org/files/hkdf.sh" },
        "content": "原作者制作的 HKDF 命令行脚本"
      },
      "，你也可以自己试试："
    ]
  },
  {
    "Tag": "CodeSample",
    "props": {
      "code": "$ hello_hash=e05f64fcd082bdb0dce473adf669c2769f257a1c75a51b7887468b5e0e7a7de4f4d34555112077f16e079019d5a845bd\n$ shared_secret=df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624\n$ zero_key=000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n$ early_secret=$(./hkdf-384 extract 00 $zero_key)\n$ empty_hash=$(openssl sha384 < /dev/null | sed -e 's/.* //')\n$ derived_secret=$(./hkdf-384 expandlabel $early_secret \"derived\" $empty_hash 48)\n$ handshake_secret=$(./hkdf-384 extract $derived_secret $shared_secret)\n$ csecret=$(./hkdf-384 expandlabel $handshake_secret \"c hs traffic\" $hello_hash 48)\n$ ssecret=$(./hkdf-384 expandlabel $handshake_secret \"s hs traffic\" $hello_hash 48)\n$ client_handshake_key=$(./hkdf-384 expandlabel $csecret \"key\" \"\" 32)\n$ server_handshake_key=$(./hkdf-384 expandlabel $ssecret \"key\" \"\" 32)\n$ client_handshake_iv=$(./hkdf-384 expandlabel $csecret \"iv\" \"\" 12)\n$ server_handshake_iv=$(./hkdf-384 expandlabel $ssecret \"iv\" \"\" 12)\n$ echo hssec: $handshake_secret\n$ echo ssec: $ssecret\n$ echo csec: $csecret\n$ echo skey: $server_handshake_key\n$ echo siv: $server_handshake_iv\n$ echo ckey: $client_handshake_key\n$ echo civ: $client_handshake_iv\n\nhssec: bdbbe8757494bef20de932598294ea65b5e6bf6dc5c02a960a2de2eaa9b07c929078d2caa0936231c38d1725f179d299\nssec: 23323da031634b241dd37d61032b62a4f450584d1f7f47983ba2f7cc0cdcc39a68f481f2b019f9403a3051908a5d1622\ncsec: db89d2d6df0e84fed74a2288f8fd4d0959f790ff23946cdf4c26d85e51bebd42ae184501972f8d30c4a3e4a3693d0ef0\nskey: 9f13575ce3f8cfc1df64a77ceaffe89700b492ad31b4fab01c4792be1b266b7f\nsiv: 9563bc8b590f671f488d2da3\nckey: 1135b4826a9a70257e5a391ad93093dfd7c4214812f493b3e3daae1eb2b1ac69\nciv: 4256d2e0e88babdd05eb2f27"
    }
  },
  "由此我们可以得到以下密钥以及向量：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "children": [
          "客户端握手时密钥: ",
          {
            "Tag": "code",
            "content": "1135b4826a9a70257e5a391ad93093dfd7c4214812f493b3e3daae1eb2b1ac69"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "客户端握手时向量: ",
          {
            "Tag": "code",
            "content": "4256d2e0e88babdd05eb2f27"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "客户端握手时流量密文(handshake traffic secret): ",
          {
            "Tag": "code",
            "content": "84b3c21cacaf9f54c885e9a506459079"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "握手时密文(handshake secret)：",
          {
            "Tag": "code",
            "content": "bdbbe8757494bef20de932598294ea65b5e6bf6dc5c02a960a2de2eaa9b07c929078d2caa0936231c38d1725f179d299"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端握手时密钥: ",
          {
            "Tag": "code",
            "content": "9f13575ce3f8cfc1df64a77ceaffe89700b492ad31b4fab01c4792be1b266b7f"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端握手时向量: ",
          {
            "Tag": "code",
            "content": "9563bc8b590f671f488d2da3"
          }
        ]
      },
      {
        "Tag": "li",
        "children": [
          "服务器端握手时流量密文: ",
          {
            "Tag": "code",
            "content": "23323da031634b241dd37d61032b62a4f450584d1f7f47983ba2f7cc0cdcc39a68f481f2b019f9403a3051908a5d1622"
          }
        ]
      }
    ]
  },
  {
    "children": [
      "握手时流量密文(handshake traffic secret)之后用于生成握手完成时的验证数据。而握手时密文(handshake secret)之后用于会话密钥的计算。",
      "详情见 ",
      {
        "Tag": "a",
        "props": {
          "href": "https://www.ietf.org/rfc/rfc8446.html#section-7.1"
        },
        "content": "TLS 1.3 RFC 的 7.1 节"
      }
    ]
  }
]
