[
  "TLS 会话以 \"ClientHello\" 开始。客户端提供的信息包括以下内容：",
  {
    "Tag": "ul",
    "children": [
      {
        "Tag": "li",
        "content": "客户端随机数(用于之后的握手过程)"
      },
      {
        "Tag": "li",
        "content": "一个客户端支持的有序的加解密算法数组"
      },
      {
        "Tag": "li",
        "content": "用于密钥交换的公钥"
      },
      {
        "Tag": "li",
        "content": "客户端支持的协议版本列表"
      }
    ]
  },
  {
    "Tag": "AnnotationToggler"
  },
  {
    "Tag": "Annotations",
    "props": {
      "type": "record-data",
      "data": [
        [
          "TLS 数据头",
          {
            "props": {
              "className": "bytes"
            },
            "content": "16 03 01 00 f8"
          },
          [
            "TLS 会话被分解成 \"记录\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "16 - 表示 DTLS 记录类型 0x16(22, Handshake)"
                },
                {
                  "Tag": "li",
                  "content": "03 01 - 协议版本 (3.1, 即 TLS 1.0)"
                },
                {
                  "Tag": "li",
                  "content": "00 f8 - 紧接着的数组载荷长度 0xf8(248) 字节"
                }
              ]
            },
            "有趣的是，这里的版本号并不是预期的 3.3(TLS 1.2)，而是 3.1(TLS 1.0)。TLS 1.2 中也是这样。这样做是为了提高与早期实现的其他互联网组件的互操作性。"
          ]
        ],
        [
          "TLS 握手记录头",
          {
            "props": {
              "className": "bytes"
            },
            "content": "01 00 00 f4"
          },
          [
            "每个 TLS 握手消息都以一个 type 和一个 len 开始。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "01 - 握手消息类型 0x01 (ClientHello)"
                },
                {
                  "Tag": "li",
                  "content": "00 00 f4 - 紧接着的握手消息数据的长度 0xf4 (244) 字节"
                }
              ]
            }
          ]
        ],
        [
          "客户端 TLS 版本号",
          {
            "props": {
              "className": "bytes"
            },
            "content": "03 03"
          },
          [
            "协议版本为 \"3,3\"(指 TLS 1.2)。因为被广泛部署的中间件(middleboxes)并不允许他们不承认的协议版本，所以所有的 TLS 1.3 会话在这个字段中都以 TLS 1.2 版本表示。也因为如此，这个字段不再被使用，而是使用下面的 \"支持的版本\" 扩展来进行版本协商。",
            "而不寻常的版本号(\"3,3\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \"3,1\" 表示，TLS 1.1 用 \"3,2\"，以此类推。"
          ]
        ],
        [
          "客户端随机数",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f"
          },
          [
            "客户端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。"
          ]
        ],
        [
          "会话 ID",
          {
            "props": {
              "className": "bytes"
            },
            "content": "20 e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff"
          },
          [
            "在之前的 TLS 版本中，客户端可以提供一个之前会话的会话 ID。ID 可以让服务器端和客户端跳过协商新密钥的时间并减少其他潜在的成本。",
            "而在 TLS 1.3 中，这种 \"会话恢复\" 是通过更灵活的 PSK（预共享密钥）机制完成的，所以这个字段不再被用于该目的。相反，这个字段的非空值被用来触发\"中间件兼容模式\"，这有助于将 TLS 1.3 会话伪装成正在尝试恢复的 TLS 1.2 会话。",
            "此时，客户端用随机数据来填充这个字段。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "20 - 0x20(32) 字节的会话 ID"
                },
                {
                  "Tag": "li",
                  "content": "e0 e1 ... fe ff - 假的会话 ID"
                }
              ]
            }
          ]
        ],
        [
          "加解密算法列表",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 08 13 02 13 03 13 01 00 ff"
          },
          [
            "客户端提供一个有序的列表，以说明它支持哪些加解密算法进行加密。该列表是按照客户端的偏好顺序排列的，以最高偏好为先。",
            "在 TLS 1.3 中，可能选用的算法数量已经大大减少。其中剩下的所有算法都包含 AEAD 算法支持。AEAD 提供了比旧算法更强大的加密保证，并且能更容易地与其他算法兼容，实现 All-in-one。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 08 - 8 字节的加解密算法列表数据"
                },
                {
                  "Tag": "li",
                  "content": "13 02 - 代表 TLS_AES_256_GCM_SHA384"
                },
                {
                  "Tag": "li",
                  "content": "13 03 - 代表 TLS_CHACHA20_POLY1305_SHA256"
                },
                {
                  "Tag": "li",
                  "content": "13 01 - 代表 TLS_AES_128_GCM_SHA256"
                },
                {
                  "Tag": "li",
                  "content": "13 01 - 代表 TLS_EMPTY_RENEGOTIATION_INFO_SCSV"
                }
              ]
            },
            {
              "children": [
                "完整加解密算法列表请查看 ",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml"
                  },
                  "content": "IANA tls-parameters"
                },
                " 的 TLS Cipher Suites 部分。"
              ]
            }
          ]
        ],
        [
          "压缩算法",
          {
            "props": {
              "className": "bytes"
            },
            "content": "01 00"
          },
          [
            {
              "children": [
                "以前的 TLS 版本支持压缩(以及对应延伸出的 DTLS 版本)，这被发现会泄露加密数据的信息(见 ",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://zhuanlan.zhihu.com/p/333314023"
                  },
                  "content": "CRIME/BREACH 攻击"
                },
                ")。"
              ]
            },
            "TLS 1.3 不再允许压缩。所以这个字段不会变化：采用 \"null\" 压缩算法，对数据不做任何改变。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "01 - 1 字节的压缩算法长度"
                },
                {
                  "Tag": "li",
                  "content": "00 - 代表 \"没有\"(null) 压缩算法"
                }
              ]
            }
          ]
        ],
        [
          "扩展的长度",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 a3"
          },
          [
            "客户端提供了一个可选的扩展列表，服务器可以根据它来采取某些行动或启用某些特性。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 a3 - 扩展列表的长度为 0xA3(163) 字节"
                }
              ]
            },
            "每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。"
          ]
        ],
        [
          "扩展 - 服务器名称指示",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 00 00 18 00 16 00 00 13 65 78 61 6d 70 6c 65 2e 75 6c 66 68 65 69 6d 2e 6e 65 74"
          },
          [
            "(例子中的)客户端提供了它想要联系的服务器的名称，也被称为 SNI(服务器名称指示)。",
            "如果没有这个扩展，HTTPS 服务器将无法为一个 IP 地址上的多个主机名(虚拟主机)提供服务。因为它在 TLS 会话协商结束、HTTP 请求发出后才知道要发送哪个主机名的证书。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 00 - 表示这是 \"服务器名称指示\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 18 - 扩展信息长度为 0x18(24) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "00 16 - 第一个(也是唯一的)列表条目长度为 0x16(22) 字节"
                },
                {
                  "Tag": "li",
                  "content": "00 - 0x00 表示这是 \"主机名\" 列表"
                },
                {
                  "Tag": "li",
                  "content": "00 13 - 主机名列表的长度为 0x13(19) 字节"
                },
                {
                  "Tag": "li",
                  "content": "65 78 61 ... 6e 65 74 - 主机名：\"example.ulfheim.net\""
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 椭圆曲线参数指示(EC Point Formats)",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 0b 00 04 03 00 01 02"
          },
          [
            "在椭圆曲线(EC)加密过程中，客户端和服务器通过这个扩展协商椭圆曲线相关的信息(如选择的起始点和是否压缩)。",
            "TLS 1.3 并不支持协商点的能力，相反，每条曲线都有一个预选的点。但在版本协商成功之前(因此结果有可能是 TLS 1.2)，如果 EC 被启用，那么这个扩展总是被添加。(细节请参考文后参考一节)",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 0b - 表示这是 \"椭圆曲线参数指示\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 04 - 扩展信息长度为 0x04(4) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "03 - 指示长度为 0x03(3) 字节"
                },
                {
                  "Tag": "li",
                  "content": "00 - 表示未压缩"
                },
                {
                  "Tag": "li",
                  "content": "01 - 表示曲线格式为 ansiX962_compressed_prime"
                },
                {
                  "Tag": "li",
                  "content": "02 - 表示曲线格式为 ansiX962_compressed_char2"
                }
              ]
            },
            "译注：TLS 1.3 如果用 OpenSSL 协商的话，00 01 02 是默认值。(大概率也不会有人瞎改，因此也是绝大部分场景实际出现的值)"
          ]
        ],
        [
          "扩展 - 支持的组",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 0a 00 16 00 14 00 1d 00 17 00 1e 00 19 00 18 01 00 01 01 01 02 01 03 01 04"
          },
          [
            "(例子中的)客户端表示它支持十种类型的椭圆曲线算法(ECC)。为了使这个扩展更加通用，未来可以支持其他的密码学类型，因此称这些为 \"支持的组\" 而不是 \"支持的曲线\"。",
            "这个列表同样是按照客户端的偏好降序排列的。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 0a - 表示这是 \"支持的组\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 16 - 扩展信息长度为 0x16(22) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "00 14 - 曲线列表条目长度为 0x14(20) 字节"
                },
                {
                  "Tag": "li",
                  "content": "00 1d - 代表 x25519 曲线"
                },
                {
                  "Tag": "li",
                  "content": "00 17 - 代表 secp256r1 曲线"
                },
                {
                  "Tag": "li",
                  "content": "00 1e - 代表 x448 曲线"
                },
                {
                  "Tag": "li",
                  "content": "00 19 - 代表 secp521r1 曲线"
                },
                {
                  "Tag": "li",
                  "content": "00 18 - 代表 secp384r1 曲线"
                },
                {
                  "Tag": "li",
                  "content": "10 00 - 代表 ffdhe2048 曲线"
                },
                {
                  "Tag": "li",
                  "content": "10 01 - 代表 ffdhe3072 曲线"
                },
                {
                  "Tag": "li",
                  "content": "10 02 - 代表 ffdhe4096 曲线"
                },
                {
                  "Tag": "li",
                  "content": "10 03 - 代表 ffdhe6144 曲线"
                },
                {
                  "Tag": "li",
                  "content": "10 04 - 代表 ffdhe8192 曲线"
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 会话记录单(Session Ticket)",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 23 00 00"
          },
          [
            "(例子中的)客户端表明它不会为本次连接提供会话记录单。",
            "会话记录单用只有服务端知道的安全密钥加密过的会话信息，保存在客户端，只要服务器能成功解密就可以完成快速握手。",
            {
              "children": [
                "但会话记录单的引入，",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://words.filippo.io/we-need-to-talk-about-session-tickets/"
                  },
                  "content": "破坏了 TLS 的安全模型。"
                }
              ]
            },
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 23 - 表示这是 \"会话记录单\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 00 - 扩展信息长度为 0x00(0) 字节 "
                }
              ]
            }
          ]
        ],
        [
          "扩展 - Encrypt-then-MAC",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 16 00 00"
          },
          [
            {
              "children": [
                "客户端表示其支持 EtM。EtM 可以防止早期版本的 TLS 和 DTLS 的",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://iacr.org/archive/crypto2001/21390309.pdf"
                  },
                  "content": "某些漏洞"
                },
                "。在 TLS 1.3 中，这个机制始终被开启，因此这个扩展在会话中没有影响。"
              ]
            },
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 16 - 表示这是 \"EtM\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 00 - 扩展信息长度为 0x00(0) 字节 "
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 扩展主密钥(Extended Master Secret)",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 17 00 00"
          },
          [
            {
              "children": [
                "客户端表示支持额外的密码学操作，以防止早期版本 TLS 出现的漏洞（详见 ",
                {
                  "Tag": "a",
                  "props": {
                    "href": "https://iacr.org/archive/crypto2001/21390309.pdf"
                  },
                  "content": "RFC 7627"
                },
                "）。在 TLS 1.3 中，这些漏洞不再存在，所以这个扩展在这个会话中没有影响。"
              ]
            },
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 17 - 表示这是 \"扩展主密钥\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 00 - 扩展信息长度为 0x00(0) 字节 "
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 签名算法列表",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 0d 00 1e 00 1c 04 03 05 03 06 03 08 07 08 08 08 09 08 0a 08 0b 08 04 08 05 08 06 04 01 05 01 06 01"
          },
          [
            "这个扩展表示客户端支持哪些签名算法。这可能会影响到服务器提交给客户端的证书，以及服务器在 CertificateVerify 记录中发送的签名。",
            "这个列表同样是按照客户端的偏好降序排列的。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 0d - 表示这是 \"签名算法列表\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 1e - 扩展信息长度为 0x1E(30) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "00 1c - 算法列表长度为 0x1C(28) 字节"
                },
                {
                  "Tag": "li",
                  "content": "04 03 - 代表 ECDSA-SECP256r1-SHA256 算法"
                },
                {
                  "Tag": "li",
                  "content": "05 03 - 代表 ECDSA-SECP384r1-SHA384 算法"
                },
                {
                  "Tag": "li",
                  "content": "06 03 - 代表 ECDSA-SECP521r1-SHA512 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 07 - 代表 ED25519 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 08 - 代表 ED448 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 09 - 代表 RSA-PSS-PSS-SHA256 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 0a - 代表 RSA-PSS-PSS-SHA384 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 0b - 代表 RSA-PSS-PSS-SHA512 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 04 - 代表 RSA-PSS-RSAE-SHA256 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 05 - 代表 RSA-PSS-RSAE-SHA384 算法"
                },
                {
                  "Tag": "li",
                  "content": "08 06 - 代表 RSA-PSS-RSAE-SHA512 算法"
                },
                {
                  "Tag": "li",
                  "content": "04 01 - 代表 RSA-PKCS1-SHA256 算法"
                },
                {
                  "Tag": "li",
                  "content": "05 01 - 代表 RSA-PKCS1-SHA384 算法"
                },
                {
                  "Tag": "li",
                  "content": "06 01 - 代表 RSA-PKCS1-SHA512 算法"
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 支持的版本",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 2b 00 03 02 03 04"
          },
          [
            "客户端表明其支持 TLS 1.3。由于兼容性的原因(可能协商结果为 TLS 1.2)，这被放在一个扩展中，而不是上面的客户端版本字段。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 2b - 表示这是 \"支持的版本\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 03 - 扩展信息长度为 0x03(3) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "02 - TLS 版本长度为 0x02(2) 字节"
                },
                {
                  "Tag": "li",
                  "content": "03 04 - 代表 TLS 1.3"
                }
              ]
            }
          ]
        ],
        [
          "扩展 - PSK 密钥交换模式(PSK Key Exchange Modes)",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 2d 00 02 01 01"
          },
          [
            "客户端仅支持使用该扩展列表所列出的模式的 PSK。由于我们在这个会话中不使用 PSK，这个扩展没有影响。",
            "如果客户端提供了 \"PSK\" 扩展，那么它必须也要提供 \"PSK 密钥交换模式\" 扩展。如果客户端未提供含有该扩展的 \"PSK\"，服务器端必须立即中止握手。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 2d - 表示这是 \"PSK 密钥交换模式\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 02 - 扩展信息长度为 0x02(2) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "01 - 密钥交换的模式长度为 0x01(1) 字节"
                },
                {
                  "Tag": "li",
                  "content": "01 - 代表 \"PSK with (EC)DHE key establishment\""
                }
              ]
            }
          ]
        ],
        [
          "扩展 - 算法公钥列表(Key Share)",
          {
            "props": {
              "className": "bytes"
            },
            "content": "00 33 00 26 00 24 00 1d 00 20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62 54"
          },
          [
            "客户端会给某些它认为服务器也会支持的算法发送对应的短暂的公钥。这允许在 ClientHello 和 ServerHello 消息之后的其余握手记录被加密。而不用像以前的协议版本，以透明的方式发送握手记录。",
            {
              "Tag": "ul",
              "children": [
                {
                  "Tag": "li",
                  "content": "00 33 - 表示这是 \"算法公钥列表\" 扩展"
                },
                {
                  "Tag": "li",
                  "content": "00 26 - 扩展信息长度为 0x26(38) 字节 "
                },
                {
                  "Tag": "li",
                  "content": "00 24 - 算法公钥列表长度为 0x24(36) 字节"
                },
                {
                  "Tag": "li",
                  "content": "00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)"
                },
                {
                  "Tag": "li",
                  "content": "00 20 - 公钥长度为 0x20(32) 字节"
                },
                {
                  "Tag": "li",
                  "content": "35 80 ... 62 54 - \"客户端准备密钥交换\" 步骤中生成的公钥"
                }
              ]
            }
          ]
        ]
      ]
    }
  }
]
