{"mappings":"A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,Q,C,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAA,CAAM,gvH","sources":["<anon>","src/TLS13/serverCertVerify.json"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nparcelRequire.register(\"4iSZO\", function(module, exports) {\nmodule.exports = JSON.parse('[\"服务器提供证书验证相关的数据，用以验证服务器密钥交换生成过程中产生的短暂公钥与证书私钥的所有权是否一致。\",{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"握手消息头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"0f 00 01 04\"},[\"每个握手消息都以一个 type 和一个 len 开始。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"0f - 握手消息类型 0x0f (certificate verify)\"},{\"Tag\":\"li\",\"content\":\"00 01 04 - 紧接着的握手消息数据的长度 0x104 (260) 字节\"}]}]],[\"签名\",{\"props\":{\"className\":\"bytes\"},\"content\":\"08 04 01 00 5c bb 24 c0 40 93 32 da a9 20 bb ab bd b9 bd 50 17 0b e4 9c fb e0 a4 10 7f ca 6f fb 10 68 e6 5f 96 9e 6d e7 d4 f9 e5 60 38 d6 7c 69 c0 31 40 3a 7a 7c 0b cc 86 83 e6 57 21 a0 c7 2c c6 63 40 19 ad 1d 3a d2 65 a8 12 61 5b a3 63 80 37 20 84 f5 da ec 7e 63 d3 f4 93 3f 27 22 74 19 a6 11 03 46 44 dc db c7 be 3e 74 ff ac 47 3f aa ad de 8c 2f c6 5f 32 65 77 3e 7e 62 de 33 86 1f a7 05 d1 9c 50 6e 89 6c 8d 82 f5 bc f3 5f ec e2 59 b7 15 38 11 5e 9c 8c fb a6 2e 49 bb 84 74 f5 85 87 b1 1b 8a e3 17 c6 33 e9 c7 6c 79 1d 46 62 84 ad 9c 4f f7 35 a6 d2 e9 63 b5 9b bc a4 40 a3 07 09 1a 1b 4e 46 bc c7 a2 f9 fb 2f 1c 89 8e cb 19 91 8b e4 12 1d 7e 8e d0 4c d5 0c 9a 59 e9 87 98 01 07 bb bf 29 9c 23 2e 7f db e1 0a 4c fd ae 5c 89 1c 96 af df f9 4b 54 cc d2 bc 19 d3 cd aa 66 44 85 9c\"},[\"由于服务器会为每个会话都生成短暂的密钥(在 TLS 1.2 中是可选的，在 TLS 1.3 中是必须的)，所以和 TLS 之前的版本不同，密钥与证书不会有内在的联系。\",\"为了证明服务器拥有服务器证书(在这个 TLS 会话中的有效性)，它需要使用证书的私钥对握手信息的哈希进行签名。而客户端可以通过使用证书的公钥来证明该签名的有效性。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"08 04 - 表明签名算法为 RSA-PSS-RSAE-SHA256\"},{\"Tag\":\"li\",\"content\":\"01 00 - 表明签名算法长度为 0x100(256) 字节\"},{\"Tag\":\"li\",\"content\":\"2c 76 3d ... 4f 9d 65 - 签名\"}]},\"签名过程不能在命令行中逐字逐句地复制，因为签名工具在签名中引入了随机或变化的数据。\",{\"children\":[\"相反，我们可以像客户端那样，在命令行使用\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://tls13.xargs.org/files/server.crt\"},\"content\":\"服务器的证书\"},\"提供的公钥来验证签名：\"]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### find the hash of the conversation to this point, excluding\\\\n### 5-byte record headers or 1-byte wrapped record trailers\\\\n$ handshake_hash=$((\\\\n   tail -c +6 clienthello;\\\\n   tail -c +6 serverhello;\\\\n   perl -pe \\'s/.$// if eof\\' serverextensions;\\\\n   perl -pe \\'s/.$// if eof\\' servercert) | openssl sha384)\\\\n\\\\n### build the data that was signed:\\\\n### 1. add 64 space characters\\\\n$ echo -n \\'                                \\' > /tmp/tosign\\\\n$ echo -n \\'                                \\' >> /tmp/tosign\\\\n### 2. add this fixed string\\\\n$ echo -n \\'TLS 1.3, server CertificateVerify\\' >> /tmp/tosign\\\\n### 3. add a single null character\\\\n$ echo -en \\'\\\\\\\\0\\' >> /tmp/tosign\\\\n### 4. add hash of handshake to this point\\\\n$ echo $handshake_hash | xxd -r -p >> /tmp/tosign\\\\n\\\\n### copy the signature that we want to verify\\\\n$ echo \\\\\"5c bb 24 c0 40 93 32 da a9 20 bb ab bd b9 bd 50 17 0b e4 9c\\\\n  fb e0 a4 10 7f ca 6f fb 10 68 e6 5f 96 9e 6d e7 d4 f9 e5 60 38 d6\\\\n  7c 69 c0 31 40 3a 7a 7c 0b cc 86 83 e6 57 21 a0 c7 2c c6 63 40 19\\\\n  ad 1d 3a d2 65 a8 12 61 5b a3 63 80 37 20 84 f5 da ec 7e 63 d3 f4\\\\n  93 3f 27 22 74 19 a6 11 03 46 44 dc db c7 be 3e 74 ff ac 47 3f aa\\\\n  ad de 8c 2f c6 5f 32 65 77 3e 7e 62 de 33 86 1f a7 05 d1 9c 50 6e\\\\n  89 6c 8d 82 f5 bc f3 5f ec e2 59 b7 15 38 11 5e 9c 8c fb a6 2e 49\\\\n  bb 84 74 f5 85 87 b1 1b 8a e3 17 c6 33 e9 c7 6c 79 1d 46 62 84 ad\\\\n  9c 4f f7 35 a6 d2 e9 63 b5 9b bc a4 40 a3 07 09 1a 1b 4e 46 bc c7\\\\n  a2 f9 fb 2f 1c 89 8e cb 19 91 8b e4 12 1d 7e 8e d0 4c d5 0c 9a 59\\\\n  e9 87 98 01 07 bb bf 29 9c 23 2e 7f db e1 0a 4c fd ae 5c 89 1c 96\\\\n  af df f9 4b 54 cc d2 bc 19 d3 cd aa 66 44 85 9c\\\\\" | xxd -r -p > /tmp/sig\\\\n\\\\n### extract the public key from the certificate\\\\n$ openssl x509 -pubkey -noout -in server.crt > server.pub\\\\n\\\\n### verify the signature\\\\n$ cat /tmp/tosign | openssl dgst -verify server.pub -sha256 \\\\\\\\\\\\n    -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 -signature /tmp/sig\\\\n\\\\nVerified OK\"}}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=serverCertVerify.f19622c3.js.map\n","[\n  \"服务器提供证书验证相关的数据，用以验证服务器密钥交换生成过程中产生的短暂公钥与证书私钥的所有权是否一致。\",\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"握手消息头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"0f 00 01 04\"\n          },\n          [\n            \"每个握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"0f - 握手消息类型 0x0f (certificate verify)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 01 04 - 紧接着的握手消息数据的长度 0x104 (260) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"签名\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"08 04 01 00 5c bb 24 c0 40 93 32 da a9 20 bb ab bd b9 bd 50 17 0b e4 9c fb e0 a4 10 7f ca 6f fb 10 68 e6 5f 96 9e 6d e7 d4 f9 e5 60 38 d6 7c 69 c0 31 40 3a 7a 7c 0b cc 86 83 e6 57 21 a0 c7 2c c6 63 40 19 ad 1d 3a d2 65 a8 12 61 5b a3 63 80 37 20 84 f5 da ec 7e 63 d3 f4 93 3f 27 22 74 19 a6 11 03 46 44 dc db c7 be 3e 74 ff ac 47 3f aa ad de 8c 2f c6 5f 32 65 77 3e 7e 62 de 33 86 1f a7 05 d1 9c 50 6e 89 6c 8d 82 f5 bc f3 5f ec e2 59 b7 15 38 11 5e 9c 8c fb a6 2e 49 bb 84 74 f5 85 87 b1 1b 8a e3 17 c6 33 e9 c7 6c 79 1d 46 62 84 ad 9c 4f f7 35 a6 d2 e9 63 b5 9b bc a4 40 a3 07 09 1a 1b 4e 46 bc c7 a2 f9 fb 2f 1c 89 8e cb 19 91 8b e4 12 1d 7e 8e d0 4c d5 0c 9a 59 e9 87 98 01 07 bb bf 29 9c 23 2e 7f db e1 0a 4c fd ae 5c 89 1c 96 af df f9 4b 54 cc d2 bc 19 d3 cd aa 66 44 85 9c\"\n          },\n          [\n            \"由于服务器会为每个会话都生成短暂的密钥(在 TLS 1.2 中是可选的，在 TLS 1.3 中是必须的)，所以和 TLS 之前的版本不同，密钥与证书不会有内在的联系。\",\n            \"为了证明服务器拥有服务器证书(在这个 TLS 会话中的有效性)，它需要使用证书的私钥对握手信息的哈希进行签名。而客户端可以通过使用证书的公钥来证明该签名的有效性。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"08 04 - 表明签名算法为 RSA-PSS-RSAE-SHA256\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"01 00 - 表明签名算法长度为 0x100(256) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"2c 76 3d ... 4f 9d 65 - 签名\"\n                }\n              ]\n            },\n            \"签名过程不能在命令行中逐字逐句地复制，因为签名工具在签名中引入了随机或变化的数据。\",\n            {\n              \"children\": [\n                \"相反，我们可以像客户端那样，在命令行使用\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://tls13.xargs.org/files/server.crt\"\n                  },\n                  \"content\": \"服务器的证书\"\n                },\n                \"提供的公钥来验证签名：\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### find the hash of the conversation to this point, excluding\\n### 5-byte record headers or 1-byte wrapped record trailers\\n$ handshake_hash=$((\\n   tail -c +6 clienthello;\\n   tail -c +6 serverhello;\\n   perl -pe 's/.$// if eof' serverextensions;\\n   perl -pe 's/.$// if eof' servercert) | openssl sha384)\\n\\n### build the data that was signed:\\n### 1. add 64 space characters\\n$ echo -n '                                ' > /tmp/tosign\\n$ echo -n '                                ' >> /tmp/tosign\\n### 2. add this fixed string\\n$ echo -n 'TLS 1.3, server CertificateVerify' >> /tmp/tosign\\n### 3. add a single null character\\n$ echo -en '\\\\0' >> /tmp/tosign\\n### 4. add hash of handshake to this point\\n$ echo $handshake_hash | xxd -r -p >> /tmp/tosign\\n\\n### copy the signature that we want to verify\\n$ echo \\\"5c bb 24 c0 40 93 32 da a9 20 bb ab bd b9 bd 50 17 0b e4 9c\\n  fb e0 a4 10 7f ca 6f fb 10 68 e6 5f 96 9e 6d e7 d4 f9 e5 60 38 d6\\n  7c 69 c0 31 40 3a 7a 7c 0b cc 86 83 e6 57 21 a0 c7 2c c6 63 40 19\\n  ad 1d 3a d2 65 a8 12 61 5b a3 63 80 37 20 84 f5 da ec 7e 63 d3 f4\\n  93 3f 27 22 74 19 a6 11 03 46 44 dc db c7 be 3e 74 ff ac 47 3f aa\\n  ad de 8c 2f c6 5f 32 65 77 3e 7e 62 de 33 86 1f a7 05 d1 9c 50 6e\\n  89 6c 8d 82 f5 bc f3 5f ec e2 59 b7 15 38 11 5e 9c 8c fb a6 2e 49\\n  bb 84 74 f5 85 87 b1 1b 8a e3 17 c6 33 e9 c7 6c 79 1d 46 62 84 ad\\n  9c 4f f7 35 a6 d2 e9 63 b5 9b bc a4 40 a3 07 09 1a 1b 4e 46 bc c7\\n  a2 f9 fb 2f 1c 89 8e cb 19 91 8b e4 12 1d 7e 8e d0 4c d5 0c 9a 59\\n  e9 87 98 01 07 bb bf 29 9c 23 2e 7f db e1 0a 4c fd ae 5c 89 1c 96\\n  af df f9 4b 54 cc d2 bc 19 d3 cd aa 66 44 85 9c\\\" | xxd -r -p > /tmp/sig\\n\\n### extract the public key from the certificate\\n$ openssl x509 -pubkey -noout -in server.crt > server.pub\\n\\n### verify the signature\\n$ cat /tmp/tosign | openssl dgst -verify server.pub -sha256 \\\\\\n    -sigopt rsa_padding_mode:pss -sigopt rsa_pss_saltlen:-1 -signature /tmp/sig\\n\\nVerified OK\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["globalThis","self","window","global","register","module","exports","JSON","parse"],"version":3,"file":"serverCertVerify.f19622c3.js.map"}