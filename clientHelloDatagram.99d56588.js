("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire7f38.register("docPh",function(e,t){e.exports=JSON.parse('["DTLS 加密会话以 \\"ClientHello\\" 开始。客户端提供的信息包括以下内容：",{"Tag":"ul","children":[{"Tag":"li","content":"客户端随机数(用于之后的握手过程)"},{"Tag":"li","content":"一个客户端支持的有序的加解密算法数组"},{"Tag":"li","content":"用于密钥交换的公钥"},{"Tag":"li","content":"客户端支持的协议版本列表"}]},{"Tag":"AnnotationToggler"},{"Tag":"Annotations","props":{"type":"record-data","data":[["DTLS 数据头",{"props":{"className":"bytes"},"content":"16 fe fd 00 00 00 00 00 00 00 00 00 9d"},["每个 DTLS 记录都以一个 type、一些序列信息(seq info)和一个 len 开始。",{"Tag":"ul","children":[{"Tag":"li","content":"16 - 表示 DTLS 记录类型 0x16(22, Handshake)"},{"Tag":"li","content":"fe fd - 协议版本 (DTLS 1.2, 细节见下文)"},{"Tag":"li","content":"00 00 - 密钥序列指示(key epoch，每次密钥更新时都会递增)"},{"Tag":"li","content":"00 00 00 00 00 00 - DTLS 序列号 0x0(0)"},{"Tag":"li","content":"00 9d - 紧接着的数组载荷长度 0x9D(157) 字节"}]},"DTLS 版本的编码方式是将协议版本分成几个部分，然后取每个部分的补码。(因此 \\"1.3\\" 变成 {1, 3}，变成字节 0xFE 0xFC)。这种补码技术使 DTLS 版本与 TLS 版本有所差别。","由于已经创建和部署的网络中间件(middleboxes)不允许它们所不承认的协议版本通过，因此所有 DTLS 1.3 会话在未加密的记录中都会显示为 DTLS 1.2(0xFE 0xFD)。"]],["TLS 握手记录头",{"props":{"className":"bytes"},"content":"01 00 00 91"},["每个 TLS 握手消息都以一个 type 和一个 len 开始。",{"Tag":"ul","children":[{"Tag":"li","content":"01 - 握手消息类型 0x01 (ClientHello)"},{"Tag":"li","content":"00 00 91 - 紧接着的握手消息数据的长度 0x91 (145) 字节"}]}]],["用于重建握手顺序的信息(Handshake Reconstruction Data)",{"props":{"className":"bytes"},"content":"00 00 00 00 00 00 00 91"},["因为 UDP (或其他数据报协议)不保证交付或排序，而且数据报的长度可能比需要发送的握手记录长度要小。因此 DTLS 必须提供一定的信息，以支持在数据丢失、包重排序或有记录碎片的情况下，使得对等端(peer)能够重新构建一条正确的 DTLS 记录。",{"Tag":"ul","children":[{"Tag":"li","content":"00 00 - DTLS 序列号 0x0(0)"},{"Tag":"li","content":"00 00 00 - 表明记录碎片的偏移量为 0x00(0) 字节"},{"Tag":"li","content":"00 00 91 - 表明之后的记录碎片的长度为 0x91(145) 字节"}]},"在本文例子中，整个握手记录的长度要短于一个 UDP 数据报的可承载长度，因此偏移量为零，且长度为整个握手记录长。"]],["客户端版本(废弃)",{"props":{"className":"bytes"},"content":"fe fd"},["DTLS 版本的编码方式是将协议版本分成几个部分，然后取每个部分的补码。(因此 \\"1.3\\" 变成 {1, 3}，变成字节 0xFE 0xFC)。这种补码技术使 DTLS 版本与 TLS 版本有所差别。","由于已经创建和部署的网络中间件(middleboxes)不允许它们所不承认的协议版本通过，因此所有 DTLS 1.3 会话在未加密的记录中都会显示为 DTLS 1.2(0xFE 0xFD)。所有的 DTLS 1.3 及以上版本的会话需要通过后面提到的\\"支持的版本\\"拓展协商真实版本号。"]],["客户端随机数",{"props":{"className":"bytes"},"content":"e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff"},["客户端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。"]],["会话 ID (废弃)",{"props":{"className":"bytes"},"content":"00"},["这是一个废弃(legacy)字段，不在 DTLS 1.3 中使用。",{"Tag":"ul","children":[{"Tag":"li","content":"00 - 0 字节的会话 ID"}]}]],["Cookie (废弃)",{"props":{"className":"bytes"},"content":"00"},["这是一个废弃(legacy)字段，不在 DTLS 1.3 中使用。",{"Tag":"ul","children":[{"Tag":"li","content":"00 - 0 字节的 Cookie"}]}]],["加解密算法列表",{"props":{"className":"bytes"},"content":"00 06 13 01 13 02 13 03"},["客户端提供一个有序的列表，以说明它支持哪些加解密算法进行加密。该列表是按照客户端的偏好顺序排列的，以最高偏好为先。",{"Tag":"ul","children":[{"Tag":"li","content":"00 06 - 6 字节的加解密算法列表数据"},{"Tag":"li","content":"13 01 - 代表 TLS_AES_128_GCM_SHA256"},{"Tag":"li","content":"13 02 - 代表 TLS_AES_256_GCM_SHA384"},{"Tag":"li","content":"13 03 - 代表 TLS_CHACHA20_POLY1305_SHA256"}]},{"children":["完整加解密算法列表请查看 ",{"Tag":"a","props":{"href":"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml"},"content":"IANA tls-parameters"}," 的 TLS Cipher Suites 部分。"]}]],["压缩算法",{"props":{"className":"bytes"},"content":"01 00"},[{"children":["以前的 TLS 版本支持压缩(以及对应延伸出的 DTLS 版本)，这被发现会泄露加密数据的信息(见 ",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/333314023"},"content":"CRIME/BREACH 攻击"},")。"]},"TLS 1.3 (DTLS 1.3)不再允许压缩。所以这个字段不会变化：采用 \\"null\\" 压缩算法，对数据不做任何改变。",{"Tag":"ul","children":[{"Tag":"li","content":"01 - 1 字节的压缩算法长度"},{"Tag":"li","content":"00 - 代表 \\"没有\\"(null) 压缩算法"}]}]],["扩展的长度",{"props":{"className":"bytes"},"content":"00 61"},["客户端提供了一个可选的扩展列表，服务器可以根据它来采取某些行动或启用某些特性。",{"Tag":"ul","children":[{"Tag":"li","content":"00 61 - 扩展列表的长度为 0x61(97) 字节"}]},"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。"]],["扩展 - 算法公钥列表(Key Share)",{"props":{"className":"bytes"},"content":"00 33 00 26 00 24 00 1d 00 20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62 54"},["客户端会给某些它认为服务器也会支持的算法发送对应的短暂的公钥。这允许在 ClientHello 和 ServerHello 消息之后的其余握手记录被加密。而不用像以前的协议版本，以透明的方式发送握手记录。",{"Tag":"ul","children":[{"Tag":"li","content":"00 33 - 表示这是 \\"算法公钥列表\\" 扩展"},{"Tag":"li","content":"00 26 - 扩展信息长度为 0x26(38) 字节 "},{"Tag":"li","content":"00 24 - 算法公钥列表长度为 0x24(36) 字节"},{"Tag":"li","content":"00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)"},{"Tag":"li","content":"00 20 - 公钥长度为 0x20(32) 字节"},{"Tag":"li","content":"35 80 ... 62 54 - \\"客户端准备密钥交换\\" 步骤中生成的公钥"}]}]],["扩展 - 支持的版本",{"props":{"className":"bytes"},"content":"00 2b 00 03 02 fe fc"},["客户端表明其支持 DTLS 1.3。由于兼容性的原因，这被放在一个扩展中，而不是上面的客户端版本字段。",{"Tag":"ul","children":[{"Tag":"li","content":"00 2b - 表示这是 \\"支持的版本\\" 扩展"},{"Tag":"li","content":"00 03 - 扩展信息长度为 0x03(3) 字节 "},{"Tag":"li","content":"02 - DTLS 版本长度为 0x02(2) 字节"},{"Tag":"li","content":"fe fc - 代表 DTLS 1.3"}]}]],["扩展 - 签名算法列表",{"props":{"className":"bytes"},"content":"00 0d 00 20 00 1e 06 03 05 03 04 03 02 03 08 06 08 0b 08 05 08 0a 08 04 08 09 06 01 05 01 04 01 03 01 02 01"},["这个扩展表示客户端支持哪些签名算法。这可能会影响到服务器提交给客户端的证书，以及服务器在 CertificateVerify 记录中发送的签名。","这个列表同样是按照客户端的偏好降序排列的。",{"Tag":"ul","children":[{"Tag":"li","content":"00 0d - 表示这是 \\"签名算法列表\\" 扩展"},{"Tag":"li","content":"00 20 - 扩展信息长度为 0x20(32) 字节 "},{"Tag":"li","content":"00 1e - 算法列表长度为 0x1e(30) 字节"},{"Tag":"li","content":"06 03 - 代表 ECDSA-SECP512r1-SHA512 算法"},{"Tag":"li","content":"05 03 - 代表 ECDSA-SECP384r1-SHA384 算法"},{"Tag":"li","content":"04 03 - 代表 ECDSA-SECP256r1-SHA256 算法"},{"Tag":"li","content":"02 03 - 代表 ECDSA-SHA1 算法"},{"Tag":"li","content":"08 06 - 代表 RSA-PSS-RSAE-SHA512 算法"},{"Tag":"li","content":"08 0b - 代表 RSA-PSS-PSS-SHA512 算法"},{"Tag":"li","content":"08 05 - 代表 RSA-PSS-RSAE-SHA384 算法"},{"Tag":"li","content":"08 0a - 代表 RSA-PSS-PSS-SHA384 算法"},{"Tag":"li","content":"08 04 - 代表 RSA-PSS-RSAE-SHA256 算法"},{"Tag":"li","content":"08 09 - 代表 RSA-PSS-PSS-SHA256 算法"},{"Tag":"li","content":"06 01 - 代表 RSA-PKCS1-SHA512 算法"},{"Tag":"li","content":"05 01 - 代表 RSA-PKCS1-SHA384 算法"},{"Tag":"li","content":"04 01 - 代表 RSA-PKCS1-SHA256 算法"},{"Tag":"li","content":"03 01 - 代表 SHA224-RSA 算法"},{"Tag":"li","content":"02 01 - 代表 RSA-PKCS1-SHA1 算法"}]}]],["扩展 - Encrypt-then-MAC",{"props":{"className":"bytes"},"content":"00 16 00 00"},[{"children":["客户端表示其支持 EtM。EtM 可以防止早期版本的 TLS 和 DTLS 的",{"Tag":"a","props":{"href":"https://iacr.org/archive/crypto2001/21390309.pdf"},"content":"某些漏洞"},"。在 DTLS 1.3 中，这个机制始终被开启，因此这个扩展在会话中没有影响。"]},{"Tag":"ul","children":[{"Tag":"li","content":"00 16 - 表示这是 \\"EtM\\" 扩展"},{"Tag":"li","content":"00 00 - 扩展信息长度为 0x00(0) 字节 "}]}]],["扩展 - 支持的组",{"props":{"className":"bytes"},"content":"00 0a 00 04 00 02 00 1d"},["(例子中的)客户端表示它支持一种类型的椭圆曲线算法(ECC)。为了使这个扩展更加通用，未来可以支持其他的密码学类型，因此称这些为 \\"支持的组\\" 而不是 \\"支持的曲线\\"。","这个列表同样是按照客户端的偏好降序排列的。",{"Tag":"ul","children":[{"Tag":"li","content":"00 0a - 表示这是 \\"支持的组\\" 扩展"},{"Tag":"li","content":"00 04 - 扩展信息长度为 0x04(4) 字节 "},{"Tag":"li","content":"00 02 - 曲线列表条目长度为 0x02(2) 字节"},{"Tag":"li","content":"00 1d - 代表 x25519 曲线"}]}]]]}}]')});
//# sourceMappingURL=clientHelloDatagram.99d56588.js.map
