("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire7f38.register("3Khby",(function(e,t){e.exports=JSON.parse('["紧跟着，客户端需要再发送一个用于 \\"握手\\" 的数据包，包含了 \\"握手完成\\"的 TLS 记录，用于完成 TLS 1.3 加密会话的握手过程。",{"Tag":"AnnotationToggler"},{"Tag":"Annotations","props":{"type":"record-data","data":[["数据包头字节",{"props":{"className":"bytes protected","title":"被数据包头保护密钥加密","key":"pk"},"content":"e0"},{"props":{"className":"bytes unprotected"},"content":"e0"},["数据包以一个头字节开始，该字节应用了头保护。头部保护用于隐藏数据包序号和其他信息，使其不被外界观察到。","包头保护是通过用\\"数据包头保护密钥\\"对每个数据包的有效载荷的样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行异或(XOR)操作得到的。对于像这样的\\"长\\"格式数据包，受保护的部分是这个字节的低 4 位，以及数据包序号的字节（见下文）。","这里有一个关于如何计算出加密头字节的例子：",{"Tag":"CodeSample","props":{"code":"### \\"client header protection key\\" from handshake keys calc step above\\n$ key=84b3c21cacaf9f54c885e9a506459079\\n### sample is taken from 16 bytes of payload starting\\n### 4 bytes past the first byte of the packet number\\n$ sample=9da7e61daa07732aa10b5fbd11a00a62\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p\\n\\nb0b3b06690\\n\\n### first byte of result is xor\'d into lower 4 bits of this byte,\\n### remaining bytes are xor\'d one-for-one into the bytes of\\n### the packet number (which in this packet is only one byte)"}},"解密出的字节 0xE0 中的位有以下含义：",{"Tag":"Table","props":{"headers":["","值","含义"],"data":[["高位","1","Long Header 格式"],["","1","固定位(总是被置1)"],["","10","数据包类型：握手"],["","00","保留(总是被置0)"],["低位","00","数据包序号长度(表示下面的 \\"数据包序号\\" 将有一个字节的长度，默认值)"]]}}]],["QUIC 版本号",{"props":{"className":"bytes"},"content":"00 00 00 01"},["QUIC的版本是：0x1"]],["目的地连接标识 ID",{"props":{"className":"bytes"},"content":"05 73 5f 63 69 64"},["服务器的标识 ID (服务器端的源连接标识 ID)",{"Tag":"ul","children":[{"Tag":"li","content":"05 - 紧跟着的目的地连接标识 ID 的长度"},{"Tag":"li","content":"73 5f 63 69 64 - 实际的目的地连接标识 ID(\\"s_cid\\")"}]}]],["源连接标识 ID",{"props":{"className":"bytes"},"content":"05 63 5f 63 69 64"},["客户端使用这个字段来表明它选择的传输给服务器的源连接标识 ID。",{"Tag":"ul","children":[{"Tag":"li","content":"05 - 紧跟着的源连接标识 ID 的长度(5bytes)"},{"Tag":"li","content":"63 5f 63 69 64 - 实际的源连接标识 ID (\\"c_cid\\")"}]}]],["数据包长度",{"props":{"className":"bytes"},"content":"40 3f"},["客户端表示数据包中有多少字节的加密有效载荷。这个字段是一个长度可变的整数——第一个字节的前两位表示该整数中总共有多少个字节。","此时，第一个字节以 \\"0 1\\"(0x4)这两个位开始，表示该整数共两个字节。其余的位给出数字 0x3f，表示 63 个字节的有效载荷。"]],["数据包序号",{"props":{"className":"bytes protected","title":"被数据包头保护密钥加密"},"content":"b2"},{"props":{"className":"bytes unprotected"},"content":"01"},["该字节应用了头保护。详见 \\"数据包头字节\\"。","这个字节的未受保护的值为 0x01，表明它是第 1 号包，或者说是客户端发送的第二个\\"握手\\"包。","这个数据也有可能被截断。发送端点通过几个步骤截断：①计算已发送的最高的序号和未确认的最低的序号之间的差值；②出于安全考虑将差值加倍并四舍五入；③计算它在明确表示两端之间的序号的前提下可以从序号的高位删除的字节数；④截断编码后的数据包序号直至长度满足该字节数。而接收端点根据会它最近看到的数据包号码填入完整的序号。",{"children":["由于我们的例子对话发送的数据包很小(少于 64 个字节)，所以这种截断不会在本文中出现。详情见 ",{"Tag":"a","props":{"href":"https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1"},"content":"RFC 9000"},"。"]}]],["加密的数据载荷",{"props":{"className":"bytes encrypted","title":"被\\"握手时密钥\\"加密"},"content":"5e 1e 45 9d a7 e6 1d aa 07 73 2a a1 0b 5f bd 11 a0 0a 62 0b f5 e1 27 e3 7b 81 bb 10 f1 1c 31 2e 7f 9c 04 a4 3c d5 30 f3 d9 81 d5 02 3a bd"},["这些数据使用客户端的\\"握手时密钥\\"进行加密。"]],["AEAD 鉴别标签",{"props":{"className":"bytes"},"content":"5e 98 f2 2d c6 f2 59 79 91 9b ad 30 2f 44 8c 0a"},[{"children":["这是 ",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/28566058"},"content":"AEAD 算法"},"的鉴别标签，用以确认加密数据和数据包头的完整性。它由加密算法产生，并由解密算法消耗。"]}]]]}},{"Tag":"Annotations","props":{"data":[["",{"props":{"className":"decryption-header"},"content":"解密后的数据载荷"},[{"Tag":"h4","content":"解密"},"数据被 \\"客户端握手时密钥计算\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。","数据包开头的 20 字节(数据包头)还会作为解密过程解密成功时必须满足的认证条件。",{"children":["openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来",{"Tag":"a","props":{"href":"https://quic.xargs.org/files/aes_128_gcm_decrypt.c"},"content":"解密"},"和",{"Tag":"a","props":{"href":"https://quic.xargs.org/files/aes_128_gcm_encrypt.c"},"content":"加密"},"这些数据。"]},{"Tag":"CodeSample","props":{"code":"### from the \\"Handshake Keys Calc\\" step\\n$ key=30a7e816f6a1e1b3434cf39cf4b415e7\\n$ iv=11e70a5d1361795d2bb04465\\n### from this record\\n$ recdata=e00000000105735f63696405635f636964403f01\\n$ authtag=5e98f22dc6f25979919bad302f448c0a\\n$ recordnum=1\\n### may need to add -I and -L flags for include and lib dirs\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\n\\n00000000  02 01 40 46 00 01 06 00  40 24 14 00 00 20 50 ff  |..@F....@$... P.|\\n00000010  b0 c1 a4 25 c6 41 89 1c  98 3d 12 67 26 02 6d 3d  |...%.A...=.g&.m=|\\n00000020  b2 8e a3 51 0b dc 20 54  fc d6 37 ed ca cc        |...Q.. T..7...|"}}]]]}},{"Tag":"Annotations","props":{"type":"record-data","data":[["ACK 帧",{"props":{"className":"bytes encrypted"},"content":"02 01 40 46 00 01"},["客户端确认收到服务器端的握手数据包1。",{"Tag":"ul","children":[{"Tag":"li","content":"02 - 表明帧类型 ACK"},{"Tag":"li","content":"01 - largest_acknowledged: 被确认的最大数据包"},{"Tag":"li","children":["40 46 - ack_delay: 变长的整数。给出这个 ack 被延迟发送的时间，单位是微秒。","通过计算式子：2",{"Tag":"sup","content":"ack_delay_exponent"}," 得到。其中 ack_delay_exponent = 70 * 8 = 560 (µseconds)。"]},{"Tag":"li","content":"00 - ack_range_count: 额外的 ACK 帧数据长度 0x(0)"},{"Tag":"li","content":"01 - first_ack_range: 可变长度的整数。给出在 largest_acknowledged 之前被确认过的数据包数量。"}]}]],["加密帧帧头",{"props":{"className":"bytes encrypted"},"content":"06 00 40 24"},[{"children":["每个 QUIC 数据包在其有效载荷中包含",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/438579683"},"content":"一个或多个帧的列表"},"。例子中的数据包只包含一个帧，即 加密帧。"]},"加密帧帧头的目的是加密字节流，用于建立安全的 TLS 连接(TLS 1.3 握手)。",{"Tag":"ul","children":[{"Tag":"li","content":"06 - 表明这是 加密帧"},{"Tag":"li","content":"00 - 可变长度的整数(前两位表示2字节的整数)。表示加密帧帧内字节的偏移量为 0x00(0) 字节。"},{"Tag":"li","content":"40 24 - 长度可变的整数(前两位表示2字节的整数)，显示加密帧帧内字节长度为 0x24(36) 字节。"}]}]],["TLS 握手完成",{"props":{"className":"bytes encrypted"},"content":"14 00 00 20 50 ff b0 c1 a4 25 c6 41 89 1c 98 3d 12 67 26 02 6d 3d b2 8e a3 51 0b dc 20 54 fc d6 37 ed ca cc"},["这一记录将在后面详细说明。"]]]}}]')}));
//# sourceMappingURL=clientHandshake2.c01c9e83.js.map
