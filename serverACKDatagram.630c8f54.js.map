{"mappings":"A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,Q,C,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAA,CAAM,i3H","sources":["<anon>","src/DTLS/serverACKDatagram.json"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nparcelRequire.register(\"kSrIM\", function(module, exports) {\nmodule.exports = JSON.parse('[\"每个对等端(peer)必须响应或确认从其他对等端收到的数据，否则对应对等端将假定数据已丢失并会再次发送。\",\"因此，在这个记录中，服务器端需要确认收到了客户端握手完成的记录。\",{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"头部信息字节\",{\"props\":{\"className\":\"bytes\"},\"content\":\"2f\"},[\"加密的 DTLS 数据包都以一个 \\\\\"统一的头部(unified header)\\\\\"开始。头部的第一个字节给出了头部和数据包的结构信息，以及解密时需要的信息。\",\"值 0x2f 具有以下含义：\",{\"Tag\":\"Table\",\"props\":{\"headers\":[\"\",\"值\",\"含义\"],\"data\":[[\"高位\",\"001\",\"固定位\"],[\"\",\"0\",\"头部中不存在连接 ID 字段(1则存在)\"],[\"\",\"1\",\"序列号在头部中占 2 字节长\"],[\"\",\"1\",\"头部中存在\\\\\"记录长度\\\\\"字段(0则不存在)\"],[\"低位\",\"11\",\"加密序列指示(Encryption epoch 3)，现在密钥是会话时密钥\"]]}}]],[\"记录序号\",{\"props\":{\"className\":\"bytes protected\",\"title\":\"被加密\"},\"content\":\"31 50\"},{\"props\":{\"className\":\"bytes unprotected\"},\"content\":\"00 00\"},[\"记录序号是被加密了的，用以防止中间件误解(interpreting)或干扰数据包的排序。\",\"加密是通过用 \\\\\"服务器端序号保护密钥\\\\\" 对每个数据包的有效载荷样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行 XOR 得到。\",\"如果说的不够详细，这里有一个如何加密的例子：\",{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### \\\\\"server record number key\\\\\" from application keys calc step above\\\\n$ key=57ba02596c6a1352d7fe8416c7e17d5a\\\\n### sample is taken from 16 bytes of payload starting 5 bytes into the record\\\\n$ sample=ea80ab8e08c93895418d243571ea6de7\\\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p\\\\n\\\\n3150\\\\n\\\\n### the above bytes are xor\\'d one-for-one into the bytes of the record number\"}}]],[\"记录长度\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 23\"},[\"每个记录除非给出这个长度字段，否则对等端将认为数据报剩余的所有字节都是同一个记录的真实载荷。有了这一字段，则在一个数据报中可以发送好几个 DTLS 记录(尽管例子中的连接没有利用这个优势)。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 23 - 表示 DTLS 记录长度为 0x23(35) 字节\"}]}]],[\"加密的数据载荷\",{\"props\":{\"className\":\"bytes encrypted\",\"title\":\"被\\\\\"会话密钥\\\\\"加密\"},\"content\":\"ea 80 ab 8e 08 c9 38 95 41 8d 24 35 71 ea 6d e7 d8 63 ee\"},[\"这些数据使用服务器端的\\\\\"会话密钥\\\\\"进行加密。\"]],[\"AEAD 鉴别标签\",{\"props\":{\"className\":\"bytes\"},\"content\":\"84 23 0b b6 04 3c b3 84 df 94 b6 da 28 5a 3b c4\"},[{\"children\":[\"这是 \",{\"Tag\":\"a\",\"props\":{\"href\":\"https://zhuanlan.zhihu.com/p/28566058\"},\"content\":\"AEAD 算法\"},\"的鉴别标签，确认加密数据和记录头的完整性。它由加密算法产生，并由解密算法消耗。\"]}]]]}},{\"Tag\":\"Annotations\",\"props\":{\"data\":[[\"\",{\"props\":{\"className\":\"decryption-header\"},\"content\":\"解密后的数据载荷\"},[{\"Tag\":\"h4\",\"content\":\"解密\"},\"数据被 \\\\\"服务器端会话密钥计算\\\\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。\",\"数据包开头的 5 字节(记录头)还会作为解密过程解密成功时必须满足的认证条件。\",{\"children\":[\"openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://dtls.xargs.org/files/aes_128_gcm_decrypt.c\"},\"content\":\"解密\"},\"和\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://dtls.xargs.org/files/aes_128_gcm_encrypt.c\"},\"content\":\"加密\"},\"这些数据。\"]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### from the \\\\\"Server Application Keys Calc\\\\\" step\\\\n$ key=2b65fffbbc8189474aa2003c43c32d4d\\\\n$ iv=582f5a11bdaf973fe3ffeb4e\\\\n### from this record\\\\n$ recdata=2f00000023\\\\n$ authtag=84230bb6043cb384df94b6da285a3bc4\\\\n$ recordnum=0\\\\n### may need to add -I and -L flags for include and lib dirs\\\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\\\n\\\\n00000000  00 10 00 00 00 00 00 00  00 02 00 00 00 00 00 00  |................|\\\\n00000010  00 00 1a                                          |...|\"}}]]]}},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"ACK 长度\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"00 10\"},[\"每个 ACK 消息都以一个 len 开始。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 10 - 紧接着的 ACK 消息数据的长度 0x10 (16) 字节\"}]}]],[\"已收到记录信息(Record Acknowledgement)\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00\"},[\"服务器确认其收到的记录。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 00 00 00 00 00 02 - 记录的序列指示号(record epoch)，握手密钥\"},{\"Tag\":\"li\",\"content\":\"00 00 00 00 00 00 00 00 - 对应记录序号\"}]}]],[\"记录类型\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"1a\"},[\"每一个加密的 DTLS 1.3 记录的最后一个字节都需要表明其真正的记录类型\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"1a - 类型为 0x1a(26), ACK 记录\"}]}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=serverACKDatagram.630c8f54.js.map\n","[\n  \"每个对等端(peer)必须响应或确认从其他对等端收到的数据，否则对应对等端将假定数据已丢失并会再次发送。\",\n  \"因此，在这个记录中，服务器端需要确认收到了客户端握手完成的记录。\",\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"头部信息字节\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"2f\"\n          },\n          [\n            \"加密的 DTLS 数据包都以一个 \\\"统一的头部(unified header)\\\"开始。头部的第一个字节给出了头部和数据包的结构信息，以及解密时需要的信息。\",\n            \"值 0x2f 具有以下含义：\",\n            {\n              \"Tag\": \"Table\",\n              \"props\": {\n                \"headers\": [\"\", \"值\", \"含义\"],\n                \"data\": [\n                  [\"高位\", \"001\", \"固定位\"],\n                  [\"\", \"0\", \"头部中不存在连接 ID 字段(1则存在)\"],\n                  [\"\", \"1\", \"序列号在头部中占 2 字节长\"],\n                  [\"\", \"1\", \"头部中存在\\\"记录长度\\\"字段(0则不存在)\"],\n                  [\n                    \"低位\",\n                    \"11\",\n                    \"加密序列指示(Encryption epoch 3)，现在密钥是会话时密钥\"\n                  ]\n                ]\n              }\n            }\n          ]\n        ],\n        [\n          \"记录序号\",\n          {\n            \"props\": {\n              \"className\": \"bytes protected\",\n              \"title\": \"被加密\"\n            },\n            \"content\": \"31 50\"\n          },\n          {\n            \"props\": {\n              \"className\": \"bytes unprotected\"\n            },\n            \"content\": \"00 00\"\n          },\n          [\n            \"记录序号是被加密了的，用以防止中间件误解(interpreting)或干扰数据包的排序。\",\n            \"加密是通过用 \\\"服务器端序号保护密钥\\\" 对每个数据包的有效载荷样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行 XOR 得到。\",\n            \"如果说的不够详细，这里有一个如何加密的例子：\",\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### \\\"server record number key\\\" from application keys calc step above\\n$ key=57ba02596c6a1352d7fe8416c7e17d5a\\n### sample is taken from 16 bytes of payload starting 5 bytes into the record\\n$ sample=ea80ab8e08c93895418d243571ea6de7\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 2 | xxd -p\\n\\n3150\\n\\n### the above bytes are xor'd one-for-one into the bytes of the record number\"\n              }\n            }\n          ]\n        ],\n        [\n          \"记录长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 23\"\n          },\n          [\n            \"每个记录除非给出这个长度字段，否则对等端将认为数据报剩余的所有字节都是同一个记录的真实载荷。有了这一字段，则在一个数据报中可以发送好几个 DTLS 记录(尽管例子中的连接没有利用这个优势)。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 23 - 表示 DTLS 记录长度为 0x23(35) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"加密的数据载荷\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\",\n              \"title\": \"被\\\"会话密钥\\\"加密\"\n            },\n            \"content\": \"ea 80 ab 8e 08 c9 38 95 41 8d 24 35 71 ea 6d e7 d8 63 ee\"\n          },\n          [\"这些数据使用服务器端的\\\"会话密钥\\\"进行加密。\"]\n        ],\n        [\n          \"AEAD 鉴别标签\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"84 23 0b b6 04 3c b3 84 df 94 b6 da 28 5a 3b c4\"\n          },\n          [\n            {\n              \"children\": [\n                \"这是 \",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://zhuanlan.zhihu.com/p/28566058\"\n                  },\n                  \"content\": \"AEAD 算法\"\n                },\n                \"的鉴别标签，确认加密数据和记录头的完整性。它由加密算法产生，并由解密算法消耗。\"\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"data\": [\n        [\n          \"\",\n          {\n            \"props\": {\n              \"className\": \"decryption-header\"\n            },\n            \"content\": \"解密后的数据载荷\"\n          },\n          [\n            { \"Tag\": \"h4\", \"content\": \"解密\" },\n            \"数据被 \\\"服务器端会话密钥计算\\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。\",\n            \"数据包开头的 5 字节(记录头)还会作为解密过程解密成功时必须满足的认证条件。\",\n            {\n              \"children\": [\n                \"openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://dtls.xargs.org/files/aes_128_gcm_decrypt.c\"\n                  },\n                  \"content\": \"解密\"\n                },\n                \"和\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://dtls.xargs.org/files/aes_128_gcm_encrypt.c\"\n                  },\n                  \"content\": \"加密\"\n                },\n                \"这些数据。\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### from the \\\"Server Application Keys Calc\\\" step\\n$ key=2b65fffbbc8189474aa2003c43c32d4d\\n$ iv=582f5a11bdaf973fe3ffeb4e\\n### from this record\\n$ recdata=2f00000023\\n$ authtag=84230bb6043cb384df94b6da285a3bc4\\n$ recordnum=0\\n### may need to add -I and -L flags for include and lib dirs\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\n\\n00000000  00 10 00 00 00 00 00 00  00 02 00 00 00 00 00 00  |................|\\n00000010  00 00 1a                                          |...|\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"ACK 长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"00 10\"\n          },\n          [\n            \"每个 ACK 消息都以一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 10 - 紧接着的 ACK 消息数据的长度 0x10 (16) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"已收到记录信息(Record Acknowledgement)\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00\"\n          },\n          [\n            \"服务器确认其收到的记录。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 00 00 00 00 02 - 记录的序列指示号(record epoch)，握手密钥\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 00 00 00 00 00 00 - 对应记录序号\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"记录类型\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"1a\"\n          },\n          [\n            \"每一个加密的 DTLS 1.3 记录的最后一个字节都需要表明其真正的记录类型\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"1a - 类型为 0x1a(26), ACK 记录\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["globalThis","self","window","global","register","module","exports","JSON","parse"],"version":3,"file":"serverACKDatagram.630c8f54.js.map"}