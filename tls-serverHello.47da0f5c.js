("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire7f38.register("d3owl",(function(e,n){e.exports=JSON.parse('["服务器回复 \\"ServerHello\\"。服务器提供的信息包括以下内容：",{"Tag":"ul","children":[{"Tag":"li","content":"服务器端随机数(在随后的握手时使用)"},{"Tag":"li","content":"服务器端选则的加解密算法"},{"Tag":"li","content":"用于密钥交换的公钥"},{"Tag":"li","content":"服务器协商的具体协议的版本"}]},{"Tag":"AnnotationToggler"},{"Tag":"Annotations","props":{"type":"record-data","data":[["TLS 握手消息头",{"props":{"className":"bytes"},"content":"02 00 00 56"},["每个 TLS 握手消息都以一个 type 和一个 len 开始。",{"Tag":"ul","children":[{"Tag":"li","content":"02 - 握手消息类型 0x02 (server hello)"},{"Tag":"li","content":"00 00 56 - 紧接着的 server hello 数据的长度 0x56 (86) 字节"}]}]],["服务器端 TLS 协议版本号",{"props":{"className":"bytes"},"content":"03 03"},["协议版本为 \\"3,3\\"(指 TLS 1.2)。因为被广泛部署的中间件(middleboxes)并不允许他们不承认的协议版本，所以所有的 TLS 1.3 会话在这个字段中都以 TLS 1.2 版本表示。也因为如此，这个字段不再被使用，而是使用下面的 \\"支持的版本\\" 扩展来进行版本协商。","而不寻常的版本号(\\"3,3\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\"3,1\\" 表示，TLS 1.1 用 \\"3,2\\"，以此类推。"]],["服务器端随机数",{"props":{"className":"bytes"},"content":"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f"},["服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。"]],["会话 ID",{"props":{"className":"bytes"},"content":"00"},["这是一个废弃(legacy)字段，不在 QUIC 中使用。",{"Tag":"ul","children":[{"Tag":"li","content":"00 - 0 字节的会话 ID"}]}]],["所选择的加解密算法",{"props":{"className":"bytes"},"content":"13 01"},["服务器从客户端给出的选项列表中选择的加解密算法 0x1301(TLS_AES_128_GCM_SHA256)。"]],["压缩算法",{"props":{"className":"bytes"},"content":"00"},["服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。"]],["扩展的长度",{"props":{"className":"bytes"},"content":"00 2e"},["服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复客户端 hello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。",{"Tag":"ul","children":[{"Tag":"li","content":"00 2e - 扩展列表的长度为 0x2E(46) 字节"}]},"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。"]],["扩展 - 算法公钥列表(Key Share)",{"props":{"className":"bytes"},"content":"00 33 00 24 00 1d 00 20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15"},["服务器使用和客户端发送公钥时相同的算法发送一个自己的公钥。一旦这个被发送，加密密钥就可以被计算出来。其余的握手则将被加密。而不用像以前的协议版本，以透明的方式发送握手消息。",{"Tag":"ul","children":[{"Tag":"li","content":"00 33 - 表示这是 \\"算法公钥列表\\" 扩展"},{"Tag":"li","content":"00 24 - 算法公钥列表长度为 0x24(36) 字节"},{"Tag":"li","content":"00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)"},{"Tag":"li","content":"00 20 - 公钥长度为 0x20(32) 字节"},{"Tag":"li","content":"9f d7 ... b6 15 - \\"服务器端准备密钥交换\\" 步骤中生成的公钥"}]}]],["扩展 - 支持的版本",{"props":{"className":"bytes"},"content":"00 2b 00 02 03 04"},["客户端表明其支持 TLS 1.3。由于兼容性的原因，这被放在一个扩展中，而不是上面的客户端版本字段。",{"Tag":"ul","children":[{"Tag":"li","content":"00 2b - 表示这是 \\"支持的版本\\" 扩展"},{"Tag":"li","content":"00 03 - 扩展信息长度为 0x03(3) 字节 "},{"Tag":"li","content":"02 - TLS 版本长度为 0x02(2) 字节"},{"Tag":"li","content":"03 04 - 代表 TLS 1.3"}]}]]]}}]')}));
//# sourceMappingURL=tls-serverHello.47da0f5c.js.map
