{"mappings":"A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,Q,C,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAA,CAAM,w3C","sources":["<anon>","src/TLS12/clientKeyExchange.json"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nparcelRequire.register(\"iojZw\", function(module, exports) {\nmodule.exports = JSON.parse('[\"客户端现在可以算出自己的密钥。交换后，双方都可以根据私钥和交换过来的公钥生成共享的加密密钥了。\",{\"Tag\":\"p\",\"children\":[\"现在双方已经同意使用 ECDHE 的密码加解密算法(ServiceHello 的 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)。这意味着密钥对将基于选定的椭圆曲线(\",{\"Tag\":\"strong\",\"content\":\"E\"},\"lliptic \",{\"Tag\":\"strong\",\"content\":\"C\"},\"urve)，使用 \",{\"Tag\":\"strong\",\"content\":\"D\"},\"iffie-\",{\"Tag\":\"strong\",\"content\":\"H\"},\"ellman，并且密钥对是基于该次连接(\",{\"Tag\":\"strong\",\"content\":\"E\"},\"phemeral)，而不是使用证书上的公/私钥。\"]},{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"16 03 03 00 25\"},[\"TLS 会话被分解成 \\\\\"记录\\\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"},{\"Tag\":\"li\",\"content\":\"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"},{\"Tag\":\"li\",\"content\":\"00 25 - 紧接着的数组载荷长度 0x025(37) 字节\"}]}]],[\"TLS 握手记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"10 00 00 21\"},[\"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"10 - 握手消息类型 0x10 (client key exchange)\"},{\"Tag\":\"li\",\"content\":\"00 00 21 - 紧接着的握手消息数据的长度 0x021 (33) 字节\"}]}]],[\"客户端公钥\",{\"props\":{\"className\":\"bytes\"},\"content\":\"20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62 54\"},[\"\\\\\"客户端准备密钥交换\\\\\" 步骤中生成的公钥。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 20 - 公钥长度为 0x20(32) 字节\"},{\"Tag\":\"li\",\"content\":\"35 80 ... 62 54 - 公钥\"}]}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=clientKeyExchange.3fd6e6e2.js.map\n","[\n  \"客户端现在可以算出自己的密钥。交换后，双方都可以根据私钥和交换过来的公钥生成共享的加密密钥了。\",\n  {\n    \"Tag\": \"p\",\n    \"children\": [\n      \"现在双方已经同意使用 ECDHE 的密码加解密算法(ServiceHello 的 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)。这意味着密钥对将基于选定的椭圆曲线(\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"E\"\n      },\n      \"lliptic \",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"C\"\n      },\n      \"urve)，使用 \",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"D\"\n      },\n      \"iffie-\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"H\"\n      },\n      \"ellman，并且密钥对是基于该次连接(\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"E\"\n      },\n      \"phemeral)，而不是使用证书上的公/私钥。\"\n    ]\n  },\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 03 03 00 25\"\n          },\n          [\n            \"TLS 会话被分解成 \\\"记录\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 25 - 紧接着的数组载荷长度 0x025(37) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"TLS 握手记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"10 00 00 21\"\n          },\n          [\n            \"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"10 - 握手消息类型 0x10 (client key exchange)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 21 - 紧接着的握手消息数据的长度 0x021 (33) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"客户端公钥\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"20 35 80 72 d6 36 58 80 d1 ae ea 32 9a df 91 21 38 38 51 ed 21 a2 8e 3b 75 e9 65 d0 d2 cd 16 62 54\"\n          },\n          [\n            \"\\\"客户端准备密钥交换\\\" 步骤中生成的公钥。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 20 - 公钥长度为 0x20(32) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"35 80 ... 62 54 - 公钥\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["globalThis","self","window","global","register","module","exports","JSON","parse"],"version":3,"file":"clientKeyExchange.3fd6e6e2.js.map"}