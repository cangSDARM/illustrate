{"mappings":"A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,Q,C,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAA,CAAM,6xG","sources":["<anon>","src/TLS13/serverHello.json"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nparcelRequire.register(\"D3jym\", function(module, exports) {\nmodule.exports = JSON.parse('[\"服务器回复 \\\\\"ServerHello\\\\\"。服务器提供的信息包括以下内容：\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"服务器端随机数(在随后的握手时使用)\"},{\"Tag\":\"li\",\"content\":\"服务器端选择的加解密算法\"},{\"Tag\":\"li\",\"content\":\"服务器端密钥交换的公钥\"},{\"Tag\":\"li\",\"content\":\"服务器协商的具体协议的版本\"}]},{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"16 03 03 00 7a\"},[\"TLS 会话被分解成 \\\\\"记录\\\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"},{\"Tag\":\"li\",\"content\":\"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"},{\"Tag\":\"li\",\"content\":\"00 7a - 紧接着的数组载荷长度 0x7A(122) 字节\"}]}]],[\"TLS 握手记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"02 00 00 76\"},[\"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"02 - 握手消息类型 0x02 (ServerHello)\"},{\"Tag\":\"li\",\"content\":\"00 00 76 - 紧接着的握手消息数据的长度 0x76 (118) 字节\"}]}]],[\"服务器端 TLS 版本号\",{\"props\":{\"className\":\"bytes\"},\"content\":\"03 03\"},[\"协议版本为 \\\\\"3,3\\\\\"(指 TLS 1.2)。因为被广泛部署的中间件(middleboxes)并不允许他们不承认的协议版本，所以所有的 TLS 1.3 会话在这个字段中都以 TLS 1.2 版本表示。也因为如此，这个字段不再被使用，而是使用下面的 \\\\\"支持的版本\\\\\" 扩展来进行版本协商。\",\"而不寻常的版本号(\\\\\"3,3\\\\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\\\\"3,1\\\\\" 表示，TLS 1.1 用 \\\\\"3,2\\\\\"，以此类推。\"]],[\"服务器端随机数\",{\"props\":{\"className\":\"bytes\"},\"content\":\"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\"},[\"服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。\"]],[\"会话 ID\",{\"props\":{\"className\":\"bytes\"},\"content\":\"20 e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff\"},[\"在之前的 TLS 版本中，客户端可以提供一个之前会话的会话 ID。ID 可以让服务器端和客户端跳过协商新密钥的时间并减少其他潜在的成本。\",\"而在 TLS 1.3 中，这种 \\\\\"会话恢复\\\\\" 是通过更灵活的 PSK(预共享密钥) 机制完成的，所以这个字段不再被用于该目的。相反，这个字段的非空值被用来触发\\\\\"中间件兼容模式\\\\\"，这有助于将 TLS 1.3 会话伪装成正在尝试恢复的 TLS 1.2 会话。\",\"此时，服务器直接复制客户端的\\\\\"ID\\\\\"来填充这个字段。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"20 - 0x20(32) 字节的会话 ID\"},{\"Tag\":\"li\",\"content\":\"e0 e1 ... fe ff - 假的会话 ID\"}]}]],[\"所选择的加解密算法\",{\"props\":{\"className\":\"bytes\"},\"content\":\"13 02\"},[\"服务器从客户端给出的选项列表中选择的加解密算法 0x1302(TLS_AES_256_GCM_SHA384)。\"]],[\"压缩算法\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00\"},[\"服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。\"]],[\"扩展的长度\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 2e\"},[\"服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复 ClientHello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 2e - 扩展列表的长度为 0x2E(46) 字节\"}]},\"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。\"]],[\"扩展 - 支持的版本\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 2b 00 02 03 04\"},[\"服务器端表明其支持 TLS 1.3。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 2b - 表示这是 \\\\\"支持的版本\\\\\" 扩展\"},{\"Tag\":\"li\",\"content\":\"00 02 - 扩展信息长度为 0x02(2) 字节\"},{\"Tag\":\"li\",\"content\":\"03 04 - 代表 TLS 1.3\"}]}]],[\"扩展 - 算法公钥列表(Key Share)\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 33 00 24 00 1d 00 20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15\"},[\"服务器使用和客户端发送公钥时相同的算法发送一个自己的公钥。一旦这个被发送，加密密钥就可以被计算出来。其余的握手则将被加密。而不用像以前的协议版本，以透明的方式发送握手记录。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 33 - 表示这是 \\\\\"算法公钥列表\\\\\" 扩展\"},{\"Tag\":\"li\",\"content\":\"00 24 - 算法公钥列表长度为 0x24(36) 字节\"},{\"Tag\":\"li\",\"content\":\"00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)\"},{\"Tag\":\"li\",\"content\":\"00 20 - 公钥长度为 0x20(32) 字节\"},{\"Tag\":\"li\",\"content\":\"9f d7 ... b6 15 - \\\\\"服务器端准备密钥交换\\\\\" 步骤中生成的公钥\"}]}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=serverHello.74626606.js.map\n","[\n  \"服务器回复 \\\"ServerHello\\\"。服务器提供的信息包括以下内容：\",\n  {\n    \"Tag\": \"ul\",\n    \"children\": [\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端随机数(在随后的握手时使用)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端选择的加解密算法\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端密钥交换的公钥\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器协商的具体协议的版本\"\n      }\n    ]\n  },\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 03 03 00 7a\"\n          },\n          [\n            \"TLS 会话被分解成 \\\"记录\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 7a - 紧接着的数组载荷长度 0x7A(122) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"TLS 握手记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"02 00 00 76\"\n          },\n          [\n            \"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"02 - 握手消息类型 0x02 (ServerHello)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 76 - 紧接着的握手消息数据的长度 0x76 (118) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"服务器端 TLS 版本号\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"03 03\"\n          },\n          [\n            \"协议版本为 \\\"3,3\\\"(指 TLS 1.2)。因为被广泛部署的中间件(middleboxes)并不允许他们不承认的协议版本，所以所有的 TLS 1.3 会话在这个字段中都以 TLS 1.2 版本表示。也因为如此，这个字段不再被使用，而是使用下面的 \\\"支持的版本\\\" 扩展来进行版本协商。\",\n            \"而不寻常的版本号(\\\"3,3\\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\\"3,1\\\" 表示，TLS 1.1 用 \\\"3,2\\\"，以此类推。\"\n          ]\n        ],\n        [\n          \"服务器端随机数\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\"\n          },\n          [\n            \"服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。\"\n          ]\n        ],\n        [\n          \"会话 ID\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"20 e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff\"\n          },\n          [\n            \"在之前的 TLS 版本中，客户端可以提供一个之前会话的会话 ID。ID 可以让服务器端和客户端跳过协商新密钥的时间并减少其他潜在的成本。\",\n            \"而在 TLS 1.3 中，这种 \\\"会话恢复\\\" 是通过更灵活的 PSK(预共享密钥) 机制完成的，所以这个字段不再被用于该目的。相反，这个字段的非空值被用来触发\\\"中间件兼容模式\\\"，这有助于将 TLS 1.3 会话伪装成正在尝试恢复的 TLS 1.2 会话。\",\n            \"此时，服务器直接复制客户端的\\\"ID\\\"来填充这个字段。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"20 - 0x20(32) 字节的会话 ID\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"e0 e1 ... fe ff - 假的会话 ID\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"所选择的加解密算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"13 02\"\n          },\n          [\n            \"服务器从客户端给出的选项列表中选择的加解密算法 0x1302(TLS_AES_256_GCM_SHA384)。\"\n          ]\n        ],\n        [\n          \"压缩算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\"服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。\"]\n        ],\n        [\n          \"扩展的长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 2e\"\n          },\n          [\n            \"服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复 ClientHello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 2e - 扩展列表的长度为 0x2E(46) 字节\"\n                }\n              ]\n            },\n            \"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。\"\n          ]\n        ],\n        [\n          \"扩展 - 支持的版本\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 2b 00 02 03 04\"\n          },\n          [\n            \"服务器端表明其支持 TLS 1.3。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 2b - 表示这是 \\\"支持的版本\\\" 扩展\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 02 - 扩展信息长度为 0x02(2) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 04 - 代表 TLS 1.3\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"扩展 - 算法公钥列表(Key Share)\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 33 00 24 00 1d 00 20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15\"\n          },\n          [\n            \"服务器使用和客户端发送公钥时相同的算法发送一个自己的公钥。一旦这个被发送，加密密钥就可以被计算出来。其余的握手则将被加密。而不用像以前的协议版本，以透明的方式发送握手记录。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 33 - 表示这是 \\\"算法公钥列表\\\" 扩展\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 24 - 算法公钥列表长度为 0x24(36) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 1d - 代表 x25519 算法(例子中为通过 curve25519 算法进行密钥交换)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 20 - 公钥长度为 0x20(32) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"9f d7 ... b6 15 - \\\"服务器端准备密钥交换\\\" 步骤中生成的公钥\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["globalThis","self","window","global","register","module","exports","JSON","parse"],"version":3,"file":"serverHello.74626606.js.map"}