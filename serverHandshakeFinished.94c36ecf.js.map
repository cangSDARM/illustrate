{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAK,CAAC,y6I","sources":["<anon>","src/TLS12/serverHandshakeFinished.json"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"g1bPu\", function(module, exports) {\nmodule.exports = JSON.parse('[\"\\u4E3A\\u4E86\\u9A8C\\u8BC1\\u63E1\\u624B\\u6210\\u529F\\u4E14\\u6CA1\\u6709\\u88AB\\u7BE1\\u6539\\u8FC7\\uFF0C\\u670D\\u52A1\\u5668\\u7AEF\\u4E5F\\u9700\\u8981\\u521B\\u5EFA\\u4E00\\u4E9B\\u9A8C\\u8BC1\\u6570\\u636E\\u7ED9\\u5BA2\\u6237\\u7AEF\\u786E\\u8BA4\\u3002\\u9A8C\\u8BC1\\u6570\\u636E\\u662F\\u57FA\\u4E8E\\u6240\\u6709\\u63E1\\u624B\\u4FE1\\u606F\\u7684\\u54C8\\u5E0C\\u503C\\u8BA1\\u7B97\\u5F97\\u5230\\u3002\",\"\\u6B64\\u65F6\\u5F00\\u59CB\\u4F20\\u8F93\\u7684\\u670D\\u52A1\\u5668\\u7AEF\\u6570\\u636E\\u90FD\\u662F\\u52A0\\u5BC6\\u7684\\u5BC6\\u6587\\u4E86\\u3002\",{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"\\u8BB0\\u5F55\\u5934\",{\"props\":{\"className\":\"bytes\"},\"content\":\"16 03 03 00 40\"},[\"TLS \\u4F1A\\u8BDD\\u88AB\\u5206\\u89E3\\u6210 \\\\\"\\u8BB0\\u5F55\\\\\"(record) \\u7684\\u5F62\\u5F0F\\u53D1\\u9001\\u548C\\u63A5\\u6536\\u3002\\u8BB0\\u5F55\\u662F\\u5177\\u6709\\u7C7B\\u578B\\u3001\\u534F\\u8BAE\\u7248\\u672C\\u548C\\u957F\\u5EA6\\u7684\\u6570\\u636E\\u5757\\u3002\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"14 - \\u8868\\u793A TLS \\u8BB0\\u5F55\\u7C7B\\u578B 0x16(22, handshake)\"},{\"Tag\":\"li\",\"content\":\"03 03 - \\u534F\\u8BAE\\u7248\\u672C (3.3, \\u5373 TLS 1.2)\"},{\"Tag\":\"li\",\"content\":\"00 40 - \\u7D27\\u63A5\\u7740\\u7684\\u6570\\u7EC4\\u8F7D\\u8377\\u957F\\u5EA6 0x40(64) \\u5B57\\u8282\"}]}]],[\"\\u52A0\\u5BC6\\u5411\\u91CF\",{\"props\":{\"className\":\"bytes\"},\"content\":\"51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60\"},[\"\\u670D\\u52A1\\u5668\\u7AEF\\u53D1\\u9001\\u4E00\\u4E2A\\u7528\\u4E8E\\u89E3\\u5BC6\\u8FD9\\u4E2A\\u533A\\u5757\\u7684\\u521D\\u59CB\\u5316\\u5411\\u91CF\\u3002\\u56E0\\u4E3A\\u6211\\u4EEC\\u7684\\u6570\\u636E\\u662F\\u53EF\\u9884\\u6D4B\\u7684(we have overridden the rand function)\\uFF0C\\u56E0\\u6B64\\u5B83\\u4E5F\\u662F\\u4E00\\u4E2A\\u53EF\\u9884\\u6D4B\\u7684\\u5E8F\\u5217\\u3002\"]],[\"\\u52A0\\u5BC6\\u7684\\u6570\\u636E\\u8F7D\\u8377\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d\"},[\"\\u8FD9\\u4E2A\\u6570\\u636E\\u662F\\u7528\\u670D\\u52A1\\u5668\\u7AEF\\u7684\\u5199\\u65F6\\u5BC6\\u94A5\\u52A0\\u5BC6\\u7684\\u3002\\u56E0\\u4E3A\\u5B83\\u5305\\u542B\\u4E00\\u4E2A\\u6D88\\u606F\\u9A8C\\u8BC1\\u7801(MAC)\\u548C\\u586B\\u5145\\u5B57\\u8282\\uFF0C\\u6240\\u4EE5\\u5B83\\u6BD4\\u89E3\\u5BC6\\u540E\\u7684\\u6570\\u636E\\u8981\\u5927\\u4E00\\u622A\\u3002\"]]]}},{\"Tag\":\"Annotations\",\"props\":{\"data\":[[\"\",{\"props\":{\"className\":\"decryption-header\"},\"content\":\"\\u89E3\\u5BC6\\u540E\\u7684\\u6570\\u636E\\u8F7D\\u8377\"},[{\"Tag\":\"h4\",\"content\":\"\\u89E3\\u5BC6\"},\"\\u6570\\u636E\\u88AB \\\\\"\\u670D\\u52A1\\u5668\\u7AEF\\u751F\\u6210\\u4F1A\\u8BDD\\u5BC6\\u94A5\\\\\" \\u6B65\\u9AA4\\u4E2D\\u4EA7\\u751F\\u7684\\u5199\\u65F6\\u5BC6\\u94A5\\u548C\\u8BE5\\u8BB0\\u5F55\\u5F00\\u5934\\u6240\\u643A\\u5E26\\u7684\\u521D\\u59CB\\u5411\\u91CF(IVs)\\u52A0\\u5BC6\\u3002\",{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### server key\\\\n$ hexkey=752a18e7a9fcb7cbcdd8f98dd8f769eb\\\\n### IV for this record\\\\n$ hexiv=5152535455565758595a5b5c5d5e5f60\\\\n### encrypted data\\\\n$ echo \\'18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a\\'  > /tmp/msg1\\\\n$ echo \\'ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b\\' >> /tmp/msg1\\\\n$ echo \\'da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d\\' >> /tmp/msg1\\\\n$ xxd -r -p /tmp/msg1 \\\\\\\\\\\\n  | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\\\\n\\\\n0000000 14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\\\\n0000010 20 c4 97 46 d2 a3 0f 23 57 39 90 58 07 53 52 43\\\\n0000020 af f2 bf e0 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b\\\\n\\\\nThe last 32 bytes contain a 20-byte MAC and padding to bring the data to a\\\\nmultiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\\\\n\\\\n### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\\\\n$ sequence=\\'0000000000000000\\'\\\\n$ rechdr=\\'16 03 03\\'\\\\n$ datalen=\\'00 10\\'\\\\n$ data=\\'14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\\'\\\\n### from \\\\\"Encryption Keys Calculation\\\\\"\\\\n$ mackey=2ad8bdd8c601a617126f63540eb20906f781fad2\\\\n$ echo $sequence $rechdr $datalen $data | xxd -r -p \\\\\\\\\\\\n  | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\\\\n\\\\n20c49746d2a30f235739905807535243aff2bfe0\"}}]]]}},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"\\u63E1\\u624B\\u6D88\\u606F\\u5934\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"14 00 00 0c\"},[\"\\u6BCF\\u4E2A\\u63E1\\u624B\\u6D88\\u606F\\u90FD\\u4EE5\\u4E00\\u4E2A type \\u548C\\u4E00\\u4E2A len \\u5F00\\u59CB\\u3002\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"14 - \\u63E1\\u624B\\u6D88\\u606F\\u7C7B\\u578B 0x14 (finished)\"},{\"Tag\":\"li\",\"content\":\"00 00 0c - \\u7D27\\u63A5\\u7740\\u7684\\u63E1\\u624B\\u6D88\\u606F\\u6570\\u636E\\u7684\\u957F\\u5EA6 0x0C (12) \\u5B57\\u8282\"}]}]],[\"\\u9A8C\\u8BC1\\u6570\\u636E\",{\"props\":{\"className\":\"bytes encrypted\"},\"content\":\"84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\"},[\"\\u4F7F\\u7528 \\\\\"\\u670D\\u52A1\\u5668\\u7AEF\\u751F\\u6210\\u4F1A\\u8BDD\\u5BC6\\u94A5\\\\\" \\u6B65\\u9AA4\\u4E2D\\u7684\\u4E3B\\u5BC6\\u94A5\\u548C\\u5728\\u8FD9\\u4E4B\\u524D\\u7684\\u6BCF\\u4E2A\\u63E1\\u624B\\u8BB0\\u5F55(type=0x16)\\u7684 SHA256 \\u54C8\\u5E0C\\u503C\\u751F\\u6210\\u3002\",\"\\u8FD9\\u4E2A\\u54C8\\u5E0C\\u503C\\u5E94\\u8BE5\\u662F\\uFF1A\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"b2017ba28d0e27f03ae327456b6ff00b4d5bbf0ef7cda83ce1029b521c3e7c35\"}]},\"\\u8BA1\\u7B97\\u8FC7\\u7A0B\\u53CA\\u7ED3\\u679C\\uFF1A\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"seed = \\\\\"server finished\\\\\" + SHA256(all handshake messages)\\\\na0 = seed\\\\na1 = HMAC-SHA256(key=MasterSecret, data=a0)\\\\np1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\\\\nverify_data = p1[first 12 bytes]\"}]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### set up our MasterSecret as a hex string\\\\n$ mshex=$(hexdump -ve \\'/1 \\\\\"%02x\\\\\"\\' /tmp/mastersecret)\\\\n### build the seed\\\\n$ echo -en \\'server finished\\' > /tmp/seed\\\\n### add SHA256(all_messages) to seed\\\\n$ echo -en \\'\\\\\\\\xb2\\\\\\\\x01\\\\\\\\x7b\\\\\\\\xa2\\\\\\\\x8d\\\\\\\\x0e\\\\\\\\x27\\\\\\\\xf0\\' >> /tmp/seed\\\\n$ echo -en \\'\\\\\\\\x3a\\\\\\\\xe3\\\\\\\\x27\\\\\\\\x45\\\\\\\\x6b\\\\\\\\x6f\\\\\\\\xf0\\\\\\\\x0b\\' >> /tmp/seed\\\\n$ echo -en \\'\\\\\\\\x4d\\\\\\\\x5b\\\\\\\\xbf\\\\\\\\x0e\\\\\\\\xf7\\\\\\\\xcd\\\\\\\\xa8\\\\\\\\x3c\\' >> /tmp/seed\\\\n$ echo -en \\'\\\\\\\\xe1\\\\\\\\x02\\\\\\\\x9b\\\\\\\\x52\\\\\\\\x1c\\\\\\\\x3e\\\\\\\\x7c\\\\\\\\x35\\' >> /tmp/seed\\\\n### a0 is the same as the seed\\\\n$ cat /tmp/seed > /tmp/a0\\\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\\\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\\\\n$ head -c 12 /tmp/p1 > /tmp/verify_data\\\\n$ hexdump /tmp/verify_data\\\\n\\\\n0000000 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\"}}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=serverHandshakeFinished.94c36ecf.js.map\n","[\n  \"为了验证握手成功且没有被篡改过，服务器端也需要创建一些验证数据给客户端确认。验证数据是基于所有握手信息的哈希值计算得到。\",\n  \"此时开始传输的服务器端数据都是加密的密文了。\",\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 03 03 00 40\"\n          },\n          [\n            \"TLS 会话被分解成 \\\"记录\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"14 - 表示 TLS 记录类型 0x16(22, handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 40 - 紧接着的数组载荷长度 0x40(64) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"加密向量\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f 60\"\n          },\n          [\n            \"服务器端发送一个用于解密这个区块的初始化向量。因为我们的数据是可预测的(we have overridden the rand function)，因此它也是一个可预测的序列。\"\n          ]\n        ],\n        [\n          \"加密的数据载荷\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d\"\n          },\n          [\n            \"这个数据是用服务器端的写时密钥加密的。因为它包含一个消息验证码(MAC)和填充字节，所以它比解密后的数据要大一截。\"\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"data\": [\n        [\n          \"\",\n          {\n            \"props\": {\n              \"className\": \"decryption-header\"\n            },\n            \"content\": \"解密后的数据载荷\"\n          },\n          [\n            { \"Tag\": \"h4\", \"content\": \"解密\" },\n            \"数据被 \\\"服务器端生成会话密钥\\\" 步骤中产生的写时密钥和该记录开头所携带的初始向量(IVs)加密。\",\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### server key\\n$ hexkey=752a18e7a9fcb7cbcdd8f98dd8f769eb\\n### IV for this record\\n$ hexiv=5152535455565758595a5b5c5d5e5f60\\n### encrypted data\\n$ echo '18 e0 75 31 7b 10 03 15 f6 08 1f cb f3 13 78 1a'  > /tmp/msg1\\n$ echo 'ac 73 ef e1 9f e2 5b a1 af 59 c2 0b e9 4f c0 1b' >> /tmp/msg1\\n$ echo 'da 2d 68 00 29 8b 73 a7 e8 49 d7 4b d4 94 cf 7d' >> /tmp/msg1\\n$ xxd -r -p /tmp/msg1 \\\\\\n  | openssl enc -d -nopad -aes-128-cbc -K $hexkey -iv $hexiv | hexdump\\n\\n0000000 14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\\n0000010 20 c4 97 46 d2 a3 0f 23 57 39 90 58 07 53 52 43\\n0000020 af f2 bf e0 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b 0b\\n\\nThe last 32 bytes contain a 20-byte MAC and padding to bring the data to a\\nmultiple of 16 bytes.  The 20-byte MAC can be reproduced as follows:\\n\\n### from https://tools.ietf.org/html/rfc2246#section-6.2.3.1\\n$ sequence='0000000000000000'\\n$ rechdr='16 03 03'\\n$ datalen='00 10'\\n$ data='14 00 00 0c 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e'\\n### from \\\"Encryption Keys Calculation\\\"\\n$ mackey=2ad8bdd8c601a617126f63540eb20906f781fad2\\n$ echo $sequence $rechdr $datalen $data | xxd -r -p \\\\\\n  | openssl dgst -sha1 -mac HMAC -macopt hexkey:$mackey\\n\\n20c49746d2a30f235739905807535243aff2bfe0\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"握手消息头\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"14 00 00 0c\"\n          },\n          [\n            \"每个握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"14 - 握手消息类型 0x14 (finished)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 0c - 紧接着的握手消息数据的长度 0x0C (12) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"验证数据\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\"\n          },\n          [\n            \"使用 \\\"服务器端生成会话密钥\\\" 步骤中的主密钥和在这之前的每个握手记录(type=0x16)的 SHA256 哈希值生成。\",\n            \"这个哈希值应该是：\",\n            {\n              \"Tag\": \"pre\",\n              \"children\": [\n                {\n                  \"Tag\": \"code\",\n                  \"props\": { \"className\": \"longboi\" },\n                  \"content\": \"b2017ba28d0e27f03ae327456b6ff00b4d5bbf0ef7cda83ce1029b521c3e7c35\"\n                }\n              ]\n            },\n            \"计算过程及结果：\",\n            {\n              \"Tag\": \"pre\",\n              \"children\": [\n                {\n                  \"Tag\": \"code\",\n                  \"props\": { \"className\": \"longboi\" },\n                  \"content\": \"seed = \\\"server finished\\\" + SHA256(all handshake messages)\\na0 = seed\\na1 = HMAC-SHA256(key=MasterSecret, data=a0)\\np1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\\nverify_data = p1[first 12 bytes]\"\n                }\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### set up our MasterSecret as a hex string\\n$ mshex=$(hexdump -ve '/1 \\\"%02x\\\"' /tmp/mastersecret)\\n### build the seed\\n$ echo -en 'server finished' > /tmp/seed\\n### add SHA256(all_messages) to seed\\n$ echo -en '\\\\xb2\\\\x01\\\\x7b\\\\xa2\\\\x8d\\\\x0e\\\\x27\\\\xf0' >> /tmp/seed\\n$ echo -en '\\\\x3a\\\\xe3\\\\x27\\\\x45\\\\x6b\\\\x6f\\\\xf0\\\\x0b' >> /tmp/seed\\n$ echo -en '\\\\x4d\\\\x5b\\\\xbf\\\\x0e\\\\xf7\\\\xcd\\\\xa8\\\\x3c' >> /tmp/seed\\n$ echo -en '\\\\xe1\\\\x02\\\\x9b\\\\x52\\\\x1c\\\\x3e\\\\x7c\\\\x35' >> /tmp/seed\\n### a0 is the same as the seed\\n$ cat /tmp/seed > /tmp/a0\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\\n$ head -c 12 /tmp/p1 > /tmp/verify_data\\n$ hexdump /tmp/verify_data\\n\\n0000000 84 4d 3c 10 74 6d d7 22 f9 2f 0c 7e\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","JSON","parse"],"version":3,"file":"serverHandshakeFinished.94c36ecf.js.map"}