{"mappings":"A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,Q,C,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAA,CAAM,63F","sources":["<anon>","src/TLS12/serverHello.json"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nparcelRequire.register(\"gYVPa\", function(module, exports) {\nmodule.exports = JSON.parse('[\"服务器回复 \\\\\"ServerHello\\\\\"。服务器提供的信息包括以下内容：\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"服务器协商的具体协议的版本\"},{\"Tag\":\"li\",\"content\":\"服务器端随机数(在随后的握手时使用)\"},{\"Tag\":\"li\",\"content\":\"会话 ID\"},{\"Tag\":\"li\",\"content\":\"服务器端选择的加解密算法\"},{\"Tag\":\"li\",\"content\":\"服务器端选择的压缩算法\"},{\"Tag\":\"li\",\"content\":\"服务器协商的扩展信息\"}]},{\"Tag\":\"AnnotationToggler\"},{\"Tag\":\"Annotations\",\"props\":{\"type\":\"record-data\",\"data\":[[\"记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"16 03 03 00 31\"},[\"TLS 会话被分解成 \\\\\"记录\\\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"},{\"Tag\":\"li\",\"content\":\"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"},{\"Tag\":\"li\",\"content\":\"00 31 - 紧接着的数组载荷长度 0x31(49) 字节\"}]}]],[\"TLS 握手记录头\",{\"props\":{\"className\":\"bytes\"},\"content\":\"02 00 00 2d\"},[\"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"02 - 握手消息类型 0x02 (ServerHello)\"},{\"Tag\":\"li\",\"content\":\"00 00 2d - 紧接着的握手消息数据的长度 0x2D (45) 字节\"}]}]],[\"服务器端 TLS 版本号\",{\"props\":{\"className\":\"bytes\"},\"content\":\"03 03\"},[\"表明服务器端所支持的 TLS 版本 3,3 (TLS 1.2)。\",\"不寻常的版本号(\\\\\"3,3\\\\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\\\\"3,1\\\\\" 表示，TLS 1.1用 \\\\\"3,2\\\\\"，以此类推。\"]],[\"服务器端随机数\",{\"props\":{\"className\":\"bytes\"},\"content\":\"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\"},[\"服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。\",{\"children\":[\"TLS 1.2 规范说，前 4 个字节应该是自 1970 年以来的秒数。但现在\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://tools.ietf.org/html/draft-mathewson-no-gmtunixtime-00\"},\"content\":\"已建议不要这样做\"},\"，因为这样可以对主机和服务器进行\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://nmap.org/nmap-fingerprinting-article-tw.html\"},\"content\":\"指纹识别\"},\"。\"]}]],[\"会话 ID\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00\"},[\"服务器端可以给该 TLS 会话分配一个 会话 ID，使得客户端可以在之后的协商中恢复这一会话。要做到这一点，服务器端和客户端都需要存储之前连接的密钥信息。恢复连接可以节省大量的计算和网络往返时间，所以只要有可能就会执行。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 - 0 字节的会话 ID\"}]}]],[\"所选择的加解密算法\",{\"props\":{\"className\":\"bytes\"},\"content\":\"c0 13\"},[\"服务器从客户端给出的选项列表中选择的加解密算法 0xC013(TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)。\"]],[\"压缩算法\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00\"},[\"服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。\"]],[\"扩展的长度\",{\"props\":{\"className\":\"bytes\"},\"content\":\"00 05\"},[\"服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复 ClientHello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"00 05 - 扩展列表的长度为 0x05(5) 字节\"}]},\"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。\"]],[\"扩展 - 重协商信息(Renegotiation Info)\",{\"props\":{\"className\":\"bytes\"},\"content\":\"ff 01 00 01 00\"},[{\"children\":[\"这个扩展的存在防止了\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://blog.csdn.net/edmond999/article/details/53007991\"},\"content\":\"一种用 TLS 重协商进行的攻击(Renegotiating TLS)\"},\"。之后的 TLS 版本(如 TLS 1.3)由于完全移除了重协商的功能，因此这个扩展也不会出现。\"]},{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"ff 01 - 表示这是 \\\\\"重协商信息\\\\\" 扩展\"},{\"Tag\":\"li\",\"content\":\"00 01 - 扩展信息长度为 0x01(1) 字节 \"},{\"Tag\":\"li\",\"content\":\"00 - 重协商的长度为 0x0(0) 字节，因为这是一个全新连接\"}]}]]]}}]');\n\n});\n\n\n//# sourceMappingURL=serverHello.eaf832b0.js.map\n","[\n  \"服务器回复 \\\"ServerHello\\\"。服务器提供的信息包括以下内容：\",\n  {\n    \"Tag\": \"ul\",\n    \"children\": [\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器协商的具体协议的版本\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端随机数(在随后的握手时使用)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"会话 ID\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端选择的加解密算法\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端选择的压缩算法\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器协商的扩展信息\"\n      }\n    ]\n  },\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 03 03 00 31\"\n          },\n          [\n            \"TLS 会话被分解成 \\\"记录\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 31 - 紧接着的数组载荷长度 0x31(49) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"TLS 握手记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"02 00 00 2d\"\n          },\n          [\n            \"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"02 - 握手消息类型 0x02 (ServerHello)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 00 2d - 紧接着的握手消息数据的长度 0x2D (45) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"服务器端 TLS 版本号\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"03 03\"\n          },\n          [\n            \"表明服务器端所支持的 TLS 版本 3,3 (TLS 1.2)。\",\n            \"不寻常的版本号(\\\"3,3\\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\\"3,1\\\" 表示，TLS 1.1用 \\\"3,2\\\"，以此类推。\"\n          ]\n        ],\n        [\n          \"服务器端随机数\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f\"\n          },\n          [\n            \"服务器端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。\",\n            {\n              \"children\": [\n                \"TLS 1.2 规范说，前 4 个字节应该是自 1970 年以来的秒数。但现在\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://tools.ietf.org/html/draft-mathewson-no-gmtunixtime-00\"\n                  },\n                  \"content\": \"已建议不要这样做\"\n                },\n                \"，因为这样可以对主机和服务器进行\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://nmap.org/nmap-fingerprinting-article-tw.html\"\n                  },\n                  \"content\": \"指纹识别\"\n                },\n                \"。\"\n              ]\n            }\n          ]\n        ],\n        [\n          \"会话 ID\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\n            \"服务器端可以给该 TLS 会话分配一个 会话 ID，使得客户端可以在之后的协商中恢复这一会话。要做到这一点，服务器端和客户端都需要存储之前连接的密钥信息。恢复连接可以节省大量的计算和网络往返时间，所以只要有可能就会执行。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - 0 字节的会话 ID\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"所选择的加解密算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"c0 13\"\n          },\n          [\n            \"服务器从客户端给出的选项列表中选择的加解密算法 0xC013(TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)。\"\n          ]\n        ],\n        [\n          \"压缩算法\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\"服务器从客户端给出的选项列表中选择的压缩算法 0x00(null)。\"]\n        ],\n        [\n          \"扩展的长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 05\"\n          },\n          [\n            \"服务器向客户端返回的扩展有序列表的长度。因为服务器被禁止回复 ClientHello 消息中不存在的扩展，因此服务器知道客户端将理解并支持列出的所有扩展。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 05 - 扩展列表的长度为 0x05(5) 字节\"\n                }\n              ]\n            },\n            \"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。\"\n          ]\n        ],\n        [\n          \"扩展 - 重协商信息(Renegotiation Info)\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"ff 01 00 01 00\"\n          },\n          [\n            {\n              \"children\": [\n                \"这个扩展的存在防止了\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://blog.csdn.net/edmond999/article/details/53007991\"\n                  },\n                  \"content\": \"一种用 TLS 重协商进行的攻击(Renegotiating TLS)\"\n                },\n                \"。之后的 TLS 版本(如 TLS 1.3)由于完全移除了重协商的功能，因此这个扩展也不会出现。\"\n              ]\n            },\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"ff 01 - 表示这是 \\\"重协商信息\\\" 扩展\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 01 - 扩展信息长度为 0x01(1) 字节 \"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - 重协商的长度为 0x0(0) 字节，因为这是一个全新连接\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["globalThis","self","window","global","register","module","exports","JSON","parse"],"version":3,"file":"serverHello.eaf832b0.js.map"}