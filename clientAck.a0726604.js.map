{"mappings":"mMAAAA,EAAAC,QAAiBC,KAAKC,MAAM,m/J","sources":["src/QUIC/clientAck.json"],"sourcesContent":["[\n  \"客户端再发送一个 \\\"初始\\\" 的数据包。其中包含服务器的最后一个 \\\"初始\\\" 数据包的 ACK。\",\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"数据包头字节\",\n          {\n            \"props\": {\n              \"className\": \"bytes protected\",\n              \"title\": \"被数据包头保护密钥加密\"\n            },\n            \"content\": \"cf\"\n          },\n          {\n            \"props\": {\n              \"className\": \"bytes unprotected\"\n            },\n            \"content\": \"c0\"\n          },\n          [\n            \"数据包以一个头字节开始，该字节应用了头保护。头部保护用于隐藏数据包序号和其他信息，使其不被外界观察到。\",\n            \"包头保护是通过用\\\"数据包头保护密钥\\\"对每个数据包的有效载荷的样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行异或(XOR)操作得到的。对于像这样的\\\"长\\\"格式数据包，受保护的部分是这个字节的低 4 位，以及数据包编号的字节（见下文）。\",\n            \"这里有一个关于如何计算出加密头字节的例子：\",\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### \\\"client header protection key\\\" from handshake keys calc step above\\n$ key=6df4e9d737cdf714711d7c617ee82981\\n### sample is taken from 16 bytes of payload starting\\n### 4 bytes past the first byte of the packet number\\n$ sample=ed1f7b0555cdb783fbdf5b52724b7d29\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p\\n\\n8f57c29e79\\n\\n### first byte of result is xor'd into lower 4 bits of this byte,\\n### remaining bytes are xor'd one-for-one into the bytes of\\n### the packet number (which in this packet is only one byte)\"\n              }\n            },\n            \"解密出的字节 0xC0 中的位有以下含义：\",\n            {\n              \"Tag\": \"Table\",\n              \"props\": {\n                \"headers\": [\"\", \"值\", \"含义\"],\n                \"data\": [\n                  [\"高位\", \"1\", \"Long Header 格式\"],\n                  [\"\", \"1\", \"固定位(总是被置1)\"],\n                  [\"\", \"00\", \"数据包类型：初始化\"],\n                  [\"\", \"00\", \"保留(总是被置0)\"],\n                  [\n                    \"低位\",\n                    \"00\",\n                    \"数据包序号长度(表示下面的 \\\"数据包序号\\\" 将有一个字节的长度，默认值)\"\n                  ]\n                ]\n              }\n            }\n          ]\n        ],\n        [\n          \"QUIC 版本号\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00 00 00 01\"\n          },\n          [\"QUIC的版本是：0x1\"]\n        ],\n        [\n          \"目的地连接标识 ID\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"05 73 5f 63 69 64\"\n          },\n          [\n            \"服务器的标识 ID (服务器端的源连接标识 ID)\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"05 - 紧跟着的目的地连接标识 ID 的长度\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"73 5f 63 69 64 - 实际的目的地连接标识 ID(\\\"s_cid\\\")\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"源连接标识 ID\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"05 63 5f 63 69 64\"\n          },\n          [\n            \"客户端使用这个字段来表明它选择的传输给服务器的源连接标识 ID。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"05 - 紧跟着的源连接标识 ID 的长度(5bytes)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"63 5f 63 69 64 - 实际的源连接标识 ID (\\\"c_cid\\\")\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"令牌\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"00\"\n          },\n          [\n            \"客户端在某些情况下可以使用这个字段来提供服务器所要求的令牌，例如证明其连接尝试不是欺骗。此时，没有令牌需要提供，该字段为空。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - 紧跟着的令牌长度(0bytes)\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"数据包长度\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"40 17\"\n          },\n          [\n            \"客户端表示数据包中有多少字节的加密有效载荷。这个字段是一个长度可变的整数——第一个字节的前两位表示该整数中总共有多少个字节。\",\n            \"此时，第一个字节以 \\\"0 1\\\"(0x4)这两个位开始，表示该整数共两个字节。其余的位给出数字 0x17，表示 23 个字节的有效载荷。\"\n          ]\n        ],\n        [\n          \"数据包序号\",\n          {\n            \"props\": {\n              \"className\": \"bytes protected\",\n              \"title\": \"被数据包头保护密钥加密\"\n            },\n            \"content\": \"56\"\n          },\n          {\n            \"props\": {\n              \"className\": \"bytes unprotected\"\n            },\n            \"content\": \"01\"\n          },\n          [\n            \"该字节应用了头保护。详见 \\\"数据包头字节\\\"。\",\n            \"这个字节的未受保护的值为 0x01，表明它是第 1 号包，或者说是客户端发送的第二个\\\"初始\\\"包。\",\n            \"这个数据也有可能被截断。发送端点通过几个步骤截断：①计算已发送的最高的序号和未确认的最低的序号之间的差值；②出于安全考虑将差值加倍并四舍五入；③计算它在明确表示两端之间的序号的前提下可以从序号的高位删除的字节数；④截断编码后的数据包序号直至长度满足该字节数。而接收端点根据会它最近看到的数据包号码填入完整的序号。\",\n            {\n              \"children\": [\n                \"由于我们的例子对话发送的数据包很小(少于 64 个字节)，所以这种截断不会在本文中出现。详情见 \",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1\"\n                  },\n                  \"content\": \"RFC 9000\"\n                },\n                \"。\"\n              ]\n            }\n          ]\n        ],\n        [\n          \"加密的数据载荷\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\",\n              \"title\": \"被\\\"初始密钥\\\"加密\"\n            },\n            \"content\": \"6e 1f 98 ed 1f 7b\"\n          },\n          [\"这些数据使用客户端的\\\"初始密钥\\\"进行加密。\"]\n        ],\n        [\n          \"AEAD 鉴别标签\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"05 55 cd b7 83 fb df 5b 52 72 4b 7d 29 f0 af e3\"\n          },\n          [\n            {\n              \"children\": [\n                \"这是 \",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://zhuanlan.zhihu.com/p/28566058\"\n                  },\n                  \"content\": \"AEAD 算法\"\n                },\n                \"的鉴别标签，确认加密数据和数据包头的完整性。它由加密算法产生，并由解密算法消耗。\"\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"data\": [\n        [\n          \"\",\n          {\n            \"props\": {\n              \"className\": \"decryption-header\"\n            },\n            \"content\": \"解密后的数据载荷\"\n          },\n          [\n            { \"Tag\": \"h4\", \"content\": \"解密\" },\n            \"数据被 \\\"客户端初始密钥计算\\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 1。\",\n            \"数据包开头的 21 字节还会作为解密过程解密成功时必须满足的认证条件。\",\n            {\n              \"children\": [\n                \"openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://quic.xargs.org/files/aes_128_gcm_decrypt.c\"\n                  },\n                  \"content\": \"解密\"\n                },\n                \"和\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://quic.xargs.org/files/aes_128_gcm_encrypt.c\"\n                  },\n                  \"content\": \"加密\"\n                },\n                \"这些数据。\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### from the \\\"Initial Keys Calc\\\" step\\n$ key=b14b918124fda5c8d79847602fa3520b\\n$ iv=ddbc15dea80925a55686a7df\\n### from this record\\n$ recdata=c00000000105735f63696405635f63696400401701\\n$ authtag=0555cdb783fbdf5b52724b7d29f0afe3\\n$ recordnum=1\\n### may need to add -I and -L flags for include and lib dirs\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\n\\n00000000  02 00 40 81 00 00                                 |..@...|\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"ACK 帧\",\n          {\n            \"props\": {\n              \"className\": \"bytes encrypted\"\n            },\n            \"content\": \"02 00 40 81 00 00\"\n          },\n          [\n            \"服务器确认收到客户端的初始数据包0。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"02 - 表明帧类型 ACK\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - largest_acknowledged: 被确认的最大数据包\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"children\": [\n                    \"40 81 - ack_delay: 变长的整数。给出这个 ack 被延迟发送的时间，单位是微秒。\",\n                    \"通过计算式子：2\",\n                    {\n                      \"Tag\": \"sup\",\n                      \"content\": \"ack_delay_exponent\"\n                    },\n                    \" 得到。其中 ack_delay_exponent = 129 * 8 = 1,032 (µseconds)。\"\n                  ]\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - ack_range_count: 额外的 ACK 帧数据长度 0x(0)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 - first_ack_range: 可变长度的整数。给出在 largest_acknowledged 之前被确认过的数据包数量。\"\n                }\n              ]\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["module","exports","JSON","parse"],"version":3,"file":"clientAck.a0726604.js.map"}