(0,globalThis.parcelRequire7f38.register)("h7Mws",function(t,n){t.exports=JSON.parse('["例子中的会话以 \\"ClientHello\\" 开始。客户端提供的信息包括以下内容：",{"Tag":"ul","children":[{"Tag":"li","content":"协议版本号"},{"Tag":"li","content":"客户端随机数(用于之后的握手过程)"},{"Tag":"li","content":"一个用于快速回复(resume)的\\"会话 ID\\""},{"Tag":"li","content":"一个客户端支持的有序的加解密算法数组"},{"Tag":"li","content":"一个客户端支持的有序的压缩算法数组"},{"Tag":"li","content":"扩展列表"}]},{"Tag":"AnnotationToggler"},{"Tag":"Annotations","props":{"type":"record-data","data":[["记录头",{"props":{"className":"bytes"},"content":"16 03 01 00 a5"},["TLS 会话被分解成 \\"记录\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。",{"Tag":"ul","children":[{"Tag":"li","content":"16 - 表示 TLS 记录类型 0x16(22, Handshake)"},{"Tag":"li","content":"03 01 - 协议版本 (3.1, 即 TLS 1.0)"},{"Tag":"li","content":"00 a5 - 紧接着的数组载荷长度 0xA5(165) 字节"}]},{"children":["有趣的是，这里的版本号并不是预期的 3.3(TLS 1.2)，而是 3.1(TLS 1.0)。在 golang 的",{"Tag":"code","content":"crypto/tls"},"中有以下注释可能会解释其原因："]},{"Tag":"CodeSample","props":{"code":"if vers == 0 {\\n    // Some TLS servers fail if the record version is\\n    // greater than TLS 1.0 for the initial ClientHello.\\n    vers = VersionTLS10\\n}"}}]],["TLS 握手记录头",{"props":{"className":"bytes"},"content":"01 00 00 a1"},["每个 TLS 握手消息都以一个 type 和一个 len 开始。",{"Tag":"ul","children":[{"Tag":"li","content":"01 - 握手消息类型 0x01 (ClientHello)"},{"Tag":"li","content":"00 00 a1 - 紧接着的握手消息数据的长度 0xA1 (161) 字节"}]}]],["客户端 TLS 版本号",{"props":{"className":"bytes"},"content":"03 03"},["指出版本号为 3.3 (TLS 1.2)","不寻常的版本号(\\"3,3\\" 代表 TLS 1.2)是由于 TLS 1.0 是 SSL 3.0 协议的一个小修订。因此，TLS 1.0 用 \\"3,1\\" 表示，TLS 1.1用 \\"3,2\\"，以此类推。"]],["客户端随机数",{"props":{"className":"bytes"},"content":"00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f"},["客户端提供的 32 字节的随机数。这个数将在之后的会话中使用。在本文的例子中，我们暂时将一个方便记忆的字符串当作随机数。",{"children":["TLS 1.2 规范说，前 4 个字节应该是自 1970 年以来的秒数。但现在",{"Tag":"a","props":{"href":"https://tools.ietf.org/html/draft-mathewson-no-gmtunixtime-00"},"content":"已建议不要这样做"},"，因为这样可以对主机和服务器进行",{"Tag":"a","props":{"href":"https://nmap.org/nmap-fingerprinting-article-tw.html"},"content":"指纹识别"},"。"]}]],["会话 ID",{"props":{"className":"bytes"},"content":"00"},["客户端可以提供旧连接的 TLS 会话 ID，它能够恢复之前的会话。要做到这一点，服务器端和客户端都需要存储之前连接的密钥信息。恢复连接可以节省大量的计算和网络往返时间，所以只要有可能就会执行。",{"Tag":"ul","children":[{"Tag":"li","content":"00 - 0 字节的会话 ID"}]}]],["加解密算法列表",{"props":{"className":"bytes"},"content":"00 20 cc a8 cc a9 c0 2f c0 30 c0 2b c0 2c c0 13 c0 09 c0 14 c0 0a 00 9c 00 9d 00 2f 00 35 c0 12 00 0a"},["客户端提供一个有序的列表，以说明它支持哪些加解密算法进行加密。该列表是按照客户端的偏好顺序排列的，以最高偏好为先。",{"Tag":"ul","children":[{"Tag":"li","content":"00 20 - 0x20(32) 字节的加解密算法列表数据"},{"Tag":"li","content":"cc a8 ... 00 0a - 代表一连串的加解密算法"}]},{"children":["完整加解密算法列表请查看 ",{"Tag":"a","props":{"href":"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml"},"content":"IANA tls-parameters"}," 的 TLS Cipher Suites 部分。"]}]],["压缩算法",{"props":{"className":"bytes"},"content":"01 00"},["客户端提供一个有序的列表，说明它将支持哪些压缩方法。压缩将在加密步骤之前(因为加密的数据通常是不可压缩的)。",{"Tag":"ul","children":[{"Tag":"li","content":"01 - 1 字节的压缩算法长度"},{"Tag":"li","content":"00 - 代表 \\"没有\\"(null) 压缩算法"}]},{"children":["由于最近压缩被发现会泄露加密数据的信息(见 ",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/333314023"},"content":"CRIME/BREACH 攻击"},")。","因此之后的 TLS 版本(如 TLS 1.3)将禁用压缩。出于安全考虑，TLS 1.2 的客户端也应禁用压缩。"]}]],["扩展的长度",{"props":{"className":"bytes"},"content":"00 58"},["客户端提供了一个可选的扩展列表，服务器可以根据它来采取某些行动或启用某些特性。",{"Tag":"ul","children":[{"Tag":"li","content":"00 58 - 扩展列表的长度为 0x58(88) 字节"}]},"每个扩展将以两个字节开始，表明它是哪个扩展。然后是两个字节的内容长度字段，最后是扩展的具体内容。"]],["扩展 - 服务器名称指示",{"props":{"className":"bytes"},"content":"00 00 00 18 00 16 00 00 13 65 78 61 6d 70 6c 65 2e 75 6c 66 68 65 69 6d 2e 6e 65 74"},["(例子中的)客户端提供了它想要联系的服务器的名称，也被称为 SNI(服务器名称指示)。","如果没有这个扩展，HTTPS 服务器将无法为一个 IP 地址上的多个主机名(虚拟主机)提供服务。因为它在 TLS 会话协商结束、HTTP 请求发出后才知道要发送哪个主机名的证书。",{"Tag":"ul","children":[{"Tag":"li","content":"00 00 - 表示这是 \\"服务器名称指示\\" 扩展"},{"Tag":"li","content":"00 18 - 扩展信息长度为 0x18(24) 字节 "},{"Tag":"li","content":"00 16 - 第一个(也是唯一的)列表条目长度为 0x16(22) 字节"},{"Tag":"li","content":"00 - 0x00 表示这是 \\"主机名\\" 列表"},{"Tag":"li","content":"00 13 - 主机名列表的长度为 0x13(19) 字节"},{"Tag":"li","content":"65 78 61 ... 6e 65 74 - 主机名：\\"example.ulfheim.net\\""}]}]],["扩展 - 证书状态请求",{"props":{"className":"bytes"},"content":"00 05 00 05 01 00 00 00 00"},["客户端要求服务器在其响应中提供 OCSP(Offensive Security Certified Professional certification) 信息提供许可。OCSP 可用于检查证书是否已被撤销。","客户端此时会发送一个空内容的扩展。而这种形式是必要的，因为服务器不能使用客户没有提供的扩展来回复。因此，客户端需要先发送一个空的扩展内容，而服务器则会填充对应数据，并按对应扩展进行回复。",{"Tag":"ul","children":[{"Tag":"li","content":"00 05 - 表示这是 \\"证书状态请求\\" 扩展"},{"Tag":"li","content":"00 05 - 扩展信息长度为 0x5(5) 字节 "},{"Tag":"li","content":"01 - 表示 \\"证书状态类型\\"：OSCP"},{"Tag":"li","content":"00 00 - responderID (OSCP 的字段) 长度为 0 字节"},{"Tag":"li","content":"00 00 - 表示 OSCP 的内容长度为 0 字节"}]}]],["扩展 - 支持的组",{"props":{"className":"bytes"},"content":"00 0a 00 0a 00 08 00 1d 00 17 00 18 00 19"},["(例子中的)客户端表示它支持四种类型的椭圆曲线算法(ECC)。为了使这个扩展更加通用，未来可以支持其他的密码学类型，因此称这些为 \\"支持的组\\" 而不是 \\"支持的曲线\\"。","这个列表同样是按照客户端的偏好降序排列的。",{"Tag":"ul","children":[{"Tag":"li","content":"00 0a - 表示这是 \\"支持的组\\" 扩展"},{"Tag":"li","content":"00 0a - 扩展信息长度为 0x0a(10) 字节 "},{"Tag":"li","content":"00 08 - 曲线列表条目长度为 0x08(8) 字节"},{"Tag":"li","content":"00 1d - 代表 x25519 曲线"},{"Tag":"li","content":"00 17 - 代表 secp256r1 曲线"},{"Tag":"li","content":"00 18 - 代表 secp384r1 曲线"},{"Tag":"li","content":"00 19 - 代表 secp521r1 曲线"}]}]],["扩展 - 椭圆曲线参数指示(EC Point Formats)",{"props":{"className":"bytes"},"content":"00 0b 00 02 01 00"},["在椭圆曲线(EC)加密过程中，客户端和服务器通过这个扩展协商椭圆曲线相关的信息(如选择的起始点和是否压缩)。此时该扩展表示客户端只能从服务器解析未压缩的信息。","在后续的 TLS 版本中(如 TLS 1.3)，不存在协商点的能力(相反，每条曲线都有一个预选的点)，所以这个扩展并不起实质性作用。(更多内容请参考 TLS 1.3 的内容)",{"Tag":"ul","children":[{"Tag":"li","content":"00 0b - 表示这是 \\"椭圆曲线参数指示\\" 扩展"},{"Tag":"li","content":"00 02 - 扩展信息长度为 0x02(2) 字节 "},{"Tag":"li","content":"01 - 指示长度为 0x01(1) 字节"},{"Tag":"li","content":"00 - 表示未压缩"}]}]],["扩展 - 签名算法列表",{"props":{"className":"bytes"},"content":"00 0d 00 12 00 10 04 01 04 03 05 01 05 03 06 01 06 03 02 01 02 03"},["随着 TLS 的发展，有必要支持更强大的签名算法，如 SHA-256；同时也必须向前兼容，以支持使用 MD5 和 SHA1 的实现。因此需要有一个扩展来表示客户端支持哪些签名算法。这可能会影响到服务器提交给客户端的证书，以及服务器在 CertificateVerify 记录中发送的签名。","这个列表同样是按照客户端的偏好降序排列的。",{"Tag":"ul","children":[{"Tag":"li","content":"00 0d - 表示这是 \\"签名算法列表\\" 扩展"},{"Tag":"li","content":"00 12 - 扩展信息长度为 0x12(18) 字节 "},{"Tag":"li","content":"00 10 - 算法列表长度为 0x10(16) 字节"},{"Tag":"li","content":"04 01 - 代表 RSA/PKCS1/SHA256 算法"},{"Tag":"li","content":"04 03 - 代表 ECDSA/SECP256r1/SHA256 算法"},{"Tag":"li","content":"05 01 - 代表 RSA/PKCS1/SHA384 算法"},{"Tag":"li","content":"05 03 - 代表 ECDSA/SECP384r1/SHA384 算法"},{"Tag":"li","content":"06 01 - 代表 RSA/PKCS1/SHA512 算法"},{"Tag":"li","content":"06 03 - 代表 ECDSA/SECP521r1/SHA512 算法"},{"Tag":"li","content":"02 01 - 代表 RSA/PKCS1/SHA1 算法"},{"Tag":"li","content":"02 03 - 代表 ECDSA/SHA1 算法"}]}]],["扩展 - 重协商信息(Renegotiation Info)",{"props":{"className":"bytes"},"content":"ff 01 00 01 00"},[{"children":["这个扩展的存在防止了",{"Tag":"a","props":{"href":"https://blog.csdn.net/edmond999/article/details/53007991"},"content":"一种用 TLS 重协商进行的攻击(Renegotiating TLS)"},"。之后的 TLS 版本(如 TLS 1.3)由于完全移除了重协商的功能，因此这个扩展也不会出现。"]},{"Tag":"ul","children":[{"Tag":"li","content":"ff 01 - 表示这是 \\"重协商信息\\" 扩展"},{"Tag":"li","content":"00 01 - 扩展信息长度为 0x01(1) 字节 "},{"Tag":"li","content":"00 - 重协商的长度为 0x0(0) 字节，因为这是一个全新连接"}]}]],["扩展 - SCT 编码",{"props":{"className":"bytes"},"content":"00 12 00 00"},[{"children":["客户端为服务器返回 SCT 信息(已签名的证书时间戳, signed certificate timestamp)提供许可。SCT 用于支持 ",{"Tag":"a","props":{"href":"https://imququ.com/post/certificate-transparency.html"},"content":"CT 技术(证书透明, Certificate Transparency)"},"。"]},"客户端此时会发送一个空内容的扩展。而这种形式是必要的，因为服务器不能使用客户没有提供的扩展来回复。因此，客户端需要先发送一个空的扩展内容，而服务器则会填充对应数据，并按对应扩展进行回复。",{"Tag":"ul","children":[{"Tag":"li","content":"00 12 - 表示这是 \\"SCT 编码\\" 扩展"},{"Tag":"li","content":"00 00 - 扩展信息长度为 0x00(0) 字节 "}]}]]]}}]')});
//# sourceMappingURL=clientHello.0b506110.js.map
