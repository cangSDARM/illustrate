{"mappings":"A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,ECAA,EAAA,OAAA,CAAiB,KAAK,KAAK,CAAC,8uO","sources":["<anon>","src/TLS12/serverEncryptionKeysGeneration.json"],"sourcesContent":["\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire7f38\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"dcBIr\", function(module, exports) {\nmodule.exports = JSON.parse('[\"\\u670D\\u52A1\\u5668\\u7AEF\\u73B0\\u5728\\u4E5F\\u53EF\\u4EE5\\u8BA1\\u7B97\\u5E94\\u7528\\u4F1A\\u8BDD\\u65F6\\u7684\\u5BC6\\u94A5\\u4E86\\u3002\\u5728\\u8FD9\\u4E2A\\u8BA1\\u7B97\\u4E2D\\uFF0C\\u670D\\u52A1\\u5668\\u7AEF\\u4F7F\\u7528\\u4E86\\u4EE5\\u4E0B\\u4FE1\\u606F\\uFF1A\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"content\":\"\\u670D\\u52A1\\u5668\\u7AEF\\u968F\\u673A\\u6570(ServerHello)\"},{\"Tag\":\"li\",\"content\":\"\\u5BA2\\u6237\\u7AEF\\u968F\\u673A\\u6570(ClientHello)\"},{\"Tag\":\"li\",\"content\":\"\\u5BA2\\u6237\\u7AEF\\u516C\\u94A5(\\u5BA2\\u6237\\u7AEF\\u5BC6\\u94A5\\u4EA4\\u6362)\"},{\"Tag\":\"li\",\"content\":\"\\u670D\\u52A1\\u5668\\u7AEF\\u79C1\\u94A5(\\u670D\\u52A1\\u5668\\u7AEF\\u51C6\\u5907\\u5BC6\\u94A5\\u4EA4\\u6362)\"}]},\"\\u670D\\u52A1\\u5668\\u7AEF\\u4F7F\\u7528 curve25519 \\u5C06\\u5BA2\\u6237\\u7AEF\\u516C\\u94A5\\u4E58\\u4EE5\\u81EA\\u5DF1\\u7684\\u79C1\\u94A5\\u3002\\u8BE5 32 \\u5B57\\u8282\\u7684\\u7ED3\\u679C\\u4E3A(\\u79F0\\u4E3A PreMasterSecret)\\uFF1A\",{\"Tag\":\"pre\",\"props\":{\"className\":\"ind2\"},\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624\"}]},{\"children\":[\"\\u4E5F\\u53EF\\u4EE5\\u4F7F\\u7528\\u539F\\u4F5C\\u8005\\u63D0\\u4F9B\\u7684\",{\"Tag\":\"a\",\"props\":{\"href\":\"https://tls12.xargs.org/files/curve25519-mult.c\"},\"content\":\"\\u5DE5\\u5177\"},\"\\u5FEB\\u901F\\u8BA1\\u7B97\\uFF1A\"]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"$ gcc -o curve25519-mult curve25519-mult.c\\\\n$ ./curve25519-mult server-ephemeral-private.key \\\\\\\\\\\\n                    client-ephemeral-public.key | hexdump\\\\n\\\\n0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad\\\\n0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24\"}},\"\\u8FD9\\u4E0E\\u5BA2\\u6237\\u7AEF\\u8BA1\\u7B97\\u5F97\\u5230\\u7684 PreMasterSecret \\u662F\\u4E00\\u81F4\\u7684\\uFF0C\\u56E0\\u6B64\\u4E0B\\u9762\\u7684\\u8BA1\\u7B97\\u4E5F\\u4E00\\u6837\\u3002\",\"\\u7136\\u540E\\uFF0C\\u670D\\u52A1\\u5668\\u7AEF\\u9700\\u8981\\u4F7F\\u7528\\u4EE5\\u4E0B\\u65B9\\u6CD5\\u4ECE PreMasterSecret \\u4E2D\\u8BA1\\u7B97\\u51FA 48 \\u5B57\\u8282\\u7684\\u4E3B\\u5BC6\\u94A5(MasterSecret)\\uFF1A\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"seed = \\\\\"master secret\\\\\" + client_random + server_random\\\\na0 = seed\\\\na1 = HMAC-SHA256(key=PreMasterSecret, data=a0)\\\\na2 = HMAC-SHA256(key=PreMasterSecret, data=a1)\\\\np1 = HMAC-SHA256(key=PreMasterSecret, data=a1 + seed)\\\\np2 = HMAC-SHA256(key=PreMasterSecret, data=a2 + seed)\\\\nMasterSecret = p1[all 32 bytes] + p2[first 16 bytes]\"}]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### set up our PreMasterSecret as a hex string\\\\n$ pmshex=df4a291baa1eb7cfa6934b29b474baad\\\\n$ pmshex=${pmshex}2697e29f1f920dcc77c8a0a088447624\\\\n### client random from Client Hello\\\\n$ echo -en \\'\\\\\\\\x00\\\\\\\\x01\\\\\\\\x02\\\\\\\\x03\\\\\\\\x04\\\\\\\\x05\\\\\\\\x06\\\\\\\\x07\\' >  /tmp/c_rand\\\\n$ echo -en \\'\\\\\\\\x08\\\\\\\\x09\\\\\\\\x0a\\\\\\\\x0b\\\\\\\\x0c\\\\\\\\x0d\\\\\\\\x0e\\\\\\\\x0f\\' >> /tmp/c_rand\\\\n$ echo -en \\'\\\\\\\\x10\\\\\\\\x11\\\\\\\\x12\\\\\\\\x13\\\\\\\\x14\\\\\\\\x15\\\\\\\\x16\\\\\\\\x17\\' >> /tmp/c_rand\\\\n$ echo -en \\'\\\\\\\\x18\\\\\\\\x19\\\\\\\\x1a\\\\\\\\x1b\\\\\\\\x1c\\\\\\\\x1d\\\\\\\\x1e\\\\\\\\x1f\\' >> /tmp/c_rand\\\\n### server random from Server Hello\\\\n$ echo -en \\'\\\\\\\\x70\\\\\\\\x71\\\\\\\\x72\\\\\\\\x73\\\\\\\\x74\\\\\\\\x75\\\\\\\\x76\\\\\\\\x77\\' >  /tmp/s_rand\\\\n$ echo -en \\'\\\\\\\\x78\\\\\\\\x79\\\\\\\\x7a\\\\\\\\x7b\\\\\\\\x7c\\\\\\\\x7d\\\\\\\\x7e\\\\\\\\x7f\\' >> /tmp/s_rand\\\\n$ echo -en \\'\\\\\\\\x80\\\\\\\\x81\\\\\\\\x82\\\\\\\\x83\\\\\\\\x84\\\\\\\\x85\\\\\\\\x86\\\\\\\\x87\\' >> /tmp/s_rand\\\\n$ echo -en \\'\\\\\\\\x88\\\\\\\\x89\\\\\\\\x8a\\\\\\\\x8b\\\\\\\\x8c\\\\\\\\x8d\\\\\\\\x8e\\\\\\\\x8f\\' >> /tmp/s_rand\\\\n### build the seed\\\\n$ echo -en \\'master secret\\' > /tmp/seed\\\\n$ cat /tmp/c_rand /tmp/s_rand >> /tmp/seed\\\\n### a0 is the same as the seed\\\\n$ cat /tmp/seed > /tmp/a0\\\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a1\\\\n$ cat /tmp/a1 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a2\\\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p1\\\\n$ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p2\\\\n### first 48 bytes is MasterSecret\\\\n$ cat /tmp/p1 /tmp/p2 | head -c 48 > /tmp/mastersecret\\\\n$ hexdump /tmp/mastersecret\\\\n\\\\n0000000 91 6a bf 9d a5 59 73 e1 36 14 ae 0a 3f 5d 3f 37\\\\n0000010 b0 23 ba 12 9a ee 02 cc 91 34 33 81 27 cd 70 49\\\\n0000020 78 1c 8e 19 fc 1e b2 a7 38 7a c0 6a e2 37 34 4c\"}},\"\\u8BA1\\u7B97\\u51FA\\u7684\\u4E3B\\u5BC6\\u94A5\\u5E94\\u662F\\uFF1A\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"916abf9da55973e13614ae0a3f5d3f37b023ba129aee02cc9134338127cd7049781c8e19fc1eb2a7387ac06ae237344c\"}]},\"\\u7136\\u540E\\uFF0C\\u6211\\u4EEC\\u4F7F\\u7528\\u5BC6\\u94A5\\u6269\\u5C55\\u7B97\\u6CD5(Key Expansion)\\u751F\\u6210\\u6700\\u7EC8\\u7684\\u52A0\\u5BC6\\u5BC6\\u94A5\\uFF1A\",{\"Tag\":\"pre\",\"children\":[{\"Tag\":\"code\",\"props\":{\"className\":\"longboi\"},\"content\":\"seed = \\\\\"key expansion\\\\\" + server_random + client_random\\\\na0 = seed\\\\na1 = HMAC-SHA256(key=MasterSecret, data=a0)\\\\na2 = HMAC-SHA256(key=MasterSecret, data=a1)\\\\na3 = HMAC-SHA256(key=MasterSecret, data=a2)\\\\na4 = ...\\\\np1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\\\\np2 = HMAC-SHA256(key=MasterSecret, data=a2 + seed)\\\\np3 = HMAC-SHA256(key=MasterSecret, data=a3 + seed)\\\\np4 = ...\\\\np = p1 + p2 + p3 + p4 ...\\\\nclient write mac key = [first 20 bytes of p]\\\\nserver write mac key = [next 20 bytes of p]\\\\nclient write key = [next 16 bytes of p]\\\\nserver write key = [next 16 bytes of p]\\\\nclient write IV = [next 16 bytes of p]\\\\nserver write IV = [next 16 bytes of p]\"}]},{\"Tag\":\"CodeSample\",\"props\":{\"code\":\"### continued from above command line example\\\\n### set up our MasterSecret as a hex string\\\\n$ mshex=$(hexdump -ve \\'/1 \\\\\"%02x\\\\\"\\' /tmp/mastersecret)\\\\n### build the seed\\\\n$ echo -en \\'key expansion\\' > /tmp/seed\\\\n$ cat /tmp/s_rand /tmp/c_rand >> /tmp/seed\\\\n### a0 is the same as the seed\\\\n$ cat /tmp/seed > /tmp/a0\\\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\\\\n$ cat /tmp/a1 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a2\\\\n$ cat /tmp/a2 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a3\\\\n$ cat /tmp/a3 | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a4\\\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\\\\n$ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p2\\\\n$ cat /tmp/a3 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p3\\\\n$ cat /tmp/a4 /tmp/seed | openssl dgst -sha256 \\\\\\\\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p4\\\\n$ cat /tmp/p1 /tmp/p2 /tmp/p3 /tmp/p4 > /tmp/p\\\\n$ dd if=/tmp/p of=/tmp/client_mac_key bs=1 skip=0  count=20\\\\n$ dd if=/tmp/p of=/tmp/server_mac_key bs=1 skip=20 count=20\\\\n$ dd if=/tmp/p of=/tmp/client_key     bs=1 skip=40 count=16\\\\n$ dd if=/tmp/p of=/tmp/server_key     bs=1 skip=56 count=16\\\\n$ dd if=/tmp/p of=/tmp/client_iv      bs=1 skip=72 count=16\\\\n$ dd if=/tmp/p of=/tmp/server_iv      bs=1 skip=88 count=16\\\\n$ hexdump /tmp/client_mac_key\\\\n0000000 1b 7d 11 7c 7d 5f 69 0b c2 63 ca e8 ef 60 af 0f\\\\n0000010 18 78 ac c2\\\\n\\\\n$ hexdump /tmp/server_mac_key\\\\n0000000 2a d8 bd d8 c6 01 a6 17 12 6f 63 54 0e b2 09 06\\\\n0000010 f7 81 fa d2\\\\n\\\\n$ hexdump /tmp/client_key\\\\n0000000 f6 56 d0 37 b1 73 ef 3e 11 16 9f 27 23 1a 84 b6\\\\n\\\\n$ hexdump /tmp/server_key\\\\n0000000 75 2a 18 e7 a9 fc b7 cb cd d8 f9 8d d8 f7 69 eb\\\\n\\\\n$ hexdump /tmp/client_iv\\\\n0000000 a0 d2 55 0c 92 38 ee bf ef 5c 32 25 1a bb 67 d6\\\\n\\\\n$ hexdump /tmp/server_iv\\\\n0000000 43 45 28 db 49 37 d5 40 d3 93 13 5e 06 a1 1b b8\"}},\"\\u7531\\u6B64\\u6211\\u4EEC\\u53EF\\u4EE5\\u5F97\\u5230\\u4EE5\\u4E0B\\u5BC6\\u94A5\\u4EE5\\u53CA\\u5411\\u91CF\\uFF1A\",{\"Tag\":\"ul\",\"children\":[{\"Tag\":\"li\",\"children\":[\"\\u5BA2\\u6237\\u7AEF MAC \\u5BC6\\u94A5: \",{\"Tag\":\"code\",\"content\":\"1b7d117c7d5f690bc263cae8ef60af0f1878acc2\"}]},{\"Tag\":\"li\",\"children\":[\"\\u5BA2\\u6237\\u7AEF\\u5199\\u65F6\\u5BC6\\u94A5: \",{\"Tag\":\"code\",\"content\":\"f656d037b173ef3e11169f27231a84b6\"}]},{\"Tag\":\"li\",\"children\":[\"\\u5BA2\\u6237\\u7AEF\\u5199\\u65F6\\u5411\\u91CF: \",{\"Tag\":\"code\",\"content\":\"a0d2550c9238eebfef5c32251abb67d6\"}]},{\"Tag\":\"li\",\"children\":[\"\\u670D\\u52A1\\u5668\\u7AEF MAC \\u5BC6\\u94A5: \",{\"Tag\":\"code\",\"content\":\"2ad8bdd8c601a617126f63540eb20906f781fad2\"}]},{\"Tag\":\"li\",\"children\":[\"\\u670D\\u52A1\\u5668\\u7AEF\\u5199\\u65F6\\u5BC6\\u94A5: \",{\"Tag\":\"code\",\"content\":\"752a18e7a9fcb7cbcdd8f98dd8f769eb\"}]},{\"Tag\":\"li\",\"children\":[\"\\u670D\\u52A1\\u5668\\u7AEF\\u5199\\u65F6\\u5411\\u91CF: \",{\"Tag\":\"code\",\"content\":\"434528db4937d540d393135e06a11bb8\"}]}]}]');\n\n});\n\n\n//# sourceMappingURL=serverEncryptionKeysGeneration.a0da3bca.js.map\n","[\n  \"服务器端现在也可以计算应用会话时的密钥了。在这个计算中，服务器端使用了以下信息：\",\n  {\n    \"Tag\": \"ul\",\n    \"children\": [\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端随机数(ServerHello)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"客户端随机数(ClientHello)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"客户端公钥(客户端密钥交换)\"\n      },\n      {\n        \"Tag\": \"li\",\n        \"content\": \"服务器端私钥(服务器端准备密钥交换)\"\n      }\n    ]\n  },\n  \"服务器端使用 curve25519 将客户端公钥乘以自己的私钥。该 32 字节的结果为(称为 PreMasterSecret)：\",\n  {\n    \"Tag\": \"pre\",\n    \"props\": {\n      \"className\": \"ind2\"\n    },\n    \"children\": [\n      {\n        \"Tag\": \"code\",\n        \"props\": { \"className\": \"longboi\" },\n        \"content\": \"df4a291baa1eb7cfa6934b29b474baad2697e29f1f920dcc77c8a0a088447624\"\n      }\n    ]\n  },\n  {\n    \"children\": [\n      \"也可以使用原作者提供的\",\n      {\n        \"Tag\": \"a\",\n        \"props\": {\n          \"href\": \"https://tls12.xargs.org/files/curve25519-mult.c\"\n        },\n        \"content\": \"工具\"\n      },\n      \"快速计算：\"\n    ]\n  },\n  {\n    \"Tag\": \"CodeSample\",\n    \"props\": {\n      \"code\": \"$ gcc -o curve25519-mult curve25519-mult.c\\n$ ./curve25519-mult server-ephemeral-private.key \\\\\\n                    client-ephemeral-public.key | hexdump\\n\\n0000000 df 4a 29 1b aa 1e b7 cf a6 93 4b 29 b4 74 ba ad\\n0000010 26 97 e2 9f 1f 92 0d cc 77 c8 a0 a0 88 44 76 24\"\n    }\n  },\n  \"这与客户端计算得到的 PreMasterSecret 是一致的，因此下面的计算也一样。\",\n  \"然后，服务器端需要使用以下方法从 PreMasterSecret 中计算出 48 字节的主密钥(MasterSecret)：\",\n  {\n    \"Tag\": \"pre\",\n    \"children\": [\n      {\n        \"Tag\": \"code\",\n        \"props\": { \"className\": \"longboi\" },\n        \"content\": \"seed = \\\"master secret\\\" + client_random + server_random\\na0 = seed\\na1 = HMAC-SHA256(key=PreMasterSecret, data=a0)\\na2 = HMAC-SHA256(key=PreMasterSecret, data=a1)\\np1 = HMAC-SHA256(key=PreMasterSecret, data=a1 + seed)\\np2 = HMAC-SHA256(key=PreMasterSecret, data=a2 + seed)\\nMasterSecret = p1[all 32 bytes] + p2[first 16 bytes]\"\n      }\n    ]\n  },\n  {\n    \"Tag\": \"CodeSample\",\n    \"props\": {\n      \"code\": \"### set up our PreMasterSecret as a hex string\\n$ pmshex=df4a291baa1eb7cfa6934b29b474baad\\n$ pmshex=${pmshex}2697e29f1f920dcc77c8a0a088447624\\n### client random from Client Hello\\n$ echo -en '\\\\x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\\\\x06\\\\x07' >  /tmp/c_rand\\n$ echo -en '\\\\x08\\\\x09\\\\x0a\\\\x0b\\\\x0c\\\\x0d\\\\x0e\\\\x0f' >> /tmp/c_rand\\n$ echo -en '\\\\x10\\\\x11\\\\x12\\\\x13\\\\x14\\\\x15\\\\x16\\\\x17' >> /tmp/c_rand\\n$ echo -en '\\\\x18\\\\x19\\\\x1a\\\\x1b\\\\x1c\\\\x1d\\\\x1e\\\\x1f' >> /tmp/c_rand\\n### server random from Server Hello\\n$ echo -en '\\\\x70\\\\x71\\\\x72\\\\x73\\\\x74\\\\x75\\\\x76\\\\x77' >  /tmp/s_rand\\n$ echo -en '\\\\x78\\\\x79\\\\x7a\\\\x7b\\\\x7c\\\\x7d\\\\x7e\\\\x7f' >> /tmp/s_rand\\n$ echo -en '\\\\x80\\\\x81\\\\x82\\\\x83\\\\x84\\\\x85\\\\x86\\\\x87' >> /tmp/s_rand\\n$ echo -en '\\\\x88\\\\x89\\\\x8a\\\\x8b\\\\x8c\\\\x8d\\\\x8e\\\\x8f' >> /tmp/s_rand\\n### build the seed\\n$ echo -en 'master secret' > /tmp/seed\\n$ cat /tmp/c_rand /tmp/s_rand >> /tmp/seed\\n### a0 is the same as the seed\\n$ cat /tmp/seed > /tmp/a0\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a1\\n$ cat /tmp/a1 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/a2\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p1\\n$ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$pmshex -binary > /tmp/p2\\n### first 48 bytes is MasterSecret\\n$ cat /tmp/p1 /tmp/p2 | head -c 48 > /tmp/mastersecret\\n$ hexdump /tmp/mastersecret\\n\\n0000000 91 6a bf 9d a5 59 73 e1 36 14 ae 0a 3f 5d 3f 37\\n0000010 b0 23 ba 12 9a ee 02 cc 91 34 33 81 27 cd 70 49\\n0000020 78 1c 8e 19 fc 1e b2 a7 38 7a c0 6a e2 37 34 4c\"\n    }\n  },\n  \"计算出的主密钥应是：\",\n  {\n    \"Tag\": \"pre\",\n    \"children\": [\n      {\n        \"Tag\": \"code\",\n        \"props\": { \"className\": \"longboi\" },\n        \"content\": \"916abf9da55973e13614ae0a3f5d3f37b023ba129aee02cc9134338127cd7049781c8e19fc1eb2a7387ac06ae237344c\"\n      }\n    ]\n  },\n  \"然后，我们使用密钥扩展算法(Key Expansion)生成最终的加密密钥：\",\n  {\n    \"Tag\": \"pre\",\n    \"children\": [\n      {\n        \"Tag\": \"code\",\n        \"props\": { \"className\": \"longboi\" },\n        \"content\": \"seed = \\\"key expansion\\\" + server_random + client_random\\na0 = seed\\na1 = HMAC-SHA256(key=MasterSecret, data=a0)\\na2 = HMAC-SHA256(key=MasterSecret, data=a1)\\na3 = HMAC-SHA256(key=MasterSecret, data=a2)\\na4 = ...\\np1 = HMAC-SHA256(key=MasterSecret, data=a1 + seed)\\np2 = HMAC-SHA256(key=MasterSecret, data=a2 + seed)\\np3 = HMAC-SHA256(key=MasterSecret, data=a3 + seed)\\np4 = ...\\np = p1 + p2 + p3 + p4 ...\\nclient write mac key = [first 20 bytes of p]\\nserver write mac key = [next 20 bytes of p]\\nclient write key = [next 16 bytes of p]\\nserver write key = [next 16 bytes of p]\\nclient write IV = [next 16 bytes of p]\\nserver write IV = [next 16 bytes of p]\"\n      }\n    ]\n  },\n  {\n    \"Tag\": \"CodeSample\",\n    \"props\": {\n      \"code\": \"### continued from above command line example\\n### set up our MasterSecret as a hex string\\n$ mshex=$(hexdump -ve '/1 \\\"%02x\\\"' /tmp/mastersecret)\\n### build the seed\\n$ echo -en 'key expansion' > /tmp/seed\\n$ cat /tmp/s_rand /tmp/c_rand >> /tmp/seed\\n### a0 is the same as the seed\\n$ cat /tmp/seed > /tmp/a0\\n### a(n) is hmac-sha256(key=secret, data=a(n-1))\\n$ cat /tmp/a0 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a1\\n$ cat /tmp/a1 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a2\\n$ cat /tmp/a2 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a3\\n$ cat /tmp/a3 | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/a4\\n### p(n) is hmac-sha256(key=secret, data=a(n)+seed)\\n$ cat /tmp/a1 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p1\\n$ cat /tmp/a2 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p2\\n$ cat /tmp/a3 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p3\\n$ cat /tmp/a4 /tmp/seed | openssl dgst -sha256 \\\\\\n   -mac HMAC -macopt hexkey:$mshex -binary > /tmp/p4\\n$ cat /tmp/p1 /tmp/p2 /tmp/p3 /tmp/p4 > /tmp/p\\n$ dd if=/tmp/p of=/tmp/client_mac_key bs=1 skip=0  count=20\\n$ dd if=/tmp/p of=/tmp/server_mac_key bs=1 skip=20 count=20\\n$ dd if=/tmp/p of=/tmp/client_key     bs=1 skip=40 count=16\\n$ dd if=/tmp/p of=/tmp/server_key     bs=1 skip=56 count=16\\n$ dd if=/tmp/p of=/tmp/client_iv      bs=1 skip=72 count=16\\n$ dd if=/tmp/p of=/tmp/server_iv      bs=1 skip=88 count=16\\n$ hexdump /tmp/client_mac_key\\n0000000 1b 7d 11 7c 7d 5f 69 0b c2 63 ca e8 ef 60 af 0f\\n0000010 18 78 ac c2\\n\\n$ hexdump /tmp/server_mac_key\\n0000000 2a d8 bd d8 c6 01 a6 17 12 6f 63 54 0e b2 09 06\\n0000010 f7 81 fa d2\\n\\n$ hexdump /tmp/client_key\\n0000000 f6 56 d0 37 b1 73 ef 3e 11 16 9f 27 23 1a 84 b6\\n\\n$ hexdump /tmp/server_key\\n0000000 75 2a 18 e7 a9 fc b7 cb cd d8 f9 8d d8 f7 69 eb\\n\\n$ hexdump /tmp/client_iv\\n0000000 a0 d2 55 0c 92 38 ee bf ef 5c 32 25 1a bb 67 d6\\n\\n$ hexdump /tmp/server_iv\\n0000000 43 45 28 db 49 37 d5 40 d3 93 13 5e 06 a1 1b b8\"\n    }\n  },\n  \"由此我们可以得到以下密钥以及向量：\",\n  {\n    \"Tag\": \"ul\",\n    \"children\": [\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"客户端 MAC 密钥: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"1b7d117c7d5f690bc263cae8ef60af0f1878acc2\"\n          }\n        ]\n      },\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"客户端写时密钥: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"f656d037b173ef3e11169f27231a84b6\"\n          }\n        ]\n      },\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"客户端写时向量: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"a0d2550c9238eebfef5c32251abb67d6\"\n          }\n        ]\n      },\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"服务器端 MAC 密钥: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"2ad8bdd8c601a617126f63540eb20906f781fad2\"\n          }\n        ]\n      },\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"服务器端写时密钥: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"752a18e7a9fcb7cbcdd8f98dd8f769eb\"\n          }\n        ]\n      },\n      {\n        \"Tag\": \"li\",\n        \"children\": [\n          \"服务器端写时向量: \",\n          {\n            \"Tag\": \"code\",\n            \"content\": \"434528db4937d540d393135e06a11bb8\"\n          }\n        ]\n      }\n    ]\n  }\n]\n"],"names":["parcelRequire","$parcel$global","globalThis","register","module","exports","JSON","parse"],"version":3,"file":"serverEncryptionKeysGeneration.a0da3bca.js.map"}