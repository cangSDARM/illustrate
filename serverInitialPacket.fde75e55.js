(0,globalThis.parcelRequire7f38.register)("hBH85",function(e,t){e.exports=JSON.parse('["服务器以一个 \\"初始\\" 数据包作为回应。这个数据包包含 \\"ServerHello\\" 的 TLS 记录，用于继续 TLS 1.3 加密会话的协商。",{"Tag":"AnnotationToggler"},{"Tag":"Annotations","props":{"type":"record-data","data":[["数据包头字节",{"props":{"className":"bytes protected","title":"被数据包头保护密钥加密"},"content":"cd"},{"props":{"className":"bytes unprotected"},"content":"c0"},["数据包以一个头字节开始，该字节应用了头保护。头部保护用于隐藏数据包序号和其他信息，使其不被外界观察到。","包头保护是通过用\\"数据包头保护密钥\\"对每个数据包的有效载荷的样本进行加密，然后将每个数据包中的某些比特和字节与所得数据进行异或(XOR)操作得到的。对于像这样的\\"长\\"格式数据包，受保护的部分是这个字节的低 4 位，以及数据包序号的字节（见下文）。","这里有一个关于如何计算出加密头字节的例子：",{"Tag":"CodeSample","props":{"code":"### \\"server header protection key\\" from calc step above\\n$ key=440b2725e91dc79b370711ef792faa3d\\n### sample is taken from 16 bytes of payload starting\\n### 4 bytes past the first byte of the packet number\\n$ sample=d5d9c823d07c616882ca770279249864\\n$ echo $sample | xxd -r -p | openssl aes-128-ecb -K $key | head -c 5 | xxd -p\\n\\n4d3acc3988\\n\\n### first byte of result is xor\'d into lower 4 bits of this byte,\\n### remaining bytes are xor\'d one-for-one into the bytes of\\n### the packet number (which in this packet is only one byte)"}},"解密出的字节 0xC0 中的位有以下含义：",{"Tag":"Table","props":{"headers":["","值","含义"],"data":[["高位","1","Long Header 格式"],["","1","固定位(总是被置1)"],["","00","数据包类型：初始化"],["","00","保留(总是被置0)"],["低位","00","数据包序号长度(表示下面的 \\"数据包序号\\" 将有一个字节的长度，默认值)"]]}}]],["QUIC 版本号",{"props":{"className":"bytes"},"content":"00 00 00 01"},["QUIC的版本是：0x1"]],["目的地连接标识 ID",{"props":{"className":"bytes"},"content":"05 63 5f 63 69 64"},["服务器回传客户端的标识 ID (客户端的源连接标识 ID)。",{"Tag":"ul","children":[{"Tag":"li","content":"05 - 紧跟着的目的地连接标识 ID 的长度(8bytes)"},{"Tag":"li","content":"63 5f 63 69 64 - 实际的目的地连接标识 (\\"c_cid\\")"}]}]],["源连接标识 ID",{"props":{"className":"bytes"},"content":"05 73 5f 63 69 64"},["服务器使用这个字段来向客户端表示它所选择的连接 ID。",{"Tag":"ul","children":[{"Tag":"li","content":"05 - 紧跟着的源连接标识 ID 的长度(5bytes)"},{"Tag":"li","content":"73 5f 63 69 64 - 实际的源连接标识 ID (\\"s_cid\\")"}]}]],["令牌",{"props":{"className":"bytes"},"content":"00"},["该字段在服务器响应中未使用。",{"Tag":"ul","children":[{"Tag":"li","content":"00 - 紧跟着的令牌长度(0bytes)"}]}]],["数据包长度",{"props":{"className":"bytes"},"content":"40 75"},["服务器端表示数据包中有多少字节的加密有效载荷。这个字段是一个长度可变的整数——第一个字节的前两位表示该整数中总共有多少个字节。","此时，第一个字节以 \\"0 1\\"(0x4)这两个位开始，表示该整数共两个字节。其余的位给出数字 0x75，表示 117 个字节的有效载荷。"]],["数据包序号",{"props":{"className":"bytes protected","title":"被数据包头保护密钥加密"},"content":"3a"},{"props":{"className":"bytes unprotected"},"content":"00"},["该字节应用了头保护。详见 \\"数据包头字节\\"。","这个字节的未受保护的值为 0x00，表明它是第 0 号包，或者说是服务器端发送的第一个\\"初始\\"包。","这个数据也有可能被截断。发送端点通过几个步骤截断：①计算已发送的最高的序号和未确认的最低的序号之间的差值；②出于安全考虑将差值加倍并四舍五入；③计算它在明确表示两端之间的序号的前提下可以从序号的高位删除的字节数；④截断编码后的数据包序号直至长度满足该字节数。而接收端点根据会它最近看到的数据包号码填入完整的序号。",{"children":["由于我们的例子对话发送的数据包很小(少于 64 个字节)，所以这种截断不会在本文中出现。详情见 ",{"Tag":"a","props":{"href":"https://www.rfc-editor.org/rfc/rfc9000.html#section-17.1"},"content":"RFC 9000"},"。"]}]],["加密的数据载荷",{"props":{"className":"bytes encrypted","title":"被\\"初始密钥\\"加密"},"content":"83 68 55 d5 d9 c8 23 d0 7c 61 68 82 ca 77 02 79 24 98 64 b5 56 e5 16 32 25 7e 2d 8a b1 fd 0d c0 4b 18 b9 20 3f b9 19 d8 ef 5a 33 f3 78 a6 27 db 67 4d 3c 7f ce 6c a5 bb 3e 8c f9 01 09 cb b9 55 66 5f c1 a4 b9 3d 05 f6 eb 83 25 2f 66 31 bc ad c7 40 2c 10 f6 5c 52 ed 15 b4 42 9c 9f 64 d8 4d 64 fa 40 6c"},["这些数据使用服务器端的\\"初始密钥\\"进行加密。"]],["AEAD 鉴别标签",{"props":{"className":"bytes"},"content":"f0 b5 17 a9 26 d6 2a 54 a9 29 41 36 b1 43 b0 33"},[{"children":["这是 ",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/28566058"},"content":"AEAD 算法"},"的鉴别标签，用以确认加密数据和数据包头的完整性。它由加密算法产生，并由解密算法消耗。"]}]]]}},{"Tag":"Annotations","props":{"data":[["",{"props":{"className":"decryption-header"},"content":"解密后的数据载荷"},[{"Tag":"h4","content":"解密"},"数据被 \\"服务器端初始密钥计算\\" 步骤中产生的初始密钥和初始向量(IVs)加密。IVs 通过密钥和已经用密钥加密的记录长度进行异或操作生成。在例子中 IV 为 0。","数据包开头的 21 字节(数据包头)还会作为解密过程解密成功时必须满足的认证条件。",{"children":["openssl 命令行工具还不支持 AEAD 算法加解密(AEAD ciphers)，你可以使用作者的命令行工具来",{"Tag":"a","props":{"href":"https://quic.xargs.org/files/aes_128_gcm_decrypt.c"},"content":"解密"},"和",{"Tag":"a","props":{"href":"https://quic.xargs.org/files/aes_128_gcm_encrypt.c"},"content":"加密"},"这些数据。"]},{"Tag":"CodeSample","props":{"code":"### From the \\"Initial Keys Calc\\" step\\n$ key=d77fc4056fcfa32bd1302469ee6ebf90\\n$ iv=fcb748e37ff79860faa07477\\n### from this record\\n$ recdata=c00000000105635f63696405735f63696400407500\\n$ authtag=f0b517a926d62a54a9294136b143b033\\n$ recordnum=0\\n### may need to add -I and -L flags for include and lib dirs\\n$ cc -o aes_128_gcm_decrypt aes_128_gcm_decrypt.c -lssl -lcrypto\\n$ cat /tmp/msg1   | ./aes_128_gcm_decrypt $iv $recordnum $key $recdata $authtag   | hexdump -C\\n\\n00000000  02 00 42 40 00 00 06 00  40 5a 02 00 00 56 03 03  |..B@....@Z...V..|\\n00000010  70 71 72 73 74 75 76 77  78 79 7a 7b 7c 7d 7e 7f  |pqrstuvwxyz{|}~.|\\n... snip ..."}}]]]}},{"Tag":"Annotations","props":{"type":"record-data","data":[["ACK 帧",{"props":{"className":"bytes encrypted"},"content":"02 00 42 40 00 00"},["服务器确认收到客户端的初始数据包0。",{"Tag":"ul","children":[{"Tag":"li","content":"02 - 表明帧类型 ACK"},{"Tag":"li","content":"00 - largest_acknowledged: 被确认的最大数据包"},{"Tag":"li","children":["42 40 - ack_delay: 变长的整数。给出这个 ack 被延迟发送的时间，单位是微秒。","通过计算式子：2",{"Tag":"sup","content":"ack_delay_exponent"}," 得到。其中 ack_delay_exponent = 64 * 8 = 512 (µseconds)。"]},{"Tag":"li","content":"00 - ack_range_count: 额外的 ACK 帧数据长度 0x(0)"},{"Tag":"li","content":"00 - first_ack_range: 可变长度的整数。给出在 largest_acknowledged 之前被确认过的数据包数量。"}]}]],["加密帧帧头",{"props":{"className":"bytes encrypted"},"content":"06 00 40 5a"},[{"children":["每个 QUIC 数据包在其有效载荷中包含",{"Tag":"a","props":{"href":"https://zhuanlan.zhihu.com/p/438579683"},"content":"一个或多个帧的列表"},"。例子中的数据包只包含一个帧，即 加密帧。"]},"加密帧帧头的目的是加密字节流，用于建立安全的 TLS 连接(TLS 1.3 握手)。",{"Tag":"ul","children":[{"Tag":"li","content":"06 - 表明这是 加密帧"},{"Tag":"li","content":"00 - 可变长度的整数，提供加密帧帧内字节的偏移量(0)。"},{"Tag":"li","content":"40 5a - 长度可变的整数(前两位表示2字节的整数)，显示加密帧帧内字节长度为 0x5A(90) 字节。"}]}]],["ServerHello TLS 记录",{"props":{"className":"bytes encrypted"},"content":"02 00 00 56 03 03 70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f 80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 00 13 01 00 00 2e 00 33 00 24 00 1d 00 20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15 00 2b 00 02 03 04"},["这一记录将在后面详细说明。"]]]}}]')});
//# sourceMappingURL=serverInitialPacket.fde75e55.js.map
