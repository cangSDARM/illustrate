{"mappings":"mMAAAA,EAAAC,QAAiBC,KAAKC,MAAM,y7I","sources":["src/TLS12/serverKeyExchange.json"],"sourcesContent":["[\n  \"服务器将密钥交换的公钥发送给客户端。等客户端算出自己的密钥交换后，共享的加密密钥就可以根据私钥和交换过来的公钥生成了。\",\n  {\n    \"Tag\": \"p\",\n    \"children\": [\n      \"现在双方已经同意使用 ECDHE 的密码加解密算法(ServiceHello 的 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA)。这意味着密钥对将基于选定的椭圆曲线(\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"E\"\n      },\n      \"lliptic \",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"C\"\n      },\n      \"urve)，使用 \",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"D\"\n      },\n      \"iffie-\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"H\"\n      },\n      \"ellman，并且密钥对是基于该次连接(\",\n      {\n        \"Tag\": \"strong\",\n        \"content\": \"E\"\n      },\n      \"phemeral)，而不是使用证书上的公/私钥。\"\n    ]\n  },\n  {\n    \"Tag\": \"AnnotationToggler\"\n  },\n  {\n    \"Tag\": \"Annotations\",\n    \"props\": {\n      \"type\": \"record-data\",\n      \"data\": [\n        [\n          \"记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"16 03 03 01 2c\"\n          },\n          [\n            \"TLS 会话被分解成 \\\"记录\\\"(record) 的形式发送和接收。记录是具有类型、协议版本和长度的数据块。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"16 - 表示 TLS 记录类型 0x16(22, Handshake)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 03 - 协议版本 (3.3, 即 TLS 1.2)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"01 2c - 紧接着的数组载荷长度 0x12C(300) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"TLS 握手记录头\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"0c 00 01 28\"\n          },\n          [\n            \"每个 TLS 握手消息都以一个 type 和一个 len 开始。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"0c - 握手消息类型 0x0c (server key exchange)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 01 28 - 紧接着的握手消息数据的长度 0x128 (296) 字节\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"椭圆曲线信息\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"03 00 1d\"\n          },\n          [\n            \"表明服务器端选择的椭圆曲线。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"03 - 表明该曲线是具名的(named_curve)\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 1d - 曲线 ID 0x01d(即 x25519 曲线)\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"服务器端公钥\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"20 9f d7 ad 6d cf f4 29 8d d3 f9 6d 5b 1b 2a f9 10 a0 53 5b 14 88 d7 f8 fa bb 34 9a 98 28 80 b6 15\"\n          },\n          [\n            \"\\\"服务器端准备密钥交换\\\" 步骤中生成的公钥。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"00 20 - 公钥长度为 0x20(32) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"9f d7 ... b6 15 - 公钥\"\n                }\n              ]\n            }\n          ]\n        ],\n        [\n          \"签名\",\n          {\n            \"props\": {\n              \"className\": \"bytes\"\n            },\n            \"content\": \"04 01 01 00 04 02 b6 61 f7 c1 91 ee 59 be 45 37 66 39 bd c3 d4 bb 81 e1 15 ca 73 c8 34 8b 52 5b 0d 23 38 aa 14 46 67 ed 94 31 02 14 12 cd 9b 84 4c ba 29 93 4a aa cc e8 73 41 4e c1 1c b0 2e 27 2d 0a d8 1f 76 7d 33 07 67 21 f1 3b f3 60 20 cf 0b 1f d0 ec b0 78 de 11 28 be ba 09 49 eb ec e1 a1 f9 6e 20 9d c3 6e 4f ff d3 6b 67 3a 7d dc 15 97 ad 44 08 e4 85 c4 ad b2 c8 73 84 12 49 37 25 23 80 9e 43 12 d0 c7 b3 52 2e f9 83 ca c1 e0 39 35 ff 13 a8 e9 6b a6 81 a6 2e 40 d3 e7 0a 7f f3 58 66 d3 d9 99 3f 9e 26 a6 34 c8 1b 4e 71 38 0f cd d6 f4 e8 35 f7 5a 64 09 c7 dc 2c 07 41 0e 6f 87 85 8c 7b 94 c0 1c 2e 32 f2 91 76 9e ac ca 71 64 3b 8b 98 a9 63 df 0a 32 9b ea 4e d6 39 7e 8c d0 1a 11 0a b3 61 ac 5b ad 1c cd 84 0a 6c 8a 6e aa 00 1a 9d 7d 87 dc 33 18 64 35 71 22 6c 4d d2 c2 ac 41 fb\"\n          },\n          [\n            \"由于服务器会为每个会话都生成短暂的密钥，所以和 TLS 之前的版本不同，密钥与证书不会有内在的联系。\",\n            \"为了证明服务器拥有服务器证书(在这个 TLS 会话中的有效性)，它需要使用证书的私钥对握手信息的哈希进行签名。而客户端可以通过使用证书的公钥来证明该签名的有效性。\",\n            {\n              \"Tag\": \"ul\",\n              \"children\": [\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"04 01 - 表明签名算法为 RSA-SHA256\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"01 00 - 表明签名算法长度为 0x100(256) 字节\"\n                },\n                {\n                  \"Tag\": \"li\",\n                  \"content\": \"04 02 b6 ... ac 41 fb - 签名(client_hello_random + server_hello_random + curve_info + public_key)\"\n                }\n              ]\n            },\n            {\n              \"children\": [\n                \"我们可以在命令行使用\",\n                {\n                  \"Tag\": \"a\",\n                  \"props\": {\n                    \"href\": \"https://tls12.xargs.org/files/server.key\"\n                  },\n                  \"content\": \"服务器的私钥\"\n                },\n                \"自己计算签名：\"\n              ]\n            },\n            {\n              \"Tag\": \"CodeSample\",\n              \"props\": {\n                \"code\": \"### client random from Client Hello\\n$ echo -en '\\\\x00\\\\x01\\\\x02\\\\x03\\\\x04\\\\x05\\\\x06\\\\x07'  > /tmp/compute\\n$ echo -en '\\\\x08\\\\x09\\\\x0a\\\\x0b\\\\x0c\\\\x0d\\\\x0e\\\\x0f' >> /tmp/compute\\n$ echo -en '\\\\x10\\\\x11\\\\x12\\\\x13\\\\x14\\\\x15\\\\x16\\\\x17' >> /tmp/compute\\n$ echo -en '\\\\x18\\\\x19\\\\x1a\\\\x1b\\\\x1c\\\\x1d\\\\x1e\\\\x1f' >> /tmp/compute\\n### server random from Server Hello\\n$ echo -en '\\\\x70\\\\x71\\\\x72\\\\x73\\\\x74\\\\x75\\\\x76\\\\x77' >> /tmp/compute\\n$ echo -en '\\\\x78\\\\x79\\\\x7a\\\\x7b\\\\x7c\\\\x7d\\\\x7e\\\\x7f' >> /tmp/compute\\n$ echo -en '\\\\x80\\\\x81\\\\x82\\\\x83\\\\x84\\\\x85\\\\x86\\\\x87' >> /tmp/compute\\n$ echo -en '\\\\x88\\\\x89\\\\x8a\\\\x8b\\\\x8c\\\\x8d\\\\x8e\\\\x8f' >> /tmp/compute\\n### the curve info section from this message\\n$ echo -en '\\\\x03\\\\x00\\\\x1d' >> /tmp/compute\\n### the public key sections from this msg\\n$ echo -en '\\\\x20\\\\x9f\\\\xd7\\\\xad\\\\x6d\\\\xcf\\\\xf4\\\\x29' >> /tmp/compute\\n$ echo -en '\\\\x8d\\\\xd3\\\\xf9\\\\x6d\\\\x5b\\\\x1b\\\\x2a\\\\xf9' >> /tmp/compute\\n$ echo -en '\\\\x10\\\\xa0\\\\x53\\\\x5b\\\\x14\\\\x88\\\\xd7\\\\xf8' >> /tmp/compute\\n$ echo -en '\\\\xfa\\\\xbb\\\\x34\\\\x9a\\\\x98\\\\x28\\\\x80\\\\xb6\\\\x15' >> /tmp/compute\\n$ openssl dgst -sign server.key -sha256 /tmp/compute | hexdump\\n\\n0000000 04 02 b6 61 f7 c1 91 ee 59 be 45 37 66 39 bd c3\\n... snip ...\\n00000f0 7d 87 dc 33 18 64 35 71 22 6c 4d d2 c2 ac 41 fb\"\n              }\n            }\n          ]\n        ]\n      ]\n    }\n  }\n]\n"],"names":["module","exports","JSON","parse"],"version":3,"file":"serverKeyExchange.5c90aa34.js.map"}